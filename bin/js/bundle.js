var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var BattleScene_1 = require("./script/BattleScene");
var GameUI_1 = require("./script/GameUI");
var BattleUI_1 = require("./script/BattleUI");
var ImageBtn_1 = require("./script/ImageBtn");
var SelectHeroUI_1 = require("./script/SelectHeroUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/BattleScene.ts", BattleScene_1.default);
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/BattleUI.ts", BattleUI_1.default);
        reg("script/ImageBtn.ts", ImageBtn_1.default);
        reg("script/SelectHeroUI.ts", SelectHeroUI_1.default);
    };
    GameConfig.width = 1136;
    GameConfig.height = 640;
    GameConfig.scaleMode = "fixedheight";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/BattleScene":47,"./script/BattleUI":48,"./script/GameUI":50,"./script/ImageBtn":51,"./script/SelectHeroUI":52}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var GameStateManager_1 = require("./manager/GameStateManager");
var CustomShader_1 = require("./battle/core/shader/CustomShader");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        Laya.loader.load("res/atlas/bloodfont.atlas", Laya.Handler.create(this, this.startGame));
    };
    Main.prototype.startGame = function () {
        //加载IDE指定的场景
        CustomShader_1.CustomShader.initShader();
        GameStateManager_1.GameStateManager.Instance = new GameStateManager_1.GameStateManager();
        GameStateManager_1.GameStateManager.Instance.changeGameState(1 /* GameLoading */);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./battle/core/shader/CustomShader":37,"./manager/GameStateManager":46}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SceneManager_1 = require("./core/SceneManager");
var EffectManager_1 = require("./core/effect/EffectManager");
var GameTime_1 = require("../data/GameTime");
var GameUtils_1 = require("./core/util/GameUtils");
var EntityManager_1 = require("./core/entity/EntityManager");
var BattleStateManager_1 = require("./battleState/BattleStateManager");
var SkillManager_1 = require("./core/SkillManager");
var EntityFreeFsm_1 = require("./core/fsm/EntityFreeFsm");
var AIManager_1 = require("./core/entity/ai/AIManager");
var CameraManager_1 = require("./core/CameraManager");
var GameData_1 = require("../data/GameData");
var ConfigManager_1 = require("../config/ConfigManager");
var BattleManager = /** @class */ (function () {
    function BattleManager() {
        this._renders = [];
        this._init = false;
        this.battleing = false;
    }
    BattleManager.prototype.init = function (root) {
        if (!this._init) {
            GameTime_1.GameTime.createInstance();
            this._gameTime = GameTime_1.GameTime.Instance;
            this._gameTime.totalGameTime = 0;
            this._gameTime.startTime = Date.now();
            SceneManager_1.SceneManager.createInstance();
            EffectManager_1.EffectManager.createInstance();
            Laya.timer.frameLoop(1, this, this.enterFrame);
            this.state = new BattleStateManager_1.BattleStateManager();
            this.state.init();
            this.skill = SkillManager_1.SkillManager.Instance;
            this.gameData = GameData_1.GameData.instance;
            SceneManager_1.SceneManager.Instance.init(root);
            Laya.stage.on(Laya.UIEvent.RESIZE, this, this.resizeHandler);
            this._init = true;
        }
        SceneManager_1.SceneManager.Instance.enter();
    };
    BattleManager.prototype.resizeHandler = function (e) {
        EntityManager_1.EntityManager.Instance.resize();
    };
    BattleManager.prototype.enterFrame = function () {
        var timer = this._gameTime;
        timer.update();
        if (this.battleing) {
            this.skill.updateTime(timer);
            this.state.updateTime(timer);
            SceneManager_1.SceneManager.Instance.updateTime();
            EntityManager_1.EntityManager.Instance.update(timer);
            EffectManager_1.EffectManager.Instance.updateTime(timer);
        }
        for (var _i = 0, _a = this._renders; _i < _a.length; _i++) {
            var update = _a[_i];
            if (update.enabled)
                update.updateTime(timer);
        }
    };
    BattleManager.prototype.addUpdate = function (update) {
        if (this._renders.indexOf(update) == -1)
            this._renders.push(update);
    };
    BattleManager.prototype.removeUpdate = function (update) {
        var index = this._renders.indexOf(update);
        if (index > -1) {
            this._renders.splice(index, 1);
        }
    };
    BattleManager.prototype.addPlayer = function () {
        var player = EntityManager_1.EntityManager.Instance.createPlayer();
        player.a_bornX = player.gridX = -20.7;
        player.a_bornZ = player.gridY = 22.7;
        player.x = -20.7;
        player.y = 0;
        player.z = 22.7;
        player.a_name = "测试玩家";
        EntityManager_1.EntityManager.Instance.firstPlayer = player;
        player.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
        player._entityAI = AIManager_1.AIManager.Instance.getAI(0 /* PLAYER */);
        player.a_weaponModel = 20001;
        player.a_clothModel = 1;
        player.a_maxHp = player.a_truehp = player.a_delayhp = GameData_1.GameData.instance.hp;
        player.createComponents();
        player.addToView();
        player.checkInfoInview();
        player.model3D.transform.rotate(new Laya.Vector3(0, -90, 0));
        CameraManager_1.CameraManager.Instance.mainCamera.transform.position = new Laya.Vector3(player.x, player.y + 18, player.z - 12);
        CameraManager_1.CameraManager.Instance.mainCamera.transform.lookAt(player.model3D.transform.position, GameUtils_1.GameUtils.Vector3UpTemp);
        CameraManager_1.CameraManager.Instance.mainCamera.transform.translate(new Laya.Vector3(3, 0, 0));
        player._entityInfo.updatePos(player.model3D.transform.position);
    };
    BattleManager.prototype.startGame = function () {
        var enemys = [
            { id: GameUtils_1.IDProvider.getEntityInsID(), mid: 40001 },
            { id: GameUtils_1.IDProvider.getEntityInsID(), mid: 40002 },
            { id: GameUtils_1.IDProvider.getEntityInsID(), mid: 40003 },
            { id: GameUtils_1.IDProvider.getEntityInsID(), mid: 40004 },
            { id: GameUtils_1.IDProvider.getEntityInsID(), mid: 40005 }
        ];
        this.addPlayer();
        this.addEnemys(enemys);
        GameData_1.GameData.instance.oppQueue = enemys;
        this.battleing = true;
        this.state.changeGameState(1 /* READY */);
    };
    BattleManager.prototype.addEnemys = function (enemys) {
        var enemyPos = [
            [
                [0, 0]
            ], [
                [0, -1], [0, 1]
            ], [
                [0, 0], [1, -1], [1, 1]
            ], [
                [0, -1], [0, 1], [1, 2], [1, -2]
            ], [
                [0, 0], [0, -2], [0, 2], [1, -1], [1, 1]
            ]
        ];
        var poss = enemyPos[enemys.length - 1];
        for (var index = 0; index < poss.length; index++) {
            var element = poss[index];
            var player = EntityManager_1.EntityManager.Instance.createEnemy(enemys[index].id);
            player.config = ConfigManager_1.ConfigManager.Instance.monster[enemys[index].mid];
            player.mid = enemys[index].mid;
            player.a_bornX = player.gridX = -26.7 - element[0];
            player.a_bornZ = player.gridY = 22.7 - element[1];
            player.x = -26.7 - element[0];
            player.y = 0;
            player.z = 22.7 - element[1];
            player.a_name = player.config.name;
            player.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
            player._entityAI = AIManager_1.AIManager.Instance.getAI(1 /* MONSTER */);
            player.a_weaponModel = 20001;
            player.a_clothModel = 2;
            player.a_maxHp = player.a_truehp = player.a_delayhp = 12;
            player.createComponents();
            player.addToView();
            player.checkInfoInview();
            player.model3D.transform.rotate(new Laya.Vector3(0, 90, 0));
            player._entityInfo.updatePos(player.model3D.transform.position);
        }
    };
    BattleManager.prototype.useCard = function (target) {
        var gData = GameData_1.GameData.instance;
        if (gData.selectedCard && target) {
            //进行技能释放
            if (gData.mp < gData.selectedCard.config.mp) {
                gData.sendNotif(7 /* LOG */, "法力不足");
                return;
            }
            var card = GameData_1.GameData.instance.selectedCard;
            var entity = EntityManager_1.EntityManager.Instance.firstPlayer;
            var result = entity.entityAI.doSkill(entity, target, card.config.skill, card.level);
            if (result) {
                gData.mp -= card.config.mp;
                GameData_1.GameData.instance.useHandCard(card.id);
            }
        }
    };
    BattleManager.prototype.startTurn = function () {
        if (this.gameData.myTurn) {
            this.state.changeGameState(2 /* MY_TURN */);
        }
        else {
            this.state.changeGameState(3 /* OPPOSITE_TURN */);
        }
    };
    BattleManager.prototype.endMyTurn = function () {
        //如果是我的回合，就进入回合等待
        if (this.state.curState.gameState() == 2 /* MY_TURN */) {
            this.state.changeGameState(6 /* WAIT_TURN */);
        }
    };
    BattleManager.prototype.enemyStateClear = function () {
        for (var _i = 0, _a = GameData_1.GameData.instance.oppQueue; _i < _a.length; _i++) {
            var iterator = _a[_i];
            if (iterator.id) {
                var entity = EntityManager_1.EntityManager.Instance._enemyDic[iterator.id];
                entity.a_state = 0 /* WAIT */;
            }
        }
    };
    BattleManager.prototype.enemyAction = function () {
        for (var _i = 0, _a = GameData_1.GameData.instance.oppQueue; _i < _a.length; _i++) {
            var iterator = _a[_i];
            if (iterator.id) {
                var entity = EntityManager_1.EntityManager.Instance._enemyDic[iterator.id];
                if (entity.a_isDead) {
                    continue;
                }
                if (entity.a_state == 0 /* WAIT */) {
                    entity.a_state = 1 /* ACTION */;
                    entity.entityAI.doSomething(entity, EntityManager_1.EntityManager.Instance.firstPlayer);
                    return true;
                }
                else if (entity.a_state == 1 /* ACTION */) {
                    if (entity.curFsm.getState() == 0 /* FSM_STATE_FREE */) { //动作结束
                        entity.a_state = 2 /* END */;
                    }
                    else {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    BattleManager.prototype.checkEnemyState = function () {
        var enemys = EntityManager_1.EntityManager.Instance.getAllEnemy();
        for (var key in enemys) {
            var entity = enemys[key];
            if (!entity.a_isDead) {
                return;
            }
        }
        //敌人全倒了
        GameData_1.GameData.instance.win();
    };
    BattleManager.prototype.destroyScene = function () {
        GameData_1.GameData.instance.clearLevel();
        SkillManager_1.SkillManager.Instance.cleanSkill();
        EntityManager_1.EntityManager.Instance.destoryAllEntity();
        EffectManager_1.EffectManager.Instance.destoryAllEffect();
        SceneManager_1.SceneManager.Instance.destroyScene();
        this.battleing = false;
    };
    BattleManager.Instance = new BattleManager();
    return BattleManager;
}());
exports.BattleManager = BattleManager;
},{"../config/ConfigManager":43,"../data/GameData":44,"../data/GameTime":45,"./battleState/BattleStateManager":8,"./core/CameraManager":13,"./core/SceneManager":15,"./core/SkillManager":17,"./core/effect/EffectManager":18,"./core/entity/EntityManager":23,"./core/entity/ai/AIManager":27,"./core/fsm/EntityFreeFsm":32,"./core/util/GameUtils":41}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleEndState = /** @class */ (function () {
    function BattleEndState() {
        this._stateTo = 0;
    }
    BattleEndState.prototype.gameState = function () {
        return 7 /* END */;
    };
    BattleEndState.prototype.enter = function () {
        GameData_1.GameData.instance.sendNotif(0 /* BATTLE_STATE_CHANGE */, 7 /* END */);
    };
    BattleEndState.prototype.updateTime = function (gameTime) {
    };
    BattleEndState.prototype.exit = function () {
    };
    return BattleEndState;
}());
exports.default = BattleEndState;
},{"../../data/GameData":44}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleMyTurnState = /** @class */ (function () {
    function BattleMyTurnState() {
        this._stateTo = 0;
    }
    BattleMyTurnState.prototype.gameState = function () {
        return 2 /* MY_TURN */;
    };
    BattleMyTurnState.prototype.enter = function () {
        GameData_1.GameData.instance.mp = 3;
        GameData_1.GameData.instance.drawCards();
        GameData_1.GameData.instance.sendNotif(0 /* BATTLE_STATE_CHANGE */, 2 /* MY_TURN */);
    };
    BattleMyTurnState.prototype.updateTime = function (gameTime) {
    };
    BattleMyTurnState.prototype.exit = function () {
    };
    return BattleMyTurnState;
}());
exports.default = BattleMyTurnState;
},{"../../data/GameData":44}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleManager_1 = require("../BattleManager");
var BattleOppTurnState = /** @class */ (function () {
    function BattleOppTurnState() {
        this._stateTo = 0;
    }
    BattleOppTurnState.prototype.gameState = function () {
        return 3 /* OPPOSITE_TURN */;
    };
    BattleOppTurnState.prototype.enter = function () {
        var gData = GameData_1.GameData.instance;
        gData.sendNotif(0 /* BATTLE_STATE_CHANGE */, 3 /* OPPOSITE_TURN */);
        gData.oppState = 0;
    };
    BattleOppTurnState.prototype.updateTime = function (gameTime) {
        if (GameData_1.GameData.instance.oppQueue) {
            var result = BattleManager_1.BattleManager.Instance.enemyAction();
            if (!result) {
                BattleManager_1.BattleManager.Instance.state.changeGameState(6 /* WAIT_TURN */);
            }
        }
    };
    BattleOppTurnState.prototype.exit = function () {
    };
    return BattleOppTurnState;
}());
exports.default = BattleOppTurnState;
},{"../../data/GameData":44,"../BattleManager":3}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleManager_1 = require("../BattleManager");
var BattleReadyState = /** @class */ (function () {
    function BattleReadyState() {
        this._stateTo = 0;
    }
    BattleReadyState.prototype.gameState = function () {
        return 1 /* READY */;
    };
    BattleReadyState.prototype.enter = function () {
        var gameData = GameData_1.GameData.instance;
        // gameData.mp = 3;
        // gameData.hp = 100;
        gameData.sendNotif(0 /* BATTLE_STATE_CHANGE */, 1 /* READY */);
        gameData.prepareCardPile();
        gameData.myTurn = true;
    };
    BattleReadyState.prototype.updateTime = function (gameTime) {
        BattleManager_1.BattleManager.Instance.state.changeGameState(4 /* TURN_START */);
    };
    BattleReadyState.prototype.exit = function () {
    };
    return BattleReadyState;
}());
exports.default = BattleReadyState;
},{"../../data/GameData":44,"../BattleManager":3}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BattleReadyState_1 = require("./BattleReadyState");
var BattleMyTurnState_1 = require("./BattleMyTurnState");
var BattleOppTurnState_1 = require("./BattleOppTurnState");
var BattleEndState_1 = require("./BattleEndState");
var BattleWaitState_1 = require("./BattleWaitState");
var BattleTurnStartState_1 = require("./BattleTurnStartState");
var BattleTurnEndState_1 = require("./BattleTurnEndState");
var BattleStateManager = /** @class */ (function () {
    function BattleStateManager() {
        this._gameStates = {};
    }
    BattleStateManager.prototype.init = function () {
        var gState = new BattleReadyState_1.default();
        this._gameStates[1 /* READY */] = gState;
        gState = new BattleMyTurnState_1.default();
        this._gameStates[2 /* MY_TURN */] = gState;
        gState = new BattleOppTurnState_1.default();
        this._gameStates[3 /* OPPOSITE_TURN */] = gState;
        gState = new BattleTurnStartState_1.default();
        this._gameStates[4 /* TURN_START */] = gState;
        gState = new BattleTurnEndState_1.default;
        this._gameStates[5 /* TURN_END */] = gState;
        gState = new BattleEndState_1.default();
        this._gameStates[7 /* END */] = gState;
        gState = new BattleWaitState_1.default();
        this._gameStates[6 /* WAIT_TURN */] = gState;
    };
    Object.defineProperty(BattleStateManager.prototype, "curState", {
        get: function () {
            return this._currentState;
        },
        enumerable: true,
        configurable: true
    });
    BattleStateManager.prototype.changeGameState = function (state) {
        if (this._currentState != null && this._currentState.gameState() == state) {
            return;
        }
        if (this._gameStates[state] != null) {
            if (this._currentState != null) {
                this._currentState.exit();
            }
            this._currentState = this._gameStates[state];
            this._currentState.enter();
        }
    };
    BattleStateManager.prototype.updateTime = function (gameTime) {
        if (this._currentState != null) {
            this._currentState.updateTime(gameTime);
        }
        // let nextStateType:BattleStateType = BattleStateType.Continue;
        // if (this._currentState != null)
        // {
        // 	nextStateType = this._currentState.update(gameTime);
        // }
        // if (nextStateType > BattleStateType.Continue)
        // {
        // 	this.changeGameState(nextStateType);
        // }
    };
    BattleStateManager.prototype.getState = function (type) {
        return this._gameStates[type];
    };
    return BattleStateManager;
}());
exports.BattleStateManager = BattleStateManager;
},{"./BattleEndState":4,"./BattleMyTurnState":5,"./BattleOppTurnState":6,"./BattleReadyState":7,"./BattleTurnEndState":9,"./BattleTurnStartState":10,"./BattleWaitState":11}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleManager_1 = require("../BattleManager");
var BattleTurnEndState = /** @class */ (function () {
    function BattleTurnEndState() {
        this._stateTo = 0;
    }
    BattleTurnEndState.prototype.gameState = function () {
        return 5 /* TURN_END */;
    };
    BattleTurnEndState.prototype.enter = function () {
        GameData_1.GameData.instance.sendNotif(0 /* BATTLE_STATE_CHANGE */, 5 /* TURN_END */);
        GameData_1.GameData.instance.selectedCard = null;
        GameData_1.GameData.instance.dropCards();
    };
    BattleTurnEndState.prototype.updateTime = function (gameTime) {
        GameData_1.GameData.instance.myTurn = !GameData_1.GameData.instance.myTurn;
        BattleManager_1.BattleManager.Instance.enemyStateClear();
        BattleManager_1.BattleManager.Instance.state.changeGameState(4 /* TURN_START */);
    };
    BattleTurnEndState.prototype.exit = function () {
    };
    return BattleTurnEndState;
}());
exports.default = BattleTurnEndState;
},{"../../data/GameData":44,"../BattleManager":3}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleManager_1 = require("../BattleManager");
var BattleTurnStartState = /** @class */ (function () {
    function BattleTurnStartState() {
        this._stateTo = 0;
    }
    BattleTurnStartState.prototype.gameState = function () {
        return 4 /* TURN_START */;
    };
    BattleTurnStartState.prototype.enter = function () {
        GameData_1.GameData.instance.sendNotif(0 /* BATTLE_STATE_CHANGE */, 4 /* TURN_START */);
    };
    BattleTurnStartState.prototype.updateTime = function (gameTime) {
        BattleManager_1.BattleManager.Instance.startTurn();
    };
    BattleTurnStartState.prototype.exit = function () {
    };
    return BattleTurnStartState;
}());
exports.default = BattleTurnStartState;
},{"../../data/GameData":44,"../BattleManager":3}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameData_1 = require("../../data/GameData");
var BattleManager_1 = require("../BattleManager");
var SkillManager_1 = require("../core/SkillManager");
var BattleWaitState = /** @class */ (function () {
    function BattleWaitState() {
        this._stateTo = 0;
    }
    BattleWaitState.prototype.gameState = function () {
        return 6 /* WAIT_TURN */;
    };
    BattleWaitState.prototype.enter = function () {
        GameData_1.GameData.instance.sendNotif(0 /* BATTLE_STATE_CHANGE */, 6 /* WAIT_TURN */);
    };
    BattleWaitState.prototype.updateTime = function (gameTime) {
        if (SkillManager_1.SkillManager.Instance.empty) {
            if (GameData_1.GameData.instance._gameOver) {
                GameData_1.GameData.instance.sendNotif(8 /* GAME_OVER */);
            }
            else
                BattleManager_1.BattleManager.Instance.state.changeGameState(5 /* TURN_END */);
        }
    };
    BattleWaitState.prototype.exit = function () {
    };
    return BattleWaitState;
}());
exports.default = BattleWaitState;
},{"../../data/GameData":44,"../BattleManager":3,"../core/SkillManager":17}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConfigManager_1 = require("../../config/ConfigManager");
var EffectManager_1 = require("./effect/EffectManager");
var EntityManager_1 = require("./entity/EntityManager");
var BuffManager = /** @class */ (function () {
    function BuffManager() {
        this.enabled = true;
        this._buffs = {};
        this._nextUpdate = 0;
    }
    Object.defineProperty(BuffManager, "Instance", {
        get: function () {
            if (this._instance == null || this._instance == undefined) {
                this._instance = new BuffManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BuffManager.prototype.addBuff = function (entity, bufferAdd, showDelay) {
        if (showDelay === void 0) { showDelay = false; }
        if (entity) {
            var buff = void 0;
            if (!entity.a_buffList) {
                entity.a_buffList = {};
            }
            // console.log(`${go.name}添加buff ${bufferAdd.buffid} - ${bufferAdd.lid}`);
            if (entity.a_buffList[bufferAdd.lid]) { //如果存在了，就更新下时间？
                buff = entity.a_buffList[bufferAdd.lid];
                buff.endTime = bufferAdd.time;
            }
            else {
                buff = new BuffVO();
                buff.buffId = bufferAdd.buffid;
                buff.endTime = bufferAdd.time;
                buff.entityId = entity.uid;
                buff.id = bufferAdd.lid;
                entity.a_buffList[buff.id] = buff;
                var buffConfig = ConfigManager_1.ConfigManager.Instance.buff[buff.buffId];
                this._buffs[buff.id] = buff;
                //如果buff效果想要延时显示，比如毒或者麻痹之类的，延迟变颜色，那么showDelay传true，然后下面在延时check一下这个entity即可
                if (!showDelay) {
                    if (entity.display) {
                        // let configs = ConfigManager.Instance.bufferEffects[buffConfig[BuffConConfig.bufferType]];
                        // if(configs){
                        // 	for(let effect of configs){
                        // 		if(!buff.effects){
                        // 			buff.effects = [];
                        // 		}
                        // 		// console.log("加魔法盾特效1");
                        // 		if(!entity.hasEff(effect.effect)){
                        // 			// console.log("加魔法盾特效2");
                        // 			let eff = SceneEffectManager.Instance.addEntityEffect(entity,effect.effect,effect.x,effect.y,-1,1,effect.delaytime);
                        // 			buff.effects.push[eff.id];
                        // 		}
                        // 	}
                        // }
                        // if(buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.SHI_DU_SHU || buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.HERO_SHI_DU_SHU){
                        // 	entity.animal.setBodyFilter(FilterUtil.FILTER_GREEN());
                        // }
                        // else if(buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.MA_BI || buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.YE_MAN
                        //  || buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.HERO_YE_MAN){
                        // 	entity.animal.setBodyFilter(FilterUtil.FILTER_MABI());
                        // }
                    }
                }
            }
        }
    };
    BuffManager.prototype.removeBuff = function (entity, lid) {
        if (entity && entity.a_buffList && entity.a_buffList[lid]) {
            var buffvo = entity.a_buffList[lid];
            if (buffvo.effects) {
                for (var _i = 0, _a = buffvo.effects; _i < _a.length; _i++) {
                    var effid = _a[_i];
                    var eff = EffectManager_1.EffectManager.Instance.getEffect(effid);
                    if (eff) {
                        eff.die();
                    }
                }
            }
            delete entity.a_buffList[lid];
            this.check(entity);
        }
        delete this._buffs[lid];
    };
    //检测是否加滤镜
    BuffManager.prototype.check = function (entity) {
        if (entity.display) {
            var a_buffList = entity.a_buffList;
            var hasFilter = false;
            entity.mabi = false;
            for (var key in a_buffList) {
                var buff = a_buffList[key];
                var buffConfig = ConfigManager_1.ConfigManager.Instance.buff[buff.buffId];
                // if(buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.MA_BI){
                // 	entity.mabi = true;
                // }
                // if(buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.SHI_DU_SHU){
                // 	entity.animal.setBodyFilter(FilterUtil.FILTER_GREEN());
                // 	hasFilter = true;
                // 	continue;
                // }else if(buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.MA_BI || buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.YE_MAN
                // 		 || buffConfig[BuffConConfig.bufferType] == constants.E_Buff_Type.HERO_YE_MAN){
                // 	entity.animal.setBodyFilter(FilterUtil.FILTER_MABI());
                // 	continue;
                // }
                // let configs:Array<SkillEffectConfig> = ConfigManager.Instance.bufferEffects[buffConfig[BuffConConfig.bufferType]];
                // if(configs){
                // 	for(let effect of configs){
                // 		if(!buff.effects){
                // 			buff.effects = [];
                // 		}
                // 		if(!entity.hasEff(effect.effect)){
                // 			// let eff = EffectManager.Instance.addEntityEffect(entity,effect.effect,effect.x,effect.y,-1,1,effect.delaytime);
                // 			// buff.effects.push[eff.id];
                // 		}
                // 	}
                // }
            }
            if (!hasFilter) {
                // entity.animal.setBodyFilter(null);
            }
        }
    };
    // buff结束移除处理，buff效果触发处理
    BuffManager.prototype.update = function (turnNum) {
        var thisObj = this;
        for (var key in thisObj._buffs) {
            var buff = thisObj._buffs[key];
            if (buff.endTime < turnNum) { //超过结束时间1秒了，客户端自己移除先？防止出bug一直被麻痹。。。
                thisObj.removeBuff(EntityManager_1.EntityManager.Instance.getEntity(buff.entityId), buff.id);
            }
        }
    };
    //目前啥也没有。。
    BuffManager.prototype.clear = function () {
        this._buffs = {};
    };
    return BuffManager;
}());
exports.BuffManager = BuffManager;
var BuffVO = /** @class */ (function () {
    function BuffVO() {
    }
    return BuffVO;
}());
exports.BuffVO = BuffVO;
},{"../../config/ConfigManager":43,"./effect/EffectManager":18,"./entity/EntityManager":23}],13:[function(require,module,exports){
"use strict";
/*
* name;
*/
Object.defineProperty(exports, "__esModule", { value: true });
var CameraManager = /** @class */ (function () {
    function CameraManager() {
        /**绕y轴角度 */
        this.curHor = 0;
        /**绕x轴角度 */
        this.curVer = 45;
        /**距离 */
        this.curDistance = 20;
    }
    CameraManager.createInstance = function () {
        this.Instance = new CameraManager();
    };
    /**
     * 上下左右  1234
     * @param forward
     */
    CameraManager.prototype.moveCamera = function (forward) {
        this.move = forward;
    };
    CameraManager.Instance = new CameraManager();
    return CameraManager;
}());
exports.CameraManager = CameraManager;
},{}],14:[function(require,module,exports){
"use strict";
/**
* name
*/
Object.defineProperty(exports, "__esModule", { value: true });
var GameDefine = /** @class */ (function () {
    function GameDefine() {
    }
    GameDefine.MAP_GRID_WIDTH = 72;
    GameDefine.MAP_GRID_HEIGHT = 48;
    GameDefine.Effect_Wait_Time = 200;
    return GameDefine;
}());
exports.GameDefine = GameDefine;
var DirectionType = /** @class */ (function () {
    function DirectionType() {
    }
    DirectionType.UP = 4;
    DirectionType.RIGHT_UP = 3;
    DirectionType.RIGHT = 2;
    DirectionType.RIGHT_DOWN = 1;
    DirectionType.DOWN = 0;
    DirectionType.LEFT_DOWN = 7;
    DirectionType.LEFT = 6;
    DirectionType.LEFT_UP = 5;
    DirectionType.NONE = 0;
    DirectionType.EIGHT_MIRROR_DIRS = [0, 1, 2, 3, 4, 3, 2, 1];
    DirectionType.EIGHT_FROM_TWO_DIRS = [1, 1, 1, 3, 3, 3, 1, 1];
    /**
      * 四方向数组
      */
    DirectionType.FOUR_DIRS = [0, 2, 4, 6];
    /**
      * 八方向数组
      */
    DirectionType.EIGHT_DIRS = [0, 1, 2, 3, 4, 5, 6, 7];
    return DirectionType;
}());
exports.DirectionType = DirectionType;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ShaderManager_1 = require("./ShaderManager");
var CameraManager_1 = require("./CameraManager");
var AIManager_1 = require("./entity/ai/AIManager");
var BattleManager_1 = require("../BattleManager");
var EntityManager_1 = require("./entity/EntityManager");
var ConfigManager_1 = require("../../config/ConfigManager");
var GameData_1 = require("../../data/GameData");
var ResDisposer_1 = require("./util/ResDisposer");
/**
* name
*/
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        this._mousePoint = new Laya.Vector2();
        this._hitresult = new Laya.HitResult();
        this._mouseRay = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
    }
    SceneManager.createInstance = function () {
        this.Instance = new SceneManager();
    };
    SceneManager.prototype.init = function (root) {
        this._root = root;
        this.sceneCont = new Laya.Sprite();
        this._root.addChild(this.sceneCont);
        this._root.mouseEnabled = this.sceneCont.mouseEnabled = true;
        // this.sceneCont.graphics.drawRect(0,0,1500,1000,"#ff00ff");
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDownHandler);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMoveHandler);
        this.infoCont = new Laya.Sprite();
        this._root.addChild(this.infoCont);
        this.infoCont.mouseEnabled = false;
        this.infoCont.mouseThrough = true;
        ShaderManager_1.ShaderManager.createInstance();
        ShaderManager_1.ShaderManager.Instance.initShaders();
        CameraManager_1.CameraManager.createInstance();
        AIManager_1.AIManager.createInstance();
    };
    SceneManager.prototype.mouseDownHandler = function (e) {
        if (CameraManager_1.CameraManager.Instance.mainCamera) {
            //获取鼠标位置
            this._mousePoint.elements[0] = Laya.MouseManager.instance.mouseX;
            this._mousePoint.elements[1] = Laya.MouseManager.instance.mouseY;
            //产生射线
            CameraManager_1.CameraManager.Instance.mainCamera.viewportPointToRay(this._mousePoint, this._mouseRay);
            //拿到射线碰撞的物体
            this.scene.physicsSimulation.rayCast(this._mouseRay, this._hitresult);
            //如果碰撞到物体
            if (this._hitresult.succeeded) {
                //删除碰撞到的物体
                var meshSp = this._hitresult.collider.owner;
                if (meshSp.parent && meshSp.parent["_aeId"]) {
                    var aeid = meshSp.parent["_aeId"];
                    var entity = EntityManager_1.EntityManager.Instance.getEntity(aeid);
                    if (entity) {
                        BattleManager_1.BattleManager.Instance.useCard(entity);
                    }
                }
            }
        }
    };
    SceneManager.prototype.mouseMoveHandler = function (e) {
        if (CameraManager_1.CameraManager.Instance.mainCamera) {
            this._mousePoint.elements[0] = Laya.MouseManager.instance.mouseX;
            this._mousePoint.elements[1] = Laya.MouseManager.instance.mouseY;
            //产生射线
            CameraManager_1.CameraManager.Instance.mainCamera.viewportPointToRay(this._mousePoint, this._mouseRay);
            //拿到射线碰撞的物体
            this.scene.physicsSimulation.rayCast(this._mouseRay, this._hitresult);
            //如果碰撞到物体
            var lastHited = this._lastMouseEntity;
            var entity = void 0;
            if (this._hitresult.succeeded) {
                //删除碰撞到的物体
                var meshSp = this._hitresult.collider.owner;
                if (meshSp.parent && meshSp.parent["_aeId"]) {
                    var aeid = meshSp.parent["_aeId"];
                    entity = EntityManager_1.EntityManager.Instance.getEntity(aeid);
                    this._lastMouseEntity = entity;
                    if (entity.model3D) {
                        entity.model3D.setSelected(true);
                    }
                    // if(entity){
                    // 	BattleManager.Instance.useCard(entity);
                    // }
                    // console.log("触碰：" + entity.a_name);
                }
            }
            if (lastHited && lastHited != entity) {
                if (lastHited.model3D) {
                    lastHited.model3D.setSelected(false);
                }
            }
        }
    };
    SceneManager.prototype.enter = function () {
        var res = ConfigManager_1.ConfigManager.Instance.map["map_" + GameData_1.GameData.instance.mapid].url;
        Laya.loader.create(res, Laya.Handler.create(this, this.onLoadFinish));
        // this.onLoadFinish();
    };
    SceneManager.prototype.destroyScene = function () {
        if (CameraManager_1.CameraManager.Instance.mainCamera) {
            CameraManager_1.CameraManager.Instance.mainCamera.destroy(true);
            CameraManager_1.CameraManager.Instance.mainCamera = null;
        }
        if (this.directionLight) {
            this.directionLight.destroy(true);
            this.directionLight = null;
        }
        if (this.scene.parent) {
            this.scene.parent.removeChild(this.scene);
            this.scene.destroy(true);
            this.scene = null;
        }
        var resData = ConfigManager_1.ConfigManager.Instance.map["map_" + GameData_1.GameData.instance.mapid];
        for (var _i = 0, _a = resData.allRes; _i < _a.length; _i++) {
            var url = _a[_i];
            ResDisposer_1.ResDisposer.Instance.disposeRes(url);
        }
        ResDisposer_1.ResDisposer.Instance.disposeRes(resData.url);
    };
    SceneManager.prototype.onLoadFinish = function () {
        var scene = Laya.loader.getRes(ConfigManager_1.ConfigManager.Instance.map["map_" + GameData_1.GameData.instance.mapid].url);
        this.scene = this.sceneCont.addChild(scene);
        // (scene.getChildAt(0) as Laya.MeshSprite3D).meshRenderer.receiveShadow = true;
        this.initCamera();
        // //添加方向光
        this.initDirectionLight();
        BattleManager_1.BattleManager.Instance.startGame();
    };
    SceneManager.prototype.updateTime = function () {
    };
    SceneManager.prototype.initDirectionLight = function () {
        this.directionLight = this.scene.addChild(new Laya.DirectionLight());
        this.directionLight.color = new Laya.Vector3(1.5, 1.5, 1.5);
        //this.directionLight.transform.translate(new Laya.Vector3(-2.165527, 2.193848, -3.087891));
        // this.directionLight.direction = new Laya.Vector3(0, -1.0, -1.0);
        this.directionLight.transform.rotation = new Laya.Quaternion(0.2205614, 0.5054134, 0.8231464, -0.1354251);
        this.directionLight.shadow = false;
        // this.directionLight.shadowDistance = 45;
        // this.directionLight.shadowPSSMCount = 1;
        // this.directionLight.shadowPCFType = 3;
        // this.directionLight.shadowResolution = 2048;
    };
    SceneManager.prototype.initCamera = function () {
        //添加照相机channel
        var camera = (this.scene.addChild(new Laya.Camera(0, 0.3, 1000)));
        // camera.transform.translate(new Laya.Vector3(-50.51006, 5.763073, 24.30456));
        camera.transform.position = new Laya.Vector3(-50.51006, 5.763073, 24.30456);
        // camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        camera.transform.rotation = new Laya.Quaternion(-0.2575304, -0.6578727, -0.2569133, 0.6594522);
        camera.fieldOfView = 20;
        //this.camera.clearColor = new Laya.Vector4(0.1921569,0.3019608,0.4745098,0);
        // camera.clearFlag = Laya.BaseCamera.CLEARFLAG_SKY;
        // var skyBox = new Laya.SkyBox();
        // camera.sky = skyBox;
        // skyBox.textureCube = Laya.TextureCube.load("res/fbx/LayaScene_testLaya/Assets/TinyTerrain/Standard Assets/Skyboxes/Skybox.ltc");
        CameraManager_1.CameraManager.Instance.mainCamera = camera;
        // camera.addComponent();
    };
    return SceneManager;
}());
exports.SceneManager = SceneManager;
},{"../../config/ConfigManager":43,"../../data/GameData":44,"../BattleManager":3,"./CameraManager":13,"./ShaderManager":16,"./entity/EntityManager":23,"./entity/ai/AIManager":27,"./util/ResDisposer":42}],16:[function(require,module,exports){
"use strict";
/*
* name;
*/
Object.defineProperty(exports, "__esModule", { value: true });
var ShaderManager = /** @class */ (function () {
    function ShaderManager() {
    }
    ShaderManager.createInstance = function () {
        this.Instance = new ShaderManager();
    };
    ShaderManager.prototype.initShaders = function () {
    };
    return ShaderManager;
}());
exports.ShaderManager = ShaderManager;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameUtils_1 = require("./util/GameUtils");
var SkillBase_1 = require("./skill/SkillBase");
var Pool_1 = require("../../utils/Pool");
var ConfigManager_1 = require("../../config/ConfigManager");
var SkillManager = /** @class */ (function () {
    function SkillManager() {
        this.enabled = true;
        this._skills = {};
        this.empty = true;
        var thisObj = this;
        thisObj._skills = {};
        thisObj._readyToDispose = new Array();
        thisObj.skillPools = {};
        thisObj.skillPools[1 /* NORMAL */] = new Pool_1.Pool(SkillBase_1.NormalHurtSkill);
    }
    Object.defineProperty(SkillManager, "Instance", {
        get: function () {
            if (this._instance == null || this._instance == undefined) {
                this._instance = new SkillManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    SkillManager.prototype.updateTime = function (gameTime) {
        var thisObj = this;
        var noneSkill = true;
        for (var key in thisObj._skills) {
            var skill = thisObj._skills[key];
            if (skill.enabled)
                skill.update(gameTime);
            noneSkill = false;
        }
        for (var _i = 0, _a = thisObj._readyToDispose; _i < _a.length; _i++) {
            var dead = _a[_i];
            delete thisObj._skills[dead.id];
            dead.dispose();
        }
        thisObj._readyToDispose.length = 0;
        thisObj.empty = noneSkill;
    };
    SkillManager.prototype.cleanSkill = function () {
        var thisObj = this;
        for (var key in thisObj._skills) {
            var skill = thisObj._skills[key];
            thisObj._readyToDispose.push(skill);
        }
    };
    SkillManager.prototype.readyToDie = function (skill) {
        this._readyToDispose.push(skill);
    };
    SkillManager.prototype.createSkill = function (skillid) {
        var skillCfg = ConfigManager_1.ConfigManager.Instance.skill[skillid];
        var pool = this.skillPools[skillCfg.skilltype];
        if (pool) {
            var skill = pool.pop();
            skill.id = GameUtils_1.IDProvider.getSkillInsID();
            this._skills[skill.id] = skill;
            this.empty = false;
            return skill;
        }
        return null;
    };
    SkillManager.prototype.returnSkill = function (skill) {
        var pool = this.skillPools[skill.type];
        if (pool) {
            pool.push(skill);
        }
    };
    SkillManager.prototype.getSkillById = function (sid) {
        if (sid in this._skills) {
            return this._skills[sid];
        }
        else {
            return null;
        }
    };
    return SkillManager;
}());
exports.SkillManager = SkillManager;
},{"../../config/ConfigManager":43,"../../utils/Pool":57,"./skill/SkillBase":38,"./util/GameUtils":41}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var Utils_1 = require("../../../utils/Utils");
var GameTime_1 = require("../../../data/GameTime");
var GameDefine_1 = require("../GameDefine");
var GameUtils_1 = require("../util/GameUtils");
var SceneManager_1 = require("../SceneManager");
var EffectManager = /** @class */ (function () {
    function EffectManager() {
        this._effectDic = {};
        this._readyToDispose = [];
    }
    EffectManager.createInstance = function () {
        this.Instance = new EffectManager();
        this.Instance.initPool();
    };
    EffectManager.prototype.initPool = function () {
        this._effectPools = {};
        this._effectPools[E_Effect_Type.NORMAL] = new Utils_1.Pool(NormalEffect);
    };
    EffectManager.prototype.getEffect = function (key) {
        return this._effectDic[key];
    };
    EffectManager.prototype.createEffect = function (type) {
        var pool = this._effectPools[type];
        if (pool) {
            var effect = pool.pop();
            effect.type = type;
            effect.id = GameUtils_1.IDProvider.getEffectInsID();
            return effect;
        }
        return null;
    };
    EffectManager.prototype.returnEffect = function (effect) {
        var pool = this._effectPools[effect.type];
        if (pool) {
            pool.push(effect);
        }
    };
    EffectManager.prototype.addEffect = function (id, x, y, z, startTime, rotation, endTime) {
        if (rotation === void 0) { rotation = null; }
        if (endTime === void 0) { endTime = 0; }
        var effect = this.createEffect(E_Effect_Type.NORMAL);
        effect.init(id, SceneManager_1.SceneManager.Instance.scene, endTime, startTime);
        effect.setPosition(x, y, z);
        if (rotation) {
            effect.rotation = rotation;
        }
        this._effectDic[effect.id] = effect;
        if (startTime == 0)
            effect.start();
    };
    // public addEntityEffect()
    EffectManager.prototype.destoryAllEffect = function () {
        for (var key in this._effectDic) {
            this.readyToDie(this._effectDic[key]);
        }
    };
    EffectManager.prototype.updateTime = function (gameTime) {
        for (var _i = 0, _a = this._readyToDispose; _i < _a.length; _i++) {
            var deadEffect = _a[_i];
            delete this._effectDic[deadEffect.id];
            deadEffect.dispose();
        }
        this._readyToDispose.length = 0;
        var effect;
        for (var key in this._effectDic) {
            effect = this._effectDic[key];
            effect.updateTime(gameTime);
        }
    };
    EffectManager.prototype.readyToDie = function (effect) {
        this._readyToDispose.push(effect);
    };
    return EffectManager;
}());
exports.EffectManager = EffectManager;
var EffectResConfig = /** @class */ (function () {
    function EffectResConfig() {
    }
    //技能特效ID对应表
    EffectResConfig.GL_MagicEffectIdConfig = {
        //战士1-5技能
        1: "res/res3D/par3D/zs_skill1.lh",
        2: "res/res3D/par3D/zs_skill2.lh",
        3: "res/res3D/par3D/zs_skill3.lh",
        4: "res/res3D/par3D/zs_skill4.lh",
        5: "res/res3D/par3D/zs_skill5.lh",
        //法师1-5技能
        6: "res/res3D/par3D/fs_skill1.lh",
        7: "res/res3D/par3D/fs_skill2.lh",
        8: "res/res3D/par3D/fs_skill3.lh",
        9: "res/res3D/par3D/fs_skill4.lh",
        10: "res/res3D/par3D/fs_skill5.lh",
        //道士1-5技能
        11: "res/res3D/par3D/gs_skill1.lh",
        12: "res/res3D/par3D/gs_skill2.lh",
        13: "res/res3D/par3D/gs_skill3.lh",
        14: "res/res3D/par3D/gs_skill4.lh",
        15: "res/res3D/par3D/gs_skill5.lh"
    };
    return EffectResConfig;
}());
exports.EffectResConfig = EffectResConfig;
var E_Effect_Type;
(function (E_Effect_Type) {
    E_Effect_Type[E_Effect_Type["NORMAL"] = 0] = "NORMAL";
    E_Effect_Type[E_Effect_Type["BULLET"] = 1] = "BULLET";
    E_Effect_Type[E_Effect_Type["ENTITY_EFFECT"] = 2] = "ENTITY_EFFECT";
    E_Effect_Type[E_Effect_Type["TREASURE"] = 3] = "TREASURE";
    E_Effect_Type[E_Effect_Type["BUFF"] = 4] = "BUFF";
})(E_Effect_Type = exports.E_Effect_Type || (exports.E_Effect_Type = {}));
var NormalEffect = /** @class */ (function () {
    function NormalEffect() {
        this.enabled = false;
        this._inView = false;
    }
    NormalEffect.prototype.init = function (eid, container, loop, startTime, dir, sound, frame, scale, offsetX, offsetY, attention) {
        if (loop === void 0) { loop = -1; }
        if (startTime === void 0) { startTime = 0; }
        this.eid = eid;
        // this.config = ConfigManager.Instance.effect[eid];
        this._container = container;
        this._loop = loop;
        if (scale == 0) {
            this._scale = null;
        }
        else {
            this._scale = scale;
        }
        this.offsetX = offsetX == null ? 0 : offsetX;
        this.offsetY = offsetY == null ? 0 : offsetY;
        this.startTime = startTime;
        //this.animation.addType(AnimationType.Effect,this.config.model,SkinConfig.getPlayer());
        this.id = GameUtils_1.IDProvider.getEffectInsID();
        this._dir = dir;
        this.soundid = sound;
        this.attention = attention;
    };
    NormalEffect.prototype.setTarget = function (target) {
        this._targetEntity = target;
    };
    Object.defineProperty(NormalEffect.prototype, "rotation", {
        set: function (value) {
            if (!this._rotation) {
                this._rotation = new Laya.Quaternion(0, 0, 0, 0);
            }
            value.cloneTo(this._rotation);
            if (this.animation) {
                // this.animation.rotation = value;
                GameUtils_1.GameUtils.setQuaternion(this.animation, this._rotation);
            }
        },
        enumerable: true,
        configurable: true
    });
    NormalEffect.prototype.setPosition = function (x, y, z) {
        this._x = x;
        this._y = y;
        this._z = z;
        if (this.animation) {
            var pos = this.animation.transform.localPosition;
            pos.x = x;
            pos.y = y;
            pos.z = z;
            this.animation.transform.localPosition = pos;
        }
    };
    NormalEffect.prototype.addToView = function () {
        if (this.animation == null)
            this.initDisplay();
        // this.animation.addToParent(this._container);
    };
    NormalEffect.prototype.initDisplay = function () {
        // let sp = Laya.Sprite3D.load(EffectResConfig.GL_MagicEffectIdConfig[this.eid]);
        // if (sp && sp.loaded) {
        //     this.animation = Laya.Sprite3D.instantiate(sp);
        //     this._container.addChild(this.animation);
        //     this.initAnimation();
        // } else {
        //     this.animation = sp;
        //     this.animation.once(Laya.Event.HIERARCHY_LOADED, this, this.loadedHandler);
        // }
    };
    NormalEffect.prototype.initAnimation = function () {
        if (this._rotation) {
            GameUtils_1.GameUtils.setQuaternion(this.animation, this._rotation);
        }
        this.animation.transform.scale = new Laya.Vector3(3, 3, 3);
        this.setPosition(this._x, this._y, this._z);
    };
    NormalEffect.prototype.loadedHandler = function (e) {
        this.animation = Laya.Sprite3D.instantiate(this.animation);
        this._container.addChild(this.animation);
        this.initAnimation();
    };
    NormalEffect.prototype.die = function () {
        this.enabled = false;
        if (this.animation) {
            // this.animation.off(Laya.Event.HIERARCHY_LOADED, this, this.loadedHandler, true);
            this.animation = null;
        }
        //放入销毁列表，场景中的物体销毁都放到下一帧
        EffectManager.Instance.readyToDie(this);
    };
    NormalEffect.prototype.start = function () {
        if (!this.enabled) {
            this.enabled = true;
            this.startTime = GameTime_1.GameTime.Instance.totalGameTime;
            this.addToView();
        }
        if (this._targetEntity && this._targetEntity.enabled) {
            this.x = this._targetEntity.x + this.offsetX;
            this.y = this._targetEntity.y + this.offsetY;
        }
    };
    Object.defineProperty(NormalEffect.prototype, "inView", {
        get: function () {
            return this._inView;
        },
        set: function (value) {
            this._inView = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalEffect.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (value) {
            this._x = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalEffect.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (value) {
            this._y = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NormalEffect.prototype, "z", {
        get: function () {
            return this._z;
        },
        set: function (value) {
            this._z = value;
        },
        enumerable: true,
        configurable: true
    });
    NormalEffect.prototype.updateTime = function (gameTime) {
        var self = this;
        if (self.enabled) {
            if (self.animation) { //下载好并在视野中播放了
                // self.animation.render(gameTime);
                if (self._targetEntity && self._targetEntity.enabled) {
                    self.x = self._targetEntity.x + self.offsetX;
                    self.y = self._targetEntity.y + self.offsetY;
                }
                if (self._loop > 0 && self.startTime + self._loop < gameTime.totalGameTime) {
                    self.die();
                }
            }
            else if (self._loop > 0 && self.startTime + GameDefine_1.GameDefine.Effect_Wait_Time < gameTime.totalGameTime) { //不循环的动画超时后销毁
                self.die();
            }
        }
        else if (self.startTime > 0 && gameTime.totalGameTime > self.startTime) {
            self.start();
        }
    };
    NormalEffect.prototype.dispose = function () {
        if (this.id == undefined) {
            return;
        }
        this.id = undefined;
        this.enabled = false;
        this._container = undefined;
        // this.config = undefined;
        if (this.animation) {
            // this.animation.removeFromParent();
            // this.animation.dispose();
            this.animation.destroy(true);
            this.animation = undefined;
        }
        this._x = undefined;
        this._y = undefined;
        this._inView = false;
        this.eid = undefined;
        this._loop = undefined;
        this._rotation = null;
        this._targetEntity = null;
        this.soundid = undefined;
        EffectManager.Instance.returnEffect(this);
    };
    return NormalEffect;
}());
exports.NormalEffect = NormalEffect;
},{"../../../data/GameTime":45,"../../../utils/Utils":58,"../GameDefine":14,"../SceneManager":15,"../util/GameUtils":41}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Entity_1 = require("./Entity");
var Model3D_1 = require("./Model3D");
var SceneManager_1 = require("../SceneManager");
var GameTime_1 = require("../../../data/GameTime");
var EntityFreeFsm_1 = require("../fsm/EntityFreeFsm");
var GameUtils_1 = require("../util/GameUtils");
var AIManager_1 = require("./ai/AIManager");
var EntityManager_1 = require("./EntityManager");
var EntityInfo_1 = require("./EntityInfo");
var SkillBase_1 = require("../skill/SkillBase");
var SkillManager_1 = require("../SkillManager");
var AnimalEntity = /** @class */ (function (_super) {
    __extends(AnimalEntity, _super);
    function AnimalEntity(id, type) {
        var _this = _super.call(this, id, type) || this;
        //  --------attributes-------------------
        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
        _this.a_truehp = 0; //真实在的用于计算的名字先那么叫着后面正常了再该回来
        _this.a_delayhp = 0; //用于技能延迟显示的
        _this.a_maxHp = 0;
        _this.a_isDead = false;
        _this._rotationTime = 0;
        _this.lastAngle = 0;
        _this.dir = 0;
        _this._prepareSkill = new SkillBase_1.SkillResult();
        /**技能释放后的僵直结束时间 */
        //public skillWaitTime:number;
        // public deadWaitTime:number;
        /**移动动作，true用walk，false用run */
        _this._moveAction = false;
        /** 毒标记伤害值*/
        _this.poisonMarkValue = 0;
        /** 毒标记回合数*/
        _this.poisonMarkTimes = 0;
        _this.poisonMarkLastTime = 0;
        /** 躺尸时间*/
        _this.deadTime = 0;
        return _this;
    }
    AnimalEntity.prototype.createComponents = function () {
        this.deadTime = 0;
        _super.prototype.createComponents.call(this);
        if (!this._entityInfo) {
            this._entityInfo = EntityManager_1.EntityManager.Instance.createEntityInfo(this);
            this._entityInfo.setTexts(EntityInfo_1.EntityInfoType.NICKNAME, this.a_name, true);
            if (this.a_nameColor != null) {
                this._entityInfo.setTxtColor(EntityInfo_1.EntityInfoType.NICKNAME, this.a_nameColor);
                // this._entityInfo.setTxtColor(EntityInfoType.UNIONNAME, this.a_nameColor);
            }
        }
    };
    AnimalEntity.prototype.setBlood = function (hp, max, show) {
        if (show === void 0) { show = false; }
        if (this._entityInfo) {
            this._entityInfo.setBlood(hp, max, show && !this.hideHp, false, true);
            // let mapcls: number = DataManager.Instance.mapData.config.cls;
            // if (this.type == EntityType.MONSTER && (this.group == GroupType.GUAJI || DataManager.Instance.mapData.config.cls == constants.E_MAP_TYPE.TASK)) {
            // this._entityInfo.hideText(EntityInfoType.BLOODVALUE);
            // }
            // else if (this.initShowBlood == 1) {
            // 	this.initShowBlood = 0;
            // 	this._entityInfo.hideText(EntityInfoType.BLOODVALUE);
            // }
            // else if (this.group != GroupType.SELF && (mapcls == constants.E_MAP_TYPE.ARENA ||
            // 	mapcls == constants.E_MAP_TYPE.WZZD_PLAYER ||
            // 	mapcls == constants.E_MAP_TYPE.LADDER ||
            // 	mapcls == constants.E_MAP_TYPE.LOOT)) {
            // 	if (hp == max) {
            // 		this._entityInfo.hideText(EntityInfoType.BLOODVALUE);
            // 	}
            // }
        }
    };
    AnimalEntity.prototype.setNameColor = function (color) {
        this.a_nameColor = color;
        if (this._entityInfo) {
            this._entityInfo.setTxtColor(EntityInfo_1.EntityInfoType.NICKNAME, color);
            this._entityInfo.setTxtColor(EntityInfo_1.EntityInfoType.UNIONNAME, color);
        }
    };
    AnimalEntity.prototype.showBloodEffect = function (value, dir, type, plus, index) {
        if (index === void 0) { index = 1; }
        if (this._entityInfo) {
            // if (this.this && this.this.group == GroupType.SELF) {
            this._entityInfo.showBloodEffect(value, dir, type, plus, index);
            // } else {
            // 	this._entityInfo.showBloodEffect(Math.abs(value), dir, type, plus, index);
            // }
        }
    };
    AnimalEntity.prototype.initDisplay = function () {
        this.display = this.model3D = new Model3D_1.Model3D();
        this.model3D.setPlayCompleteHandler(new Laya.Handler(this, this.playCompleteHandler));
        this.model3D.init(this.id);
        SceneManager_1.SceneManager.Instance.scene.addChild(this.model3D);
        this.x = this._x;
        this.y = this._y;
        this.z = this._z;
        this.display.transform.position = this.display.transform.position;
        // SceneManager.Instance.modelAdd(this);
        if (this._entityInfo) {
            this._entityInfo.updatePos(this.display.transform.position);
        }
        // this.animal.setPrority(this.group == GroupType.SELF ? 1 : 0);
        // this.animal.playMaxCount = -1;
        // this.animal.completeHandler = new CallBack0(this.animationComplete, this);
        // this.displayCreated();
        // if (DataManager.Instance.mapData.arpg) {
        // 	if (this.arpgBuffList) {
        // 		ARpgBuffManager.Instance.check(this);
        // 	}
        // } else {
        // 	if (this.buffList) {
        // 		BuffManager.Instance.check(this);//该加滤镜加滤镜，该加特效加特效
        // 	}
        // }
        // if (this._effects) {
        // 	for (let key in this._effects) {
        // 		this.addEffect(this._effects[key]);
        // 	}
        // }
    };
    /**更新武器和衣服 */
    AnimalEntity.prototype.updateEquipments = function (weapon, cloth) {
        this.a_weaponModel = weapon;
        this.a_clothModel = cloth;
        if (this.display) {
            var clothModel = cloth; //(cloth != null && cloth > 0)?this.getEquipModel(cloth):null;
            var weaponModel = weapon; //(weapon != null && weapon > 0)?this.getEquipModel(weapon):null;
            if (this.changeSkins(clothModel, weaponModel)) {
                this.setAction(this.action, this.dir, true);
            }
        }
    };
    /**更新光翼*/
    AnimalEntity.prototype.updateWing = function (wingId) {
        this.a_wingModel = wingId;
        if (wingId != null && wingId > 0) {
            // let wingModel:number = ConfigManager.Instance.wing[wingId].model;
            if (this.changeWing(wingId)) {
                this.setAction(this.action, this.dir, true);
            }
        }
    };
    AnimalEntity.prototype.initWing = function () {
        var wingId = this.a_wingModel;
        var wingModel;
        if (wingId != null && wingId > 0) {
            // wingModel = ConfigManager.Instance.wing[wingId].model;
            // this.changeWing(wingModel);
            // wingModel = ConfigManager.Instance.wing[wingId].model;
            this.changeWing(wingId);
        }
    };
    AnimalEntity.prototype.bianshen = function (model) {
        // if (this.animal) {
        // 	this.bianshenModel = model;
        // 	if (model) {
        // 		this.changeSkins(model, null);
        // 		this.changeWing(null);
        // 		this.setAction(ActionType.Attack, this.dir, true);
        // 	} else {
        // 		if (this.animal) {
        // 			let clothModel: number = this.clothModel;//(cloth != null && cloth > 0)?this.getEquipModel(cloth):null;
        // 			let weaponModel: number = this.weaponModel;//(weapon != null && weapon > 0)?this.getEquipModel(weapon):null;
        // 			let wingId = this.wingModel;
        // 			let changed: boolean = false;
        // 			if (wingId != null && wingId > 0)
        // 				changed = this.changeWing(wingId);
        // 			changed = this.changeSkins(clothModel, weaponModel) || changed;
        // 			if (changed) {
        // 				this.setAction(this.action, this.dir, true);
        // 			}
        // 		}
        // 	}
        // }
    };
    AnimalEntity.prototype.playCompleteHandler = function () {
        if (this.action == 4 /* Attack */ || this.action == 5 /* Attack2 */) {
            this.setAction(1 /* Idle */);
        }
    };
    AnimalEntity.prototype.changeSkins = function (clothModel, weaponModel) {
        var changed = false;
        // Laya.loader.create("res/testLaya2.lh", Laya.Handler.create(this, this.onModelOk), null, Laya.Sprite3D);
        this.model3D.createSkin(clothModel + "");
        if (weaponModel != undefined && weaponModel > 0)
            this.model3D.updateWeapon(weaponModel + "", 0);
        // this.model3D.updateWeapon("20001",E_WEAPON_TYPE.LEFT);
        // this.model3D.updateWeapon("20001",E_WEAPON_TYPE.RIGHT);
        // this.model3D.updateWing("30002");
        // let skinConfig = TestSprite3DData.configs[clothModel];
        // let meshs = skinConfig[0];
        // for (var t = 0, i = meshs.length; i > t; t++) {
        //     let mesh = Laya.Mesh.load(meshs[t]);
        //     let meshSprite3D = new Laya.MeshSprite3D(mesh);
        //     meshSprite3D.name = "sms3d",
        //     this.display.addChild(meshSprite3D),
        //     meshSprite3D.meshRender.sharedMaterial = Laya.StandardMaterial.load(skinConfig.texture);
        // }
        // if (this.animal.getDataSet(AnimationType.Body) == null) {
        // 	if (clothModel) {
        // 		this.animal.addType(AnimationType.Body, clothModel, null, true);
        // 		changed = true;
        // 	}
        // } else if (clothModel != this.animal.getDataSet(AnimationType.Body).model) {
        // 	this.animal.removeType(AnimationType.Body);
        // 	if (clothModel) {
        // 		this.animal.addType(AnimationType.Body, clothModel, null, true);
        // 	}
        // 	changed = true;
        // }
        // if (this.animal.getDataSet(AnimationType.Weapon) == null) {
        // 	if (weaponModel) {
        // 		this.animal.addType(AnimationType.Weapon, weaponModel, null, true);
        // 		changed = true;
        // 	}
        // } else if (weaponModel != this.animal.getDataSet(AnimationType.Weapon).model) {
        // 	this.animal.removeType(AnimationType.Weapon);
        // 	if (weaponModel) {
        // 		this.animal.addType(AnimationType.Weapon, weaponModel, null, true);
        // 	}
        // 	changed = true;
        // }
        return changed;
    };
    AnimalEntity.prototype.changeWing = function (wingModel) {
        if (this.display) {
            // if (this.animal.getDataSet(AnimationType.Wing) == null) {
            // 	if (wingModel) {
            // 		this.animal.addType(AnimationType.Wing, wingModel, null, true);
            // 		return true;
            // 	}
            // } else if (wingModel != this.animal.getDataSet(AnimationType.Wing).model) {
            // 	this.animal.removeType(AnimationType.Wing);
            // 	if (wingModel) {
            // 		this.animal.addType(AnimationType.Wing, wingModel, null, true);
            // 	}
            // 	return true;
            // }
            return true;
        }
    };
    AnimalEntity.prototype.changeDir = function (dir) {
        if (this.dir != dir) {
            this.dir = dir;
            // if (this.animal) {
            // 	this.animal.pause = false;
            // 	this.animal.setAction(this.action, dir);
            // }
        }
    };
    AnimalEntity.prototype.setAction = function (action, direction, compulsory) {
        if (direction === void 0) { direction = -1; }
        if (compulsory === void 0) { compulsory = false; }
        // if (this.this && this.bianshenModel && action != ActionType.Attack) return;
        this.action = action;
        if (direction != -1) {
            this.dir = direction;
        }
        if (this.model3D) {
            switch (action) {
                case 3 /* Run */:
                case 2 /* Walk */:
                    this.model3D.playAni("run", compulsory);
                    break;
                case 4 /* Attack */:
                    this.model3D.playAni("attack", compulsory);
                    break;
                case 5 /* Attack2 */:
                    this.model3D.playAni("skill2", compulsory);
                    break;
                default:
                    this.model3D.playAni("idle", compulsory);
                    break;
            }
        }
        // if (this.animal) {
        // 	this.animal.pause = false;
        // 	this.animal.setAction(action, direction, compulsory);
        // }
    };
    AnimalEntity.prototype.updateTime = function (gameTime) {
        _super.prototype.updateTime.call(this, gameTime);
        if (this.model3D) {
            this.model3D.update();
        }
        // if (this.animal) {
        // 	this.animal.render(gameTime);
        // }
    };
    AnimalEntity.prototype.onEnterIdle = function () {
        this.setAction(1 /* Idle */);
    };
    AnimalEntity.prototype.onMoveComplete = function (thisObj, gameTime) {
        //EntityFreeFsm.Instance.enter(thisObj,0);
        // let pointX:number = Math.ceil(thisObj.this.x / GameDefine.MAP_GRID_WIDTH - 0.5);
        // let pointy:number = Math.ceil(thisObj.this.y / GameDefine.MAP_GRID_HEIGHT - 0.5);
        // thisObj.setPosition(pointX,pointy);
        if (thisObj.isBusy) {
            thisObj.setAction(1 /* Idle */);
            return;
        }
        if (thisObj._entityAI) {
            thisObj._entityAI.moveComplete(thisObj, gameTime);
            return;
        }
        else {
            if (thisObj.pathArr && thisObj.pathArr.length > 0) {
                var toArr = thisObj.pathArr.pop();
                // if (DataManager.Instance.mapData.checkCanWalk(toArr[0], toArr[1])) {
                thisObj.prepareToMove(toArr[0], toArr[1]);
                thisObj.onEnterMove();
                if (thisObj.pathArr.length == 0) {
                    thisObj.pathArr = null;
                }
                return;
                // }
            }
        }
        thisObj.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
        //	thisObj.movewaittime = gameTime+thisObj.moveInterval;
    };
    AnimalEntity.prototype.onExecuteMove = function (gameTime) {
        _super.prototype.onExecuteMove.call(this, gameTime);
        if (this._directionVec) {
            var destQuaternion = new Laya.Quaternion();
            Laya.Quaternion.rotationLookAt(this._directionVec, GameUtils_1.GameUtils.Vector3UpTemp, destQuaternion);
            var sMidQuater = new Laya.Quaternion();
            this._rotationTime += gameTime.elapsedGameTime;
            if (this._rotationTime > 500) {
                this._rotationTime = 500;
            }
            Laya.Quaternion.lerp(this.model3D.transform.rotation, destQuaternion, this._rotationTime / 500, sMidQuater);
            this.model3D.transform.rotation = sMidQuater;
            // console.log(`sMidQuater ${sMidQuater.x} ${sMidQuater.y} ${sMidQuater.z} ${sMidQuater.w} `);
            // console.log(`destQuaternion ${destQuaternion.x} ${destQuaternion.y} ${destQuaternion.z} ${destQuaternion.w} `);
            // this._directionVec = null;
        }
        if (!this._tween || !this._tween.enabled) {
            if (!this.isBusy && !AIManager_1.AIManager.Instance.isAIIntervalLimit(this.uid) && (this.waitForNextMove == undefined || this.waitForNextMove < gameTime.totalGameTime)) {
                this.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
            }
        }
    };
    AnimalEntity.prototype.onEnterFree = function () {
        this.setAction(1 /* Idle */);
        this.freeTime = GameTime_1.GameTime.Instance.totalGameTime + this.idleInterval;
    };
    AnimalEntity.prototype.onEnterMove = function () {
        _super.prototype.onEnterMove.call(this);
        this._rotationTime = 0;
        var angle = GameUtils_1.DirectionUtil.orientation(this.x, -this.z, this.movePostion.x, -this.movePostion.y);
        var changed = angle - this.lastAngle;
        if (changed > 180) {
            angle = this.lastAngle + changed - 360;
        }
        else if (changed < -180) {
            angle = this.lastAngle + changed + 360;
        }
        // console.log("转向：" + angle);
        this._directionVec = GameUtils_1.GameUtils.ConvertDirToVector3(angle); //new Laya.Vector3(0,angle-this.lastAngle,0);
        // this.model3D.transform.rotate(new Laya.Vector3(0,angle-this.lastAngle,0),false,false);
        this.lastAngle = angle;
        var dir = GameUtils_1.DirectionUtil.getForwardByPoints(this.x, this.z, this.movePostion.x, this.movePostion.y);
        if (this._moveAction)
            this.setAction(2 /* Walk */, dir);
        else
            this.setAction(3 /* Run */, dir);
        if (this._entityAI) {
            this._entityAI.moveToServer(this, this.movePostion.cellX, this.movePostion.cellY);
        }
    };
    AnimalEntity.prototype.onEnterForceMove = function () {
        _super.prototype.onEnterForceMove.call(this);
        var dir = GameUtils_1.DirectionUtil.getForwardByPoints(this.x, this.y, this.movePostion.x, this.movePostion.y);
        dir = GameUtils_1.DirectionUtil.addDir(dir, 4); //背对着移动
        this.setAction(1 /* Idle */, dir);
    };
    AnimalEntity.prototype.prepareSkillData = function (skillid, toid, x, y, direction, time, showHurt, hurtlist, bufferlist, busytime) {
        if (hurtlist === void 0) { hurtlist = null; }
        if (bufferlist === void 0) { bufferlist = null; }
        if (busytime === void 0) { busytime = 1000; }
        this._prepareSkill.skillid = skillid;
        this._prepareSkill.toid = toid;
        this._prepareSkill.x = x;
        this._prepareSkill.y = y;
        this._prepareSkill.direction = direction;
        this._prepareSkill.hurtList = hurtlist;
        this._prepareSkill.bufferList = bufferlist;
        this._prepareSkill.time = time;
        this._prepareSkill.showHurt = showHurt;
        this._prepareSkill.busyTime = busytime;
    };
    AnimalEntity.prototype.onReleaseSkill = function () {
        if (this._prepareSkill.skillid) {
            var skillObject = SkillManager_1.SkillManager.Instance.createSkill(this._prepareSkill.skillid);
            skillObject.release(this._prepareSkill.skillid, this, EntityManager_1.EntityManager.Instance.getEntity(this._prepareSkill.toid.toString()), this._prepareSkill.x, this._prepareSkill.y, this._prepareSkill.direction, this._prepareSkill.time, this._prepareSkill.showHurt, this._prepareSkill.hurtList, this._prepareSkill.bufferList);
            this.busy = this._prepareSkill.busyTime;
            this._prepareSkill.skillid = null;
        }
        else {
            this.setAction(1 /* Idle */);
        }
    };
    AnimalEntity.prototype.onPickup = function () {
        // if (this._entityAI) {
        // 	this._entityAI.pickupServer(this, this.this.gridX, this.this.gridY);
        // }
        this.setAction(1 /* Idle */);
    };
    // public addEffect(effect: EntityEffect): void {
    // 	if (!this._effects) {
    // 		this._effects = {};
    // 	}
    // 	this._effects[effect.id] = effect;
    // 	if (this.animal) {
    // 		effect.addToView();
    // 		effect.inView = true;
    // 		// effect.start();
    // 		this.animal.addAnimation(effect.animation, effect.pos);
    // 	}
    // 	effect.parentEntity = this;
    // }
    // public removeEffect(effect: EntityEffect): void {
    // 	if (this._effects && this._effects[effect.id]) {
    // 		if (this.animal && effect.animation) {
    // 			this.animal.removeAnimation(effect.animation);
    // 		}
    // 		delete this._effects[effect.id];
    // 		effect.parentEntity = null;
    // 	}
    // }
    // public addToView(): void {
    // 	super.addToView();
    // 	if (this.animal.shadow) {
    // 		this.animal.shadow.setX(this.x);
    // 		this.animal.shadow.setY(this.y);
    // 	}
    // }
    // public removeFromView(): void {
    // 	if (this.animal) {
    // 		egret.Tween.removeTweens(this.animal);
    // 	}
    // 	super.removeFromView();
    // 	this.animal = null;
    // }
    AnimalEntity.prototype.dieEnd = function (clearDisplay) {
        if (clearDisplay === void 0) { clearDisplay = false; }
        this.deadTime = 0;
        if (clearDisplay) {
            if (this.display) {
                if (this.display.parent) {
                    this.display.parent.removeChild(this.display);
                }
                this.display.destroy(true);
                this.display = null;
                this.model3D = null;
            }
            if (this._entityInfo) {
                this._entityInfo.dispose();
                this._entityInfo = null;
            }
            this.enabled = false;
        }
        this._inView = false;
        // if (this._effects) {
        // 	for (let key in this._effects) {
        // 		this._effects[key].die();
        // 		this._effects[key].parentEntity = null;
        // 	}
        // 	this._effects = undefined;
        // }
    };
    AnimalEntity.prototype.die = function () {
        // if (this.animal) {
        // 	egret.Tween.removeTweens(this.animal);
        // }
        // this.setAction(ActionType.Die);
        // if (EntityManager.Instance.lastSelect == this.uid) {
        // 	EntityManager.Instance.selectEntity();
        // }
        if (this._entityInfo) {
            this._entityInfo.dispose();
            this._entityInfo = null;
        }
    };
    AnimalEntity.prototype.relive = function (isBornPos) {
        if (isBornPos === void 0) { isBornPos = false; }
        this.enabled = true;
        this.a_isDead = false;
        this.createComponents();
        // this._entityInfo.setPositionX(isBornPos ? this.bornX : this.x);
        // this._entityInfo.setPositionY(isBornPos ? this.bornY : this.y);
        this.checkInfoInview();
    };
    AnimalEntity.prototype.removeFromView = function () {
        _super.prototype.removeFromView.call(this);
        this.model3D = null;
    };
    //待完成
    AnimalEntity.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        // if(this._effects){
        // 	for(let key in this._effects){
        // 		this._effects[key].parentEntity = null;
        // 		this._effects[key].die();
        // 	}
        // 	this._effects = undefined;
        // }
        this.display = undefined;
        // this._prepareSkill = undefined;
    };
    return AnimalEntity;
}(Entity_1.Entity));
exports.AnimalEntity = AnimalEntity;
},{"../../../data/GameTime":45,"../SceneManager":15,"../SkillManager":17,"../fsm/EntityFreeFsm":32,"../skill/SkillBase":38,"../util/GameUtils":41,"./Entity":21,"./EntityInfo":22,"./EntityManager":23,"./Model3D":24,"./ai/AIManager":27}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityManager_1 = require("./EntityManager");
var BitmapPool_1 = require("../util/BitmapPool");
var BloodMovie = /** @class */ (function (_super) {
    __extends(BloodMovie, _super);
    function BloodMovie() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.images = [];
        _this._plus = 0;
        return _this;
    }
    BloodMovie.create = function () {
        if (this.movies.length > 0) {
            return this.movies.pop();
        }
        else {
            if (this.UseCount > 30) {
                return null;
            }
            this.UseCount++;
            return new BloodMovie();
        }
    };
    BloodMovie.prototype.returnToPool = function () {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        this.alpha = 1;
        this._plus = 0;
        if (BloodMovie.movies.indexOf(this) >= 0) {
            return;
        }
        BloodMovie.movies.push(this);
    };
    BloodMovie.prototype.show = function (type, plus, num) {
        var fx = 0;
        var thisObj = this;
        thisObj._plus = plus;
        if (plus > 0) {
            var showname = type + "_c";
            var out = false;
            switch (plus) {
                case 4 /* SHEN_LI */:
                    showname = "sl";
                    out = true;
                    break;
                case 5 /* SHEN_TI */:
                    showname = "st";
                    out = true;
                    break;
                case 7 /* MA_BI */:
                    showname = "mb";
                    out = true;
                    break;
                case 6 /* FU_HUO */:
                    var player = EntityManager_1.EntityManager.Instance.firstPlayer;
                    // 	if(player && player.gameObject)
                    // 	{
                    // 		SceneEffectManager.Instance.addEffect(E_Effect_Id.RESURGENCE, null, player.gameObject.gridX * GameDefine.MAP_GRID_WIDTH + GameDefine.MAP_GRID_WIDTH / 2,
                    // player.gameObject.gridY * GameDefine.MAP_GRID_HEIGHT + GameDefine.MAP_GRID_HEIGHT / 2, MapLayerType.Effect_Above, 1, 0);
                    // 	}
                    showname = "fh";
                    out = true;
                    break;
                case 2 /* DETERRENCE */:
                    showname = "ws";
                    break;
                case 1 /* CRITICAL */:
                    showname = type + "_c";
                    break;
                case 3 /* LIANJI */:
                    showname = type + "_name"; //(type==0?"e":"s") + "_hj";
                    break;
                case 8 /* POISON */:
                    showname = "poison";
                    break;
                case 9 /* RECOVERY */:
                    showname = "recovery";
                    break;
                case 10 /* SUCK */:
                    showname = "suck";
                    break;
                case 11 /* REOUND */:
                    showname = "reound";
                    break;
            }
            if (thisObj._img_type) {
                thisObj._img_type.texture = Laya.loader.getRes("bloodfont/" + showname + ".png");
            }
            else {
                thisObj._img_type = BitmapPool_1.default.createBp(Laya.loader.getRes("bloodfont/" + showname + ".png"));
            }
            thisObj._img_type.y = -15;
            thisObj._img_type.x = 0;
            if (plus == 9 /* RECOVERY */ || plus == 10 /* SUCK */) {
                thisObj._img_type.y = -5;
            }
            else if (plus == 11 /* REOUND */) {
                thisObj._img_type.y = 2;
            }
            else if (plus == 3 /* LIANJI */) {
                thisObj._img_type.y = -60;
                thisObj._img_type.x = 55;
                if (type == 20411) {
                    thisObj._img_type.x = 40;
                }
            }
            if (thisObj._img_type.parent == null) {
                thisObj.addChildAt(thisObj._img_type, 0);
            }
            if (out) {
                while (thisObj.images.length > 0) {
                    var temp = thisObj.images.pop();
                    BitmapPool_1.default.pushBp(temp);
                    if (temp.parent) {
                        temp.parent.removeChild(temp);
                    }
                }
                return;
            }
            fx = thisObj._img_type.width;
        }
        else {
            if (thisObj._img_type) {
                BitmapPool_1.default.pushBp(thisObj._img_type);
                if (thisObj._img_type.parent)
                    thisObj._img_type.parent.removeChild(thisObj._img_type);
                thisObj._img_type = null;
            }
        }
        thisObj.images = thisObj.addNumber(type, type == 5 ? "+" + num : num + "", fx, 0, plus);
    };
    BloodMovie.prototype.addNumber = function (type, num, x, y, plus) {
        var len = num.length;
        var w = x;
        //let tx:number = 0;
        var thisObj = this;
        var imgs = thisObj.images;
        while (imgs.length > len) {
            var image = thisObj.images.pop();
            BitmapPool_1.default.pushBp(image);
            image.removeSelf();
        }
        if (num == "0") {
            while (imgs.length > 0) {
                var image = thisObj.images.pop();
                BitmapPool_1.default.pushBp(image);
                image.removeSelf();
            }
            return imgs;
        }
        for (var i = 0; i < len; i++) {
            var str = num.charAt(i);
            var image = void 0;
            if (imgs.length > i && imgs[i] != null) {
                image = imgs[i];
                if (image.parent == null)
                    thisObj.addChild(image);
                image.texture = Laya.loader.getRes("bloodfont/" + type + "_" + str + ".png");
            }
            else {
                image = BitmapPool_1.default.createBp(Laya.loader.getRes("bloodfont/" + type + "_" + str + ".png"));
                thisObj.addChild(image);
                imgs.push(image);
            }
            image.x = w;
            w += image.width - 3; //这个是飘字艰巨缩小点，其他地方又用另外来
        }
        thisObj._w = w;
        return imgs;
    };
    Object.defineProperty(BloodMovie.prototype, "width", {
        get: function () {
            return this._w;
        },
        enumerable: true,
        configurable: true
    });
    BloodMovie.prototype.dispose = function () {
        var thisObj = this;
        if (thisObj.images) {
            for (var _i = 0, _a = thisObj.images; _i < _a.length; _i++) {
                var img = _a[_i];
                if (img.parent) {
                    img.parent.removeChild(img);
                    BitmapPool_1.default.pushBp(img);
                    img.texture = null;
                }
            }
            thisObj.images = null;
        }
        if (thisObj._img_type) {
            thisObj._img_type.parent.removeChild(thisObj._img_type);
            BitmapPool_1.default.pushBp(thisObj._img_type);
            thisObj._img_type.texture = null;
        }
        if (thisObj.parent) {
            thisObj.parent.removeChild(this);
        }
    };
    BloodMovie.movies = [];
    BloodMovie.UseCount = 0;
    return BloodMovie;
}(Laya.Sprite));
exports.BloodMovie = BloodMovie;
},{"../util/BitmapPool":40,"./EntityManager":23}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AIManager_1 = require("./ai/AIManager");
var EntityFreeFsm_1 = require("../fsm/EntityFreeFsm");
var GameTime_1 = require("../../../data/GameTime");
var GameDefine_1 = require("../GameDefine");
var Tween_1 = require("../transform/Tween");
var GameUtils_1 = require("../util/GameUtils");
/**
* name
*/
var Entity = /** @class */ (function () {
    function Entity(id, type) {
        /** 是否可用 */
        this.enabled = true;
        this._busy = 0;
        /**休息间隔 */
        this.idleInterval = 0;
        /**下次苏醒时间 */
        this.freeTime = 0;
        this.a_state = 0;
        // public layer: MapLayerType;
        this.movePostion = new EntityMoveInfo();
        this._coverd = false;
        this._inView = false;
        this._hideDisplay = false;
        this._hideInfo = false;
        this.uid = id.toString();
        this.id = id;
        this.type = type;
    }
    Object.defineProperty(Entity.prototype, "_entityAI", {
        get: function () {
            return this.entityAI;
        },
        set: function (a) {
            this.entityAI = a;
        },
        enumerable: true,
        configurable: true
    });
    // public moveInterval:number = 0;
    /** 角色很忙不能做其他的了*/
    /**走路后摇结束时间 */
    //	public movewaittime:number = 0;
    // protected _effects: { [key: number]: EntityEffect };
    Entity.prototype.createComponents = function () {
        // this.canRelive = false;
        // this.gameObject = gameObject;
        if (!this._tween) {
            this._tween = new Tween_1.Tween(this);
            this._tween.moveComplete = this.onMoveComplete;
        }
    };
    Entity.prototype.checkHide = function () {
    };
    Entity.prototype.setSkin = function (skin) {
    };
    Entity.prototype.stopTween = function () {
        if (this._tween) {
            this._tween.stop();
        }
    };
    Entity.prototype.initDisplay = function () {
    };
    // public addEffect(effect: EntityEffect): void {
    // 	if (!this._effects) {
    // 		this._effects = {};
    // 	}
    // 	this._effects[effect.id] = effect;
    // 	effect.addToView();
    // 	effect.inView = true;
    // 	// effect.start();
    // 	effect.animation.addToParent(this.display);
    // 	effect.parentEntity = this;
    // }
    // public hasEff(id: number): boolean {
    // 	for (let eachkey in this._effects) {
    // 		if (this._effects[eachkey].eid == id) {
    // 			return true;
    // 		}
    // 	}
    // 	return false;
    // }
    // public removeEffect(effect: EntityEffect): void {
    // 	if (this._effects && this._effects[effect.id]) {
    // 		delete this._effects[effect.id];
    // 		effect.parentEntity = null;
    // 	}
    // }
    Entity.prototype.displayCreated = function () {
        if (this._coverd && this.display) {
            // this.display.alpha = 0.6;
        }
    };
    Object.defineProperty(Entity.prototype, "inView", {
        get: function () {
            return this._inView;
        },
        set: function (value) {
            this._inView = value;
            // if(this._effects){
            // 	for(let key in this._effects){
            // 		this._effects[key].inView = value;
            // 	}
            // }
        },
        enumerable: true,
        configurable: true
    });
    Entity.prototype.hideDisplay = function (value) {
        if (this._hideDisplay != value) {
            this._hideDisplay = value;
            this.checkDisplayInview();
        }
    };
    Entity.prototype.getHideDisplay = function () {
        return this._hideDisplay;
    };
    Entity.prototype.hideInfo = function (value) {
        if (this._hideInfo != value) {
            this._hideInfo = value;
            this.checkInfoInview();
        }
    };
    /**
     * 必须要发生变化了才能调用!!!!
     * 检测当前动画是否显示
     **/
    Entity.prototype.checkDisplayInview = function () {
        if (this._inView && !this._hideDisplay) {
            if (this.display == null) {
                this.addToView();
            }
        }
        else {
            if (this.display != null) {
                this.removeFromView();
            }
        }
    };
    /**检测当前entityinfo是否显示 */
    Entity.prototype.checkInfoInview = function () {
        if (this._inView && !this._hideInfo) {
            if (this._entityInfo) {
                this._entityInfo.inView = true;
            }
        }
        else {
            if (this._entityInfo) {
                this._entityInfo.inView = false;
            }
        }
    };
    Object.defineProperty(Entity.prototype, "tween", {
        get: function () {
            return this._tween;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "moveNext", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "endNow", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Entity.prototype.setPosition = function (gridX, gridY) {
        this.gridX = gridX;
        this.gridY = gridY;
        // if (DataManager.Instance.mapData.hitTestCover(gridX, gridY)) {
        // 	if (!this._coverd) {
        // 		this._coverd = true;
        // 		if (this.display) {
        // 			// this.display.alpha = 0.6;
        // 		}
        // 	}
        // } else {
        // 	if (this._coverd) {
        // 		this._coverd = false;
        // 		if (this.display) {
        // 			// this.display.alpha = 1;
        // 		}
        // 	}
        // }
    };
    Entity.prototype.setPixelPosition = function (x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.display.transform.position = this.display.transform.position;
    };
    Entity.prototype.setHorizontalPosition = function (x, z) {
        var pos = this.display.transform.position;
        pos.x = x;
        pos.z = z;
        var heighty = 0; //SceneManager.Instance.terrainSprite.getHeight(-x/40, z/40);
        if (isNaN(heighty)) {
            heighty = 0;
        }
        pos.y = heighty;
        this.display.transform.position = pos;
        if (this._entityInfo) {
            this._entityInfo.updatePos(pos);
        }
    };
    Entity.prototype.updateInfoPos = function () {
        if (this._entityInfo && this.display) {
            this._entityInfo.updatePos(this.display.transform.position);
        }
    };
    Object.defineProperty(Entity.prototype, "x", {
        get: function () {
            if (this.display) {
                return this.display.transform.position.x;
            }
            return this._x;
        },
        set: function (value) {
            if (this.display) {
                this.display.transform.position.x = value;
            }
            else {
                this._x = value;
            }
            if (this._entityInfo) {
                var pos = GameUtils_1.GameUtils.Vector3Temp2;
                pos.x = value;
                pos.y = this._y, pos.z = this._z;
                this._entityInfo.updatePos(pos);
            }
            // if (this._entityInfo)
            // 	this._entityInfo.setPositionX(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "y", {
        get: function () {
            if (this.display) {
                return this.display.transform.position.y;
            }
            return this._y;
        },
        set: function (value) {
            if (this.display) {
                this.display.transform.position.y = value;
            }
            else {
                this._y = value;
            }
            // if(this._entityInfo){
            // 	let pos:Laya.Vector3 = GameUtils.Vector3Temp2;
            // 	pos.y = value;pos.x = this._x;
            // 	this._entityInfo.updatePos(pos);
            // }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "z", {
        get: function () {
            if (this.display) {
                return this.display.transform.position.z;
            }
            return this._z;
        },
        set: function (value) {
            this._z = value;
            if (this.display)
                this.display.transform.position.z = value;
            if (this._entityInfo) {
                var pos = GameUtils_1.GameUtils.Vector3Temp2;
                pos.z = value;
                pos.x = this._x, pos.y = this._y;
                this._entityInfo.updatePos(pos);
            }
        },
        enumerable: true,
        configurable: true
    });
    Entity.prototype.updateTime = function (gameTime) {
        if (this._entityInfo) {
            this._entityInfo.sortShow();
        }
        if (this.curFsm) {
            this.curFsm.execute(this, gameTime);
        }
    };
    Entity.prototype.updateRect = function (rect) {
        var nowInView = rect.contains(this.x, this.y);
        if (nowInView != this._inView) {
            this.inView = nowInView;
            this.checkDisplayInview();
            this.checkInfoInview();
        }
        // if(!nowInView && this._inView){
        // 	this.inView = nowInView;
        // 	this.removeFromView();
        // }else if(nowInView && !this._inView){
        // 	this.inView = nowInView;
        // 	this.addToView();
        // }
    };
    Entity.prototype.resetPosition = function () {
        // if (this._tween && this.gameObject) {
        // 	this.x = this.gameObject.gridX * GameDefine.MAP_GRID_WIDTH + GameDefine.MAP_GRID_WIDTH * 0.5;
        // 	this.y = this.gameObject.gridY * GameDefine.MAP_GRID_HEIGHT + GameDefine.MAP_GRID_HEIGHT * 0.5;
        // 	this.stopTween();
        // }
    };
    Entity.prototype.hitTest = function (mx, my) {
        if (!this._inView)
            return false;
        if (-GameDefine_1.GameDefine.MAP_GRID_WIDTH * 0.5 < mx && -GameDefine_1.GameDefine.MAP_GRID_HEIGHT * 0.5 < my && GameDefine_1.GameDefine.MAP_GRID_WIDTH * 0.5 > mx && GameDefine_1.GameDefine.MAP_GRID_HEIGHT * 0.5 > my) { //选中格子就算中了
            return true;
        }
        if (this.display == null) {
            return false;
        }
        var hited = false; //this.display.hitTest(mx, my);
        return hited;
    };
    Entity.prototype.removeFromView = function () {
        if (this.display.parent) {
            this.display.parent.removeChild(this.display);
        }
        this.display.destroy(true);
        this.display = null;
        // if (this._effects) {
        // 	for (let key in this._effects) {
        // 		this._effects[key].removeFromView();
        // 	}
        // }
    };
    Entity.prototype.addToView = function () {
        this._inView = true;
        // if (this.display == null) {
        this.initDisplay();
        // 	this.display.x = this.x;
        // 	this.display.y = this.y;
        // }
        // this.display.inView = true;
        // GameSceneManager.Instance.getLayer(this.layer).addChild(this.display);
        // GameSceneManager.Instance.getLayer(this.layer).needSort();
        // if (this._effects) {
        // 	for (let key in this._effects) {
        // 		this._effects[key].addToView();
        // 		this._effects[key].inView = true;
        // 	}
        // }
    };
    // public set rotationY(ry:number){
    // 	this._rotationY = ry;
    // 	if(this.display){
    // 		let rot = this.display.transform.rotation;
    // 		Laya.Quaternion.createFromAxisAngle(new Laya.Vector3(0,1,0),ry,rot);
    // 		this.display.transform.rotation = rot;
    // 		if(this._entityInfo){
    // 			this._entityInfo.updatePos(this.display.transform.position);
    // 		}
    // 	}
    // }
    Entity.prototype.changeFSMState = function (fsm, time, compulsory) {
        if (time === void 0) { time = 0; }
        if (compulsory === void 0) { compulsory = true; }
        if (this.curFsm != null && this.curFsm.stateChange(this, fsm)) {
            return;
        }
        if (!compulsory && this.curFsm == fsm) {
            return;
        }
        if (this.curFsm != null) {
            this.curFsm.exit(this);
        }
        this.curFsm = fsm;
        // this.strategyTick = GameTime.Instance.totalGameTime;
        this.curFsm.enter(this, time);
    };
    Object.defineProperty(Entity.prototype, "isBusy", {
        get: function () {
            if (this._busy > GameTime_1.GameTime.Instance.totalGameTime) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "busy", {
        set: function (times) {
            this._busy = Math.max(GameTime_1.GameTime.Instance.totalGameTime + times, this._busy);
        },
        enumerable: true,
        configurable: true
    });
    Entity.prototype.onEnterIdle = function () { };
    Entity.prototype.onEnterFree = function () {
        this.freeTime = GameTime_1.GameTime.Instance.totalGameTime + this.idleInterval;
    };
    Entity.prototype.onEnterMove = function () {
        if (this._tween) {
            this._tween.move([this.movePostion.x, this.movePostion.y]);
            this._tween.setSpeed(this.movePostion.speed);
        }
    };
    Entity.prototype.onEnterForceMove = function () {
        if (this._tween) {
            this._tween.move([this.movePostion.x, this.movePostion.y]);
            this._tween.setSpeed(this.movePostion.speed);
        }
    };
    Entity.prototype.prepareToMove = function (cellX, cellY, speed, server) {
        if (speed === void 0) { speed = 0.5; }
        this.movePostion.x = cellX;
        this.movePostion.y = cellY;
        this.movePostion.cellX = cellX;
        this.movePostion.cellY = cellY;
        this.movePostion.speed = speed;
        if (!server)
            this.setPosition(cellX, cellY);
    };
    Entity.prototype.onExecuteMove = function (gameTime) {
        if (this._tween && this._tween.enabled) {
            this._tween.updateTime(gameTime);
            // GameSceneManager.Instance.getLayer(this.layer).needSort();
        }
    };
    Entity.prototype.onMoveComplete = function (thisObj, gameTime) {
        // if (thisObj.pathArr && thisObj.pathArr.length > 0) {
        // 	let toArr: Array<number> = thisObj.pathArr.pop();
        // 	if (DataManager.Instance.mapData.checkCanWalk(toArr[0], toArr[1])) {
        // 		thisObj.prepareToMove(toArr[0], toArr[1]);
        // 		thisObj.onEnterMove();
        // 		if (thisObj.pathArr.length == 0) {
        // 			thisObj.pathArr = null;
        // 		}
        // 		return;
        // 	}
        // }
        thisObj.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
        //	thisObj.movewaittime = gameTime+thisObj.moveInterval;
    };
    Entity.prototype.dispose = function () {
        // if (this._effects) {
        // 	for (let key in this._effects) {
        // 		this._effects[key].parentEntity = null;
        // 		this._effects[key].die();
        // 	}
        // 	this._effects = undefined;
        // }
        if (this.display) {
            if (this.display.parent) {
                this.display.parent.removeChild(this.display);
            }
            this.display.destroy(true);
            // this.display.dispose();
            this.display = null;
        }
        if (this._entityInfo) {
            this._entityInfo.dispose();
            this._entityInfo = null;
        }
        if (this._entityAI) {
            AIManager_1.AIManager.Instance.removeEntityAI(this.uid);
            this._entityAI = null;
        }
        this.uid = null;
        this.id = null;
        this.enabled = false;
    };
    return Entity;
}());
exports.Entity = Entity;
var EntityMoveInfo = /** @class */ (function () {
    function EntityMoveInfo() {
    }
    return EntityMoveInfo;
}());
exports.EntityMoveInfo = EntityMoveInfo;
},{"../../../data/GameTime":45,"../GameDefine":14,"../fsm/EntityFreeFsm":32,"../transform/Tween":39,"../util/GameUtils":41,"./ai/AIManager":27}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SceneManager_1 = require("../SceneManager");
var CameraManager_1 = require("../CameraManager");
var GameUtils_1 = require("../util/GameUtils");
var BloodMovie_1 = require("./BloodMovie");
var EntityInfoType;
(function (EntityInfoType) {
    EntityInfoType[EntityInfoType["ALL"] = 0] = "ALL";
    EntityInfoType[EntityInfoType["BLOODBAR"] = 1] = "BLOODBAR";
    EntityInfoType[EntityInfoType["BLOODVALUE"] = 2] = "BLOODVALUE";
    EntityInfoType[EntityInfoType["INNERBAR"] = 3] = "INNERBAR";
    EntityInfoType[EntityInfoType["NICKNAME"] = 4] = "NICKNAME";
    EntityInfoType[EntityInfoType["UNIONNAME"] = 5] = "UNIONNAME";
    EntityInfoType[EntityInfoType["NONSENSE"] = 6] = "NONSENSE";
    EntityInfoType[EntityInfoType["JUNXIANNAME"] = 7] = "JUNXIANNAME";
    EntityInfoType[EntityInfoType["TIME"] = 8] = "TIME";
    EntityInfoType[EntityInfoType["TITLE"] = 9] = "TITLE";
})(EntityInfoType = exports.EntityInfoType || (exports.EntityInfoType = {}));
var EntityInfo = /** @class */ (function () {
    function EntityInfo(ae) {
        //public _animationContainer:Laya.Sprite;
        this._texts = {};
        this._needSort = false;
        this._posArr = [];
        this._bloodY = 0; //血条高度
        this._nameY = 137;
        this.iconY = 0;
        this._inView = false;
        this._ae = ae;
        this._cont = EntityInfo.createSp();
        // this._cont.graphics.drawCircle(0,0,10,"#ff0000")
        SceneManager_1.SceneManager.Instance.infoCont.addChild(this._cont);
        //this._animationContainer = new Laya.Sprite();
        //let mapLayer:MapLayer = GameSceneManager.Instance.getLayer(MapLayerType.Info);
        //mapLayer.addChildAt(this._infoContainer,0);//改之后
        // mapLayer.addChild(this._infoContainer);//改之前
        //mapLayer.addChild(this._animationContainer);
    }
    EntityInfo.createSp = function () {
        var obj = this.spPool.length > 0 ? this.spPool.pop() : new Laya.Sprite();
        obj.visible = true;
        return obj;
    };
    EntityInfo.pushSp = function (obj) {
        if (this.spPool.length < 80) {
            this.spPool.push(obj);
        }
    };
    Object.defineProperty(EntityInfo.prototype, "inView", {
        get: function () {
            return this._inView;
        },
        set: function (value) {
            var thisObj = this;
            if (thisObj._inView != value) {
                if (!value && thisObj._cont.parent) {
                    thisObj._cont.parent.removeChild(thisObj._cont);
                }
                else if (value && !thisObj._cont.parent) {
                    SceneManager_1.SceneManager.Instance.infoCont.addChildAt(thisObj._cont, 0);
                }
                thisObj._inView = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityInfo.prototype, "visible", {
        set: function (value) {
            if (this._cont) {
                this._cont.visible = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    EntityInfo.prototype.setNameY = function (value) {
        this._nameY = value;
        this._needSort = true;
    };
    EntityInfo.prototype.setBloodY = function (value) {
        this._bloodY = value;
        this._needSort = true;
    };
    /**
     * 设置血条
     *
     */
    EntityInfo.prototype.setBlood = function (hp, maxHp, show, needTween, hasBloodValue) {
        if (show === void 0) { show = false; }
        if (needTween === void 0) { needTween = false; }
        if (hasBloodValue === void 0) { hasBloodValue = false; }
        var thisObj = this;
        if (thisObj._bloodBar == null) {
            thisObj._bloodBar = new Laya.Image("common/red_blood.png");
            thisObj._bloodBarBg = new Laya.Image("common/empty_blood.png");
            // thisObj._bloodBar.width = 60;
            // thisObj._bloodBarBg.width = 60;
            if (thisObj._bloodBar) {
                thisObj._bloodBarBg.x = -thisObj._bloodBarBg.width >> 1;
                thisObj._bloodBar.x = -thisObj._bloodBar.width >> 1;
                thisObj._bloodBar.y = thisObj._bloodBarBg.y = -thisObj._bloodY;
            }
            // thisObj.addText(EntityInfoType.BLOODVALUE,0xffffff);
            thisObj.setPosition(EntityInfoType.BLOODBAR);
            thisObj.setPosition(EntityInfoType.BLOODVALUE);
        }
        // if(_bloodTween)
        // 	_bloodTween.kill();
        // if(needTween)
        // 	_bloodTween = TweenLite.to(thisObj._bloodBar,0.6,{scaleX:Math.min(hp / maxHp, 1)});
        // else
        var lastScale = thisObj._bloodBar.scaleX;
        thisObj._bloodBar.scaleX = Math.min(hp / maxHp, 1);
        //thisObj._bloodBar.scaleX = ;
        if (hasBloodValue || thisObj.getText(EntityInfoType.BLOODVALUE)) {
            thisObj.setTexts(EntityInfoType.BLOODVALUE, hp + "/" + maxHp);
        }
        if (show) {
            thisObj._cont.addChildAt(thisObj._bloodBarBg, 0);
            thisObj._cont.addChild(thisObj._bloodBar);
            thisObj.showText(EntityInfoType.BLOODVALUE);
        }
    };
    /** 显示一个文本提示项 */
    EntityInfo.prototype.showText = function (key) {
        var thisObj = this;
        if (thisObj._texts[key] && thisObj._cont.contains(thisObj._texts[key]) == false) {
            thisObj._cont.addChild(thisObj._texts[key]);
            thisObj._needSort = true;
        }
    };
    /** 隐藏一个文本提示项 */
    EntityInfo.prototype.hideText = function (key) {
        var thisObj = this;
        if (thisObj._texts[key] && thisObj._cont.contains(thisObj._texts[key])) {
            thisObj._cont.removeChild(thisObj._texts[key]);
            thisObj._needSort = true;
        }
    };
    EntityInfo.prototype.hideBlood = function () {
        var thisObj = this;
        if (thisObj._cont.contains(thisObj._bloodBarBg)) {
            thisObj._cont.removeChild(thisObj._bloodBarBg);
        }
        if (thisObj._cont.contains(thisObj._bloodBar)) {
            thisObj._cont.removeChild(thisObj._bloodBar);
        }
        thisObj.hideText(EntityInfoType.BLOODVALUE);
        thisObj._needSort = true;
    };
    EntityInfo.prototype.setTexts = function (key, value, show) {
        if (show === void 0) { show = false; }
        // value = "名字有九个字那么长";
        var thisObj = this;
        var t = thisObj.getText(key);
        if (t == null) {
            t = thisObj.addText(key);
        }
        thisObj.setText(key, value, t);
        if (show) {
            thisObj.showText(key);
            thisObj.setPosition(key);
        }
    };
    /** 获取一个文本提示项 */
    EntityInfo.prototype.getText = function (key) {
        return this._texts[key];
    };
    /**
     * 所有文本和图标高度
     * @param key 不重载当前关键字的文本组件位置
     */
    EntityInfo.prototype.setPosition = function (key) {
        if (key === void 0) { key = 0; }
        this.locateX(key);
        this.locateY(key);
    };
    /** 添加一个文本提示项 */
    EntityInfo.prototype.addText = function (key, color) {
        if (color === void 0) { color = "#FFFFFF"; }
        var thisObj = this;
        var t = new Laya.Label();
        t.fontSize = 20;
        // t.borderColor = "#000000";
        t.bold = true;
        if (thisObj._colorSet) {
            if (thisObj._colorSet[key] != null) {
                color = thisObj._colorSet[key];
            }
        }
        // if (t.textColor != color)
        t.color = color;
        t.width = 180;
        t.align = "center";
        thisObj._texts[key] = t;
        thisObj._needSort = true;
        return t;
    };
    /** 设置文本宽 */
    EntityInfo.prototype.setText = function (key, text, tf) {
        if (tf === void 0) { tf = null; }
        if (tf == null) {
            tf = this.getText(key);
        }
        tf.text = text == null ? "" : text;
        if (key == EntityInfoType.NICKNAME || key == EntityInfoType.UNIONNAME || key == EntityInfoType.JUNXIANNAME || key == EntityInfoType.BLOODVALUE) {
            tf.width = 140;
            tf.x = -70; //-tf.width >> 1;
        }
    };
    EntityInfo.prototype.locateX = function (key) {
        if (key === void 0) { key = 0; }
        var _icon;
        var t;
        var _x;
        var thisObj = this;
        if (key == EntityInfoType.ALL) {
            for (var k in thisObj._texts) {
                t = thisObj._texts[k];
                switch (Number(k)) {
                    case EntityInfoType.NICKNAME:
                        {
                            t.x = Math.round(-t.width * 0.5);
                            break;
                        }
                    case EntityInfoType.UNIONNAME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.BLOODVALUE:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.TIME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.JUNXIANNAME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    default:
                        {
                            break;
                        }
                }
            }
        }
        else {
            t = thisObj._texts[key];
            if (t)
                switch (key) {
                    case EntityInfoType.NICKNAME:
                        {
                            t.x = Math.round(-t.width * 0.5);
                            break;
                        }
                    case EntityInfoType.UNIONNAME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.BLOODVALUE:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.TIME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    case EntityInfoType.JUNXIANNAME:
                        t.x = Math.round(-t.width * 0.5);
                        break;
                    default:
                        {
                            break;
                        }
                }
        }
    };
    EntityInfo.prototype.locateY = function (key) {
        if (key === void 0) { key = 0; }
        var t;
        //var offsetY:int = -_animal.offsetY;
        var offsetY = 0;
        var thisObj = this;
        if (key == EntityInfoType.ALL) {
            for (var k in thisObj._texts) {
                t = thisObj._texts[k];
                switch (Number(k)) {
                    case EntityInfoType.NICKNAME:
                        {
                            t.y = offsetY - thisObj._posArr[1];
                            break;
                        }
                    case EntityInfoType.UNIONNAME:
                        t.y = offsetY - thisObj._posArr[3];
                        break;
                    case EntityInfoType.JUNXIANNAME:
                        t.y = offsetY - thisObj._posArr[2];
                        break;
                    case EntityInfoType.BLOODVALUE:
                        t.y = offsetY - thisObj._posArr[0];
                        break;
                    case EntityInfoType.TIME:
                        t.y = offsetY;
                        break;
                    default:
                        {
                            break;
                        }
                }
            }
        }
        else {
            t = thisObj._texts[key];
            if (t)
                switch (key) {
                    case EntityInfoType.NICKNAME:
                        {
                            t.y = offsetY - thisObj._posArr[1];
                            break;
                        }
                    case EntityInfoType.UNIONNAME:
                        t.y = offsetY - thisObj._posArr[3];
                        break;
                    case EntityInfoType.JUNXIANNAME:
                        t.y = offsetY - thisObj._posArr[2];
                        break;
                    case EntityInfoType.TIME:
                        t.y = offsetY;
                    case EntityInfoType.BLOODVALUE:
                        t.y = offsetY - thisObj._posArr[0];
                        break;
                    default:
                        {
                            break;
                        }
                }
        }
    };
    EntityInfo.prototype.sortShow = function () {
        var t = this;
        if (t._needSort) {
            var index = 0;
            var count = 0;
            var rule = EntityInfo.SORTRULE;
            var maxY = 0;
            for (var i in rule) {
                var o = rule[i];
                var txt = t.getText(o);
                if (txt && txt.visible && txt.parent) {
                    t._posArr[index] = maxY = count * 28 + t._bloodY + 30; //t._nameY;
                    count++;
                }
                else {
                    t._posArr[index] = 0;
                }
                index++;
            }
            t.iconY = maxY;
            t.locateY();
            t._needSort = false;
        }
    };
    EntityInfo.prototype.updatePos = function (pos) {
        var tempVec3 = GameUtils_1.GameUtils.Vector3Temp;
        var temp2Vec3 = GameUtils_1.GameUtils.Vector3Temp3;
        var camera = CameraManager_1.CameraManager.Instance.mainCamera;
        temp2Vec3.x = pos.x;
        temp2Vec3.y = pos.y + 2;
        temp2Vec3.z = pos.z;
        camera.viewport.project(temp2Vec3, camera.projectionViewMatrix, tempVec3);
        this.setPositionX(tempVec3.x / Laya.stage.clientScaleX);
        this.setPositionY(tempVec3.y / Laya.stage.clientScaleY);
    };
    EntityInfo.prototype.setPositionX = function (value) {
        this._cont.x = value;
    };
    EntityInfo.prototype.setPositionY = function (value) {
        this._cont.y = value;
    };
    EntityInfo.prototype.dispose = function () {
        var t = this;
        t._colorSet = null;
        if (t._cont) {
            var container = t._cont;
            while (container.numChildren > 0) {
                container.removeChildAt(0);
            }
            if (container.parent)
                container.parent.removeChild(container);
            EntityInfo.pushSp(container);
            t._cont = null;
        }
        if (t._bloodBar) {
            t._bloodBar.texture = null;
            t._bloodBar = null;
        }
        if (t._bloodBarBg) {
            t._bloodBarBg.texture = null;
            t._bloodBarBg = null;
        }
        t._ae = null;
        t._posArr = null;
        if (t._texts) {
            t._texts = null;
        }
    };
    // public bloodEffect:Array<Laya.BitmapText> = new Array();
    EntityInfo.prototype.showBloodEffect = function (value, dir, type, plus, index) {
        if (!this._inView) //理论上说只有自己和被打会显示伤害票字，怪物死的那一下不票字了加上这个
            return;
        var bt = BloodMovie_1.BloodMovie.create();
        if (bt == null) {
            return;
        }
        bt.show(type, plus, value);
        bt.x = this._cont.x - bt.width / 2;
        bt.y = this._cont.y - 80 - 20;
        if (plus > 0) {
            bt.x += 30;
            bt.y += 30;
        }
        var hasPunch = false;
        var mapLayer = SceneManager_1.SceneManager.Instance.infoCont;
        if (mapLayer.numChildren > 0) {
            var temp = mapLayer.getChildAt(mapLayer.numChildren - 1);
        }
        if (hasPunch) {
            mapLayer.addChildAt(bt, mapLayer.numChildren - 1);
        }
        else {
            mapLayer.addChild(bt);
        }
        Laya.Tween.clearTween(bt);
        // Laya.Tween.removeTweens(bt);
        // let tween: Laya.Tween = Laya.Tween.get(bt);
        var tx, ty, endX, endY;
        if (dir == 0) { //中
            tx = bt.x;
            endX = tx;
        }
        else if (dir == 1) { //左
            tx = bt.x - 40 - Math.round(Math.random() * 40);
            endX = tx - 30;
        }
        else if (dir == 2) { //右
            tx = bt.x + 40 + Math.round(Math.random() * 40);
            endX = tx + 30;
        }
        ty = bt.y - 20 - Math.round(Math.random() * 30);
        endY = ty - 50;
        // if (plus == constants.E_HURT_PLUS.LIANJI) {//连击现在用id了
        // 	bt.x = index * 10 - SceneManager.Instance.scrollX + (mStage.stageWidth - 640) / 2;
        // 	bt.alpha = 0;
        // 	if(value == 0)
        // 	{
        // 		bt.x += 130;
        // 	}
        // 	let showy: number = 350 - 80 * index - SceneManager.Instance.scrollY;
        // 	Laya.Tween.to(bt,{ alpha: 1, y: showy }, 100, Laya.Ease.sineIn)
        // 		.to(bt,{}, 400, Laya.Ease.sineIn)
        // 		.to(bt,{ x: bt.x + 100, y: showy - 100, alpha: 0 }, 600, Laya.Ease.sineIn,Laya.Handler.create(this,function () { bt.returnToPool(); }))
        // }
        // else {
        Laya.Tween.to(bt, { x: tx, y: ty, scaleX: 1.5, scaleY: 1.5 }, 100, Laya.Ease.sineIn)
            .to(bt, { scaleX: 1, scaleY: 1 }, 100, Laya.Ease.sineIn)
            .to(bt, {}, 300, Laya.Ease.sineIn).to(bt, { x: endX, y: endY, alpha: 0 }, 600, Laya.Ease.sineIn, Laya.Handler.create(this, function () { bt.returnToPool(); }));
        // }
    };
    EntityInfo.prototype.setTxtColor = function (key, color) {
        var t = this.getText(key);
        if (!this._colorSet) {
            this._colorSet = {};
        }
        this._colorSet[key] = color;
        if (t == null) {
            return;
        }
        t.color = color;
    };
    EntityInfo.spPool = [];
    EntityInfo.SORTRULE = [EntityInfoType.BLOODVALUE, EntityInfoType.NICKNAME, EntityInfoType.JUNXIANNAME, EntityInfoType.UNIONNAME];
    return EntityInfo;
}());
exports.EntityInfo = EntityInfo;
},{"../CameraManager":13,"../SceneManager":15,"../util/GameUtils":41,"./BloodMovie":20}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Player_1 = require("./Player");
var GameUtils_1 = require("../util/GameUtils");
var EntityInfo_1 = require("./EntityInfo");
/**
* name
*/
var EntityManager = /** @class */ (function () {
    function EntityManager() {
        this._entityDic = {};
        this._enemyDic = {};
        this._readyToDispose = [];
        this._playerDic = {};
        this._resized = false;
    }
    Object.defineProperty(EntityManager, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new EntityManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    EntityManager.prototype.getEntity = function (id) {
        return this._entityDic[id];
    };
    EntityManager.prototype.getAllEntity = function () {
        return this._entityDic;
    };
    EntityManager.prototype.getAllEnemy = function () {
        return this._enemyDic;
    };
    EntityManager.prototype.createPlayer = function () {
        var player = this.createEntity(6 /* PLAYER */, GameUtils_1.IDProvider.getEntityInsID());
        this._playerDic[player.uid] = player;
        return player;
    };
    EntityManager.prototype.createEnemy = function (id) {
        var player = this.createEntity(4 /* MONSTER */, id);
        return player;
    };
    EntityManager.prototype.createComponent = function (entity) {
        entity.createComponents();
    };
    EntityManager.prototype.createEntity = function (type, id) {
        var entity;
        switch (type) {
            case 6 /* PLAYER */:
                entity = new Player_1.Player(id, type);
                // entity.createComponents();
                // entity.checkHide();
                this._playerDic[id.toString()] = entity;
                break;
            case 4 /* MONSTER */:
                entity = new Player_1.Player(id, type);
                // entity.createComponents();
                // entity.checkHide();
                // this._playerDic[id.toString()] = entity as Player;
                this._enemyDic[id.toString()] = entity;
                break;
        }
        if (entity) {
            this._entityDic[id.toString()] = entity;
        }
        return entity;
    };
    EntityManager.prototype.createEntityInfo = function (entity) {
        var entityInfo;
        switch (entity.type) {
            default:
                entityInfo = new EntityInfo_1.EntityInfo(entity);
                break;
        }
        return entityInfo;
    };
    EntityManager.prototype.resize = function () {
        this._resized = true;
    };
    EntityManager.prototype.update = function (gameTime) {
        this.updateDead(gameTime);
        var entity;
        for (var key in this._entityDic) {
            entity = this._entityDic[key];
            entity.updateTime(gameTime);
            if (this._resized) {
                entity.updateInfoPos();
            }
        }
        this._resized = false;
    };
    EntityManager.prototype.updateDead = function (gameTime) {
        for (var _i = 0, _a = this._readyToDispose; _i < _a.length; _i++) {
            var deadentity = _a[_i];
            if (deadentity) {
                this.destoryEntity(deadentity.uid);
            }
        }
        this._readyToDispose.length = 0;
    };
    EntityManager.prototype.destoryAllEntity = function () {
        for (var key in this._entityDic) {
            this.destoryEntity(key);
        }
    };
    /**
     * 考虑换成对象池
     */
    EntityManager.prototype.destoryEntity = function (id) {
        var entity = this._entityDic[id];
        if (entity) {
            switch (entity.type) {
                case 6 /* PLAYER */:
                    if (this.firstPlayer && this.firstPlayer.uid == id) {
                        this.firstPlayer = null;
                    }
                    delete this._playerDic[id];
                    break;
                case 4 /* MONSTER */:
                    delete this._playerDic[id];
                    delete this._enemyDic[id];
                    break;
                case 5 /* NPC */:
                    break;
                case 7 /* MINION */:
                    break;
                case 8 /* HERO */:
                    break;
                // case EntityType.HOME:
                // case EntityType.TRANSFER:
                case 3 /* DROP */:
                    break;
            }
            entity.dispose();
            delete this._entityDic[id];
            return true;
        }
        return false;
    };
    return EntityManager;
}());
exports.EntityManager = EntityManager;
},{"../util/GameUtils":41,"./EntityInfo":22,"./Player":25}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SceneManager_1 = require("../SceneManager");
var ResDisposer_1 = require("../util/ResDisposer");
var ConfigManager_1 = require("../../../config/ConfigManager");
/**
* name
*/
var Model3D = /** @class */ (function (_super) {
    __extends(Model3D, _super);
    function Model3D() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._weaponModels = [];
        _this._weaponConfigs = [];
        _this._weaponMeshs = [];
        _this._selected = false;
        _this._disposed = false;
        return _this;
    }
    Model3D.prototype.init = function (id) {
        this._aeId = id;
    };
    // _attachPoint:Laya.AttachPoint;
    Model3D.prototype.createSkin = function (id) {
        if (!this.meshSprite3D) {
            ResDisposer_1.ResDisposer.Instance.addRefByObjId(id);
            this._skinConfig = ConfigManager_1.ConfigManager.Instance.obj["model_" + id];
            this._skinModel = id;
            var sp = Laya.loader.getRes(this._skinConfig.url);
            if (sp) {
                this.createMesh(id);
            }
            else {
                Laya.Sprite3D.load(this._skinConfig.url, Laya.Handler.create(this, this.createMesh, [id]));
            }
        }
    };
    Model3D.prototype.setSelected = function (value, compulsory) {
        if (compulsory === void 0) { compulsory = false; }
        if (this._selected != value || compulsory) {
            this._selected = value;
            if (this.meshSprite3D) {
                for (var _i = 0, _a = this.meshSprite3D._children; _i < _a.length; _i++) {
                    var ms = _a[_i];
                    var mat = ms.skinnedMeshRenderer.sharedMaterial;
                    if (value) {
                        mat.marginalColor = new Laya.Vector3(0.0, 0.3, 1.0);
                    }
                    else {
                        mat.marginalColor = null;
                    }
                }
            }
        }
    };
    Model3D.prototype.createMesh = function (id) {
        if (this._skinModel == id) {
            var sp = Laya.loader.getRes(this._skinConfig.url);
            this.meshSprite3D = Laya.Sprite3D.instantiate(sp.getChildAt(0));
            this.addChild(this.meshSprite3D);
            // this.meshSprite3D.name = 
            // this.meshSprite3D.transform.scale = new Laya.Vector3(10,10,10);
            for (var _i = 0, _a = this.meshSprite3D._children; _i < _a.length; _i++) {
                var ms = _a[_i];
                // ms.skinnedMeshRenderer.castShadow = true;
                //添加碰撞器组件并获取
                // var meshCollider:Laya.PhysicsCollider = ms.addComponent(Laya.PhysicsCollider)as Laya.PhysicsCollider;
                var mat = ms.skinnedMeshRenderer.sharedMaterial;
                ms.skinnedMeshRenderer.sharedMaterial = mat.clone();
                // mat.marginalColor = new Laya.Vector3(0.0, 0.3, 1.0);
                // var boxShape:Laya.MeshColliderShape = new Laya.MeshColliderShape();
                // //获取模型的Mesh网格
                // boxShape.mesh = ms.meshFilter.sharedMesh as Laya.Mesh;
                //把Mesh网格添加到碰撞器
                // meshCollider.colliderShape = boxShape;
                // var capsuleShape:Laya.CapsuleColliderShape = new Laya.CapsuleColliderShape(0.5,2);
                // capsuleShape.localOffset = new Laya.Vector3(0,0.6,0);
                // meshCollider.colliderShape = capsuleShape;
            }
            if (this._selected)
                this.setSelected(this._selected, true);
            // this.meshSprite3D.name = "model";
            // this.animator = this.meshSprite3D.getComponentByType(Laya.Animator) as Laya.Animator;
            this.animator = this.meshSprite3D.getComponent(Laya.Animator);
            this.animator.play("idle");
            // this.animator.on(Laya.Event.STOPPED, this, this.playCompleteHandler);
            if (this._weaponSprite && this._weaponSprite.loaded) {
                this.animator.linkSprite3DToAvatarNode(this._skinConfig.hand, this._weaponSprite);
            }
            //FXDummy_MainWeapon
        }
        else {
            ResDisposer_1.ResDisposer.Instance.checkRef(id);
        }
    };
    Model3D.prototype.weaponloaded = function () {
        this._weaponSprite = Laya.Sprite3D.instantiate(this._weaponSprite.getChildAt(0));
        // this._weaponSprite.meshRender.castShadow = true;
        SceneManager_1.SceneManager.Instance.scene.addChild(this._weaponSprite);
        //从场景中获取动画模型
        //获取动画模型中动画组件
        if (this.animator)
            this.animator.linkSprite3DToAvatarNode(this._skinConfig.hand, this._weaponSprite);
    };
    Model3D.prototype.updateSkin = function (model) {
        if (this._skinModel != model) {
            this._skinModel = model;
            this.removeSkin();
            if (model) {
                this.createSkin(model);
            }
        }
    };
    Model3D.prototype.removeSkin = function () {
        if (this.meshSprite3D) {
            for (var _i = 0, _a = this.meshSprite3D._children; _i < _a.length; _i++) {
                var ms = _a[_i];
                // ms.skinnedMeshRenderer.castShadow = true;
                //添加碰撞器组件并获取
                // var meshCollider:Laya.PhysicsCollider = ms.addComponent(Laya.PhysicsCollider)as Laya.PhysicsCollider;
                var mat = ms.skinnedMeshRenderer.sharedMaterial;
                mat.destroy();
            }
            this.meshSprite3D.destroy(true);
            this.meshSprite3D = null;
            ResDisposer_1.ResDisposer.Instance.removeRefByObjId(this._skinModel);
        }
    };
    Model3D.prototype.updateWeapon = function (weaponModel, type) {
        // if(this._weaponModels[type] != weaponModel){
        // 	this._weaponModels[type] = weaponModel;
        // 	this.removeWeapon(type);
        // 	if(weaponModel){
        // 		// if(this._skinConfig[E_Model_Config.HANDS] && this._skinConfig[E_Model_Config.HANDS][type]){
        // 		this._weaponConfigs[type] = Resource3DConfig.WeaponConfig[weaponModel];
        // 		if(this._weaponConfigs[type]){
        // 			this.createWeaponMesh(type);
        // 		}
        // 		// }
        // 	}
        // }
    };
    Model3D.prototype.createWeaponMesh = function (type) {
        // var wConfig = this._weaponConfigs[type];
        // this._weaponSprite = Laya.Sprite3D.load(wConfig.url);
        // if(this._weaponSprite.loaded){
        // 	this.weaponloaded();
        // }else
        // 	this._weaponSprite.once(Laya.Event.HIERARCHY_LOADED,this,this.weaponloaded);
    };
    Model3D.prototype.removeWeapon = function (type) {
        // var wConfig = this._weaponConfigs[type];
        // var o = this._weaponMeshs[type];
        // if(o){
        // 	o.destroy();
        // 	CacheManager.Instance.removeReferenceByConfig(wConfig);
        // 	this._weaponMeshs[type] = null;
        // }
        // this._weaponConfigs[type] = null;
        // this._weaponMeshs[type] = null;
        // delete this._weaponConfigs[type];
        // delete this._weaponMeshs[type];
    };
    Model3D.prototype.playAni = function (action, compulsory) {
        if (compulsory === void 0) { compulsory = false; }
        if (compulsory || this._curAction != action) {
            this._curAction = action;
            if (!this.animator)
                return;
            // let ani = this._animationFrames[action];
            switch (action) {
                case "idle":
                    this.animator.play("idle");
                    // this.playAniByUrl(ani[0],ani[1],null,Number.MAX_VALUE);
                    break;
                case "run":
                case "die":
                case "dieEnd":
                    this.animator.play("run");
                    break;
                case "attack":
                    this.animator.play("attack", 0, 0);
                    break;
                case "skill2":
                    this.animator.play("attack");
                    break;
                default:
                    // this.playAniByUrl(ani[0],ani[1],this.onSkinAniChange,0);
                    break;
            }
        }
    };
    Model3D.prototype.playCompleteHandler = function (e) {
        if (this._curAction == "skill1" || this._curAction == "skill2") {
            this.playAni("idle", true);
        }
    };
    // public playAniByUrl(from, to,changeHandler,count:number = 0) {
    //     for (var t = 0, i = this._animations.length; i > t; t++) {
    // 		if(this._eventAnimation){
    // 			this._eventAnimation.player.off(Laya.Event.STOPPED, this, this.onSkinAniChange);
    // 		}
    //         var animationComp = this._animations[t];
    //         animationComp.player.playByFrame(0, 1, count, from, to);
    //         if(t == i - 1 && changeHandler){
    // 			this._eventAnimation = animationComp;
    //         	animationComp.player.once(Laya.Event.STOPPED, this, changeHandler);
    // 		} else{
    // 			this._eventAnimation = null;
    //         	if("die" == this._curAction || "dieEnd" == this._curAction) {
    // 				animationComp.player.returnToZeroStopped = false;
    // 			}
    // 		}
    //     }
    //     // this.skinWeaponAni && (GameUtils.set3DAniUrl(this.skinWeaponAni, this.weaponInfo.ani),
    //     // this.skinWeaponAni.player.playByFrame(0, l, e, _, o),
    //     // "die" == this._curAction && (this.skinWeaponAni.player.returnToZeroStopped = !1)),
    //     // this.skinWingAni && (GameUtils.set3DAniUrl(this.skinWingAni, this.wingInfo.ani),
    //     // this.skinWingAni.player.playByFrame(0, l, e, _, o),
    //     // "die" == this._curAction && (this.skinWingAni.player.returnToZeroStopped = !1))
    // }
    Model3D.prototype.update = function () {
        if (this.animator && this.animator.getCurrentAnimatorPlayState(0)._finish) {
            // this.stop();
            if (this._playCompleteHandler) {
                this._playCompleteHandler.run();
            }
        }
    };
    Model3D.prototype.onSkinAniChange = function () {
        if (this._curAction == "die") {
        }
        else {
            this.stop();
        }
    };
    Model3D.prototype.setPlayCompleteHandler = function (handler) {
        this._playCompleteHandler = handler;
    };
    Model3D.prototype.stop = function () {
        // this.sprite && (this._eventAnimation && this._eventAnimation.player.off(Laya.Event.STOPPED, this, this.onSkinAniChange),
        // this.bufMgr.GetIsInStatue(RoleBufType.SKILL_SPECIAL) || this._special_move || this.runAni("idle"),
        // this._special_move = !1)
        // if(this._eventAnimation){
        // 	this._eventAnimation.player.off(Laya.Event.STOPPED, this, this.onSkinAniChange);
        // }
        // this.playAni("idle");
    };
    Model3D.prototype.destroy = function (desChild) {
        if (desChild === void 0) { desChild = true; }
        if (!this._disposed) {
            this.removeSkin();
            this.animator = null;
            this._playCompleteHandler = null;
            this._disposed = true;
            this._skinConfig = null;
            this._skinModel = null;
            _super.prototype.destroy.call(this, desChild);
        }
    };
    return Model3D;
}(Laya.Sprite3D));
exports.Model3D = Model3D;
},{"../../../config/ConfigManager":43,"../SceneManager":15,"../util/ResDisposer":42}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AnimalEntity_1 = require("./AnimalEntity");
var Player = /** @class */ (function (_super) {
    __extends(Player, _super);
    function Player(id, type) {
        return _super.call(this, id, type) || this;
    }
    //  --------attributes-------------------
    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
    Player.prototype.createComponents = function () {
        _super.prototype.createComponents.call(this);
    };
    Player.prototype.checkHide = function () {
        // if (DataManager.Instance.instanceData.isShield && this.gameObject.group != GroupType.SELF) {
        // 	this._hideDisplay = true;
        // } else {
        // 	this._hideDisplay = false;
        // }
    };
    Player.prototype.setPosition = function (gridX, gridY) {
        // if (this.gridX && this.gridX) {
        // 	DataManager.Instance.mapData.changeUnWalk(this.gridX, this.gridY, gridX, gridY);
        // }
        // else {
        // 	if (!this._seat) {
        // 		DataManager.Instance.mapData.addUnWalk(gridX, gridY);
        // 		this._seat = true;
        // 	}
        // }
        _super.prototype.setPosition.call(this, gridX, gridY);
    };
    Player.prototype.initDisplay = function () {
        _super.prototype.initDisplay.call(this);
        this.initEquipments();
        this.initWing();
        // this.animal.setAction(this.action, this.dir, true);
        this.setBlood(this.a_truehp, this.a_maxHp, true);
        // if (this._entityInfo) {
        // 	if (DataManager.Instance.mapData.config.cls == constants.E_MAP_TYPE.BOSS_MJ
        // 		|| DataManager.Instance.mapData.config.cls == constants.E_MAP_TYPE.BOSS_YW
        // 		|| DataManager.Instance.mapData.config.cls == constants.E_MAP_TYPE.BOSS_LH) {
        // 		this._entityInfo.hideText(EntityInfoType.BLOODVALUE);
        // 	}
        // 	this._entityInfo.setTitle(playerObject.titleId, true);
        // }
    };
    Player.prototype.initWing = function () {
        var wingId = this.a_wingModel;
        var wingModel;
        // if(DataManager.Instance.fameData.wingId){
        // 	let titleConfig= ConfigManager.Instance.title[DataManager.Instance.fameData.wingId];
        // 	wingModel = Number(titleConfig.model);
        // }else 
        if (wingId != null && wingId > 0) {
            // wingModel = ConfigManager.Instance.wing[wingId].model;
            wingModel = wingId;
        }
        else {
            wingModel = 0;
        }
        // if (this.animal.getDataSet(AnimationType.Wing) == null) {
        // 	if (wingModel) {
        // 		this.animal.addType(AnimationType.Wing, wingModel, null, true);
        // 	}
        // } else if (wingModel != this.animal.getDataSet(AnimationType.Wing).model) {
        // 	this.animal.removeType(AnimationType.Wing);
        // 	if (wingModel) {
        // 		this.animal.addType(AnimationType.Wing, wingModel, null, true);
        // 	}
        // }
    };
    Player.prototype.initEquipments = function () {
        var cloth = this.a_clothModel;
        var weapon = this.a_weaponModel;
        var clothModel;
        var weaponModel;
        if (cloth != null && cloth > 0) {
            clothModel = cloth;
            // clothModel = this.getEquipModel(cloth);
        }
        else {
            if (this.a_sex == 2) {
                clothModel = 9002 /* Female_Body */;
            }
            else {
                clothModel = 9001 /* Male_Body */;
            }
        }
        if (weapon != null && weapon > 0) {
            weaponModel = weapon;
            // weaponModel = this.getEquipModel(weapon);
        }
        else {
            // if(this.sex == 2){
            // 	weaponModel = constants.E_MODEL_Id.Female_Hand;
            // }else{
            // 	weaponModel = constants.E_MODEL_Id.Male_Hand;
            // }
        }
        this.changeSkins(clothModel, weaponModel);
    };
    /**更新武器和衣服 */
    Player.prototype.updateEquipments = function (weapon, cloth) {
        this.a_weaponModel = weapon;
        this.a_clothModel = cloth;
        if (this.display) {
            var clothModel = void 0;
            var weaponModel = void 0;
            // if(DataManager.Instance.fameData.fashionId){
            // 	let titleConfig= ConfigManager.Instance.title[DataManager.Instance.fameData.fashionId];
            // 	let modleArr:Array<string> = titleConfig.model.split("/");
            // 	clothModel = Number(modleArr[1]);
            // }else 
            if (cloth != null && cloth > 0) {
                clothModel = cloth;
                // clothModel = this.getEquipModel(cloth);
            }
            else {
                if (this.a_sex == 2) {
                    clothModel = 9002 /* Female_Body */;
                }
                else {
                    clothModel = 9001 /* Male_Body */;
                }
            }
            if (weapon != null && weapon > 0) {
                weaponModel = weapon;
            }
            if (this.changeSkins(clothModel, weaponModel)) {
                this.setAction(this.action, this.dir, true);
            }
        }
    };
    /**更新光翼*/
    Player.prototype.updateWing = function (wingId) {
        this.a_wingModel = wingId;
        if (wingId != null && wingId > 0) {
            var wingModel = wingId;
            if (this.changeWing(wingModel)) {
                this.setAction(this.action, this.dir, true);
            }
        }
        else {
            // this.animal.removeType(AnimationType.Wing);
        }
    };
    /**更新称号 */
    Player.prototype.updateTitle = function (titleId) {
        this.a_titleId = titleId;
        // if (this._entityInfo != null) {
        // 	this._entityInfo.setTitle(titleId);
        // }
    };
    /**更新行会 */
    Player.prototype.updateUnionName = function (unionName) {
        this.a_unionName = unionName;
        // if (this._entityInfo != null) {
        // 	if (unionName) {
        // 		this._entityInfo.setTexts(EntityInfoType.UNIONNAME, unionName, true);
        // 	} else {
        // 		this._entityInfo.hideText(EntityInfoType.UNIONNAME);
        // 	}
        // }
    };
    Player.prototype.updatePlayerName = function (playerName) {
        this.a_name = playerName;
        // if (this._entityInfo != null) {
        // 	if (playerName) {
        // 		this._entityInfo.setTexts(EntityInfoType.NICKNAME, playerName, true);
        // 	}
        // }
    };
    Player.prototype.dispose = function () {
        // if (this._seat) {
        // 	DataManager.Instance.mapData.removeUnWalk(this.gameObject.gridX, this.gameObject.gridY);
        // 	this._seat = false;
        // }
        _super.prototype.dispose.call(this);
    };
    return Player;
}(AnimalEntity_1.AnimalEntity));
exports.Player = Player;
},{"./AnimalEntity":19}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityFreeFsm_1 = require("../../fsm/EntityFreeFsm");
var AIManager_1 = require("./AIManager");
var EntityMoveFsm_1 = require("../../fsm/EntityMoveFsm");
/**
* name
*/
var AIBase = /** @class */ (function () {
    function AIBase() {
        /** 状态 0停止 1开始*/
        this.state = 1;
        /** 技能延迟时间*/
        this.skillDelayTime = 1000;
    }
    AIBase.prototype.moveComplete = function (entity, time) {
        if (entity.curFsm.getState() == 1 /* FSM_STATE_RUN */) {
            var state = this.check(entity);
            if (state != 0) {
                return;
            }
        }
        entity.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
    };
    /** 0不动 1走路 2施法 3保持原来状态*/
    AIBase.prototype.check = function (entity) {
        //当前AI状态
        if (this.state == 0) {
            return 0;
        }
        //判断AI时间间隔
        if (AIManager_1.AIManager.Instance.isAIIntervalLimit(entity.uid)) {
            return 0;
        }
        if (entity.pathArr && entity.pathArr.length > 0) {
            var toArr = entity.pathArr.shift();
            entity.prepareToMove(toArr[0], toArr[1], 0.1);
            if (entity.curFsm.getState() == 1 /* FSM_STATE_RUN */) {
                entity.onEnterMove();
            }
            else {
                entity.changeFSMState(EntityMoveFsm_1.EntityMoveFsm.Instance);
            }
            // let heighty = SceneManager.Instance.terrainSprite.getHeight(-toArr[0]/40, toArr[1]/40);
            // if (isNaN(heighty)) {
            //      heighty = 0;
            // }
            // entity.setPixelPosition(toArr[0],heighty,toArr[1]);
            // if(entity.pathArr.length == 0){
            // 	entity.pathArr = null;
            // }
        }
        return 3;
    };
    AIBase.prototype.doSkill = function (entity, target, skillid, level) {
        if (level === void 0) { level = 1; }
        return false;
    };
    AIBase.prototype.doSomething = function (entity, target) {
    };
    /** 开始AI*/
    AIBase.prototype.start = function () {
        this.state = 1;
    };
    /** 停止AI*/
    AIBase.prototype.stop = function () {
        this.state = 0;
    };
    /**死亡一定要设置entity.deadTime时间，不然就一直躺着不会销毁了*/
    AIBase.prototype.die = function (entity) {
        // if (entity instanceof AnimalEntity && entity.entityType != EntityType.PLAYER && entity.entityType != EntityType.HERO) {
        // 	entity.die();
        // 	entity.deadTime = GameTime.Instance.totalGameTime + 1500;//尸体时间
        // } else {
        // 	this.dieEnd(entity);
        // }
    };
    AIBase.prototype.relive = function (entity) {
        // (entity as AnimalEntity).relive();
        // entity.changeFSMState(EntityFreeFsm.Instance);
    };
    AIBase.prototype.dieEnd = function (entity) {
        // EntityManager.Instance.readyToDispose(entity);
    };
    //移动，发送至服务端同步
    AIBase.prototype.moveToServer = function (entity, x, y) {
    };
    //技能释放 ，发送至服务端
    AIBase.prototype.skillToServer = function (entity, target, skillid) {
    };
    /**通知服务端拾取掉落 */
    AIBase.prototype.pickupServer = function (entity, x, y) {
    };
    return AIBase;
}());
exports.AIBase = AIBase;
},{"../../fsm/EntityFreeFsm":32,"../../fsm/EntityMoveFsm":33,"./AIManager":27}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityDeadFsm_1 = require("../../fsm/EntityDeadFsm");
var EntitySkillFsm_1 = require("../../fsm/EntitySkillFsm");
var EntityForceMoveFsm_1 = require("../../fsm/EntityForceMoveFsm");
var EntityFreeFsm_1 = require("../../fsm/EntityFreeFsm");
var EntityMoveFsm_1 = require("../../fsm/EntityMoveFsm");
var EntityPickupFsm_1 = require("../../fsm/EntityPickupFsm");
var GameTime_1 = require("../../../../data/GameTime");
var PlayerAI_1 = require("./PlayerAI");
var MonsterAI_1 = require("./MonsterAI");
/**
* name
*/
var AIManager = /** @class */ (function () {
    function AIManager() {
        this.aiDic = {};
        /** ai脚本*/
        this.aiIntevalDic = {};
        this.aiDic[0 /* PLAYER */] = PlayerAI_1.PlayerAI;
        this.aiDic[1 /* MONSTER */] = MonsterAI_1.MonsterAI;
    }
    AIManager.createInstance = function () {
        this.Instance = new AIManager();
        EntityDeadFsm_1.EntityDeadFsm.Instance = new EntityDeadFsm_1.EntityDeadFsm();
        EntitySkillFsm_1.EntitySkillFsm.Instance = new EntitySkillFsm_1.EntitySkillFsm();
        EntityForceMoveFsm_1.EntityForceMoveFsm.Instance = new EntityForceMoveFsm_1.EntityForceMoveFsm();
        EntityFreeFsm_1.EntityFreeFsm.Instance = new EntityFreeFsm_1.EntityFreeFsm();
        EntityMoveFsm_1.EntityMoveFsm.Instance = new EntityMoveFsm_1.EntityMoveFsm();
        EntityPickupFsm_1.EntityPickupFsm.Instance = new EntityPickupFsm_1.EntityPickupFsm();
    };
    /** true 还没结束 false已经结束*/
    AIManager.prototype.isAIIntervalLimit = function (uid) {
        var aitime = this.aiIntevalDic[uid];
        if (aitime == undefined) {
            aitime = 0;
        }
        return aitime > GameTime_1.GameTime.Instance.totalGameTime;
    };
    AIManager.prototype.setAIInterval = function (uid, time) {
        var aitime = GameTime_1.GameTime.Instance.totalGameTime + time;
        var temptime = this.aiIntevalDic[uid];
        if (temptime == undefined) {
            temptime = 0;
        }
        this.aiIntevalDic[uid] = Math.max(aitime, temptime);
    };
    /** 根据策划配置的来获取指定的ai*/
    AIManager.prototype.getAI = function (type) {
        var temp = this.aiDic[type];
        if (temp instanceof Function) {
            temp = new this.aiDic[type]();
            this.aiDic[type] = temp;
        }
        return temp;
    };
    AIManager.prototype.checkClose = function (fx, fy, tx, ty, closeX, closeY) {
        return Math.abs(fx - tx) <= closeX && Math.abs(fy - ty) <= closeY;
    };
    AIManager.prototype.removeEntityAI = function (uid) {
        delete this.aiIntevalDic[uid];
    };
    return AIManager;
}());
exports.AIManager = AIManager;
},{"../../../../data/GameTime":45,"../../fsm/EntityDeadFsm":30,"../../fsm/EntityForceMoveFsm":31,"../../fsm/EntityFreeFsm":32,"../../fsm/EntityMoveFsm":33,"../../fsm/EntityPickupFsm":34,"../../fsm/EntitySkillFsm":35,"./MonsterAI":28,"./PlayerAI":29}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AIBase_1 = require("./AIBase");
var SkillBase_1 = require("../../skill/SkillBase");
var GameUtils_1 = require("../../util/GameUtils");
var GameTime_1 = require("../../../../data/GameTime");
var EntitySkillFsm_1 = require("../../fsm/EntitySkillFsm");
var ConfigManager_1 = require("../../../../config/ConfigManager");
var BattleManager_1 = require("../../../BattleManager");
/*
* name;
*/
var MonsterAI = /** @class */ (function (_super) {
    __extends(MonsterAI, _super);
    function MonsterAI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** 0不动 1走路 2施法 3保持原来状态*/
    MonsterAI.prototype.check = function (entity) {
        if (_super.prototype.check.call(this, entity) == 0) {
            return 0;
        }
        if (entity.curFsm.getState() == 2 /* FSM_STATE_RELEASE */ && entity.action == 1 /* Idle */) {
            return 0;
        }
        return 3;
        // if(Math.random() > 0.8){
        // 	let fpcellx:number,fpcelly:number;
        // 	//离出生点太远就往回走
        // 	if(Math.abs(entity.a_bornX - entity.x) > 10 || Math.abs(entity.a_bornZ - entity.z) > 10){
        // 		fpcellx = entity.a_bornX;
        // 		fpcelly = entity.a_bornZ;
        // 	}else{
        // 		fpcellx = entity.x - 5 + Math.floor(Math.random() * 10);
        // 		fpcelly = entity.z - 5 + Math.floor(Math.random() * 10);
        // 	}
        // 	let tpoint:number[] = [fpcellx,fpcelly];
        // 	entity.prepareToMove(tpoint[0],tpoint[1],0.1);	
        // 	entity.changeFSMState(EntityMoveFsm.Instance);
        // }
        // AIManager.Instance.setAIInterval(entity.uid,1000 + Math.random() * 500);
    };
    MonsterAI.prototype.doSkill = function (entity, target, skillid, level) {
        if (level === void 0) { level = 1; }
        // let target = EntityManager.Instance._enemyDic[2];
        var skillConfig = ConfigManager_1.ConfigManager.Instance.skill[skillid];
        var skillCondition = ConfigManager_1.ConfigManager.Instance.skillCondition[skillid][level];
        var skillhurt = new SkillBase_1.SkillHurt();
        skillhurt.id = target.id;
        var monster = entity;
        // let crit:boolean = CommonLogic.randomCrit(critical,level,monCritratio);
        // skillhurt.plus = 1;
        skillhurt.effectValue = skillhurt.hurt = -Math.floor(monster.config.att * skillCondition.rate / 10000) - skillCondition.hurt;
        var curhp = target.a_truehp = target.a_truehp + skillhurt.hurt;
        if (curhp <= 0) //死亡处理
         {
            target.a_truehp = 0;
            target.a_isDead = true;
            target.a_killer = entity.uid;
            entity._entityTargetId = null;
        }
        var hurtlist = [];
        hurtlist.push(skillhurt);
        // if(bufferid>0)
        // {
        // 	if(!buffList)
        // 	{	
        // 		buffList = [];
        // 	}
        // 	buff = new SKillBuffAdd();
        // 	buff.bufferid = bufferid;
        // 	buff.time = GameTime.Instance.totalGameTime + 30000;
        // 	buff.id = eachEnemy.realUid;
        // 	buffList.push(buff);
        // }
        entity.prepareSkillData(skillid, target.id, target.x, target.y, GameUtils_1.DirectionUtil.getForwardByGridXY(entity.x, entity.y, target.x, target.y), GameTime_1.GameTime.Instance.totalGameTime, true, hurtlist, null, 0);
        if (entity.curFsm.getState() == 2 /* FSM_STATE_RELEASE */) {
            entity.curFsm.enter(entity, 0);
        }
        else {
            entity.changeFSMState(EntitySkillFsm_1.EntitySkillFsm.Instance);
        }
        return true;
    };
    MonsterAI.prototype.doSomething = function (entity, target) {
        var monster = entity;
        var ms = ConfigManager_1.ConfigManager.Instance.monsterSkill[monster.mid];
        var skillid = ms.skillId[0];
        var skillLv = ms.skillLevel[0];
        if (!target.a_isDead) {
            this.doSkill(entity, target, skillid, skillLv);
        }
    };
    MonsterAI.prototype.die = function (entity) {
        entity.dieEnd(true);
        BattleManager_1.BattleManager.Instance.checkEnemyState();
    };
    return MonsterAI;
}(AIBase_1.AIBase));
exports.MonsterAI = MonsterAI;
},{"../../../../config/ConfigManager":43,"../../../../data/GameTime":45,"../../../BattleManager":3,"../../fsm/EntitySkillFsm":35,"../../skill/SkillBase":38,"../../util/GameUtils":41,"./AIBase":26}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AIBase_1 = require("./AIBase");
var SkillBase_1 = require("../../skill/SkillBase");
var GameUtils_1 = require("../../util/GameUtils");
var GameTime_1 = require("../../../../data/GameTime");
var EntitySkillFsm_1 = require("../../fsm/EntitySkillFsm");
var ConfigManager_1 = require("../../../../config/ConfigManager");
var GameData_1 = require("../../../../data/GameData");
/**
* name
*/
var PlayerAI = /** @class */ (function (_super) {
    __extends(PlayerAI, _super);
    function PlayerAI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** 0不动 1走路 2施法 3保持原来状态*/
    PlayerAI.prototype.check = function (entity) {
        if (_super.prototype.check.call(this, entity) == 0) {
            return 0;
        }
        if (entity.curFsm.getState() == 2 /* FSM_STATE_RELEASE */ && entity.action == 1 /* Idle */) {
            return 0;
        }
        // if(Math.random() > 0.8){
        // 	let fpcellx:number,fpcelly:number;
        // 	//离出生点太远就往回走
        // 	if(Math.abs(entity.a_bornX - entity.x) > 10 || Math.abs(entity.a_bornZ - entity.z) > 10){
        // 		fpcellx = entity.a_bornX;
        // 		fpcelly = entity.a_bornZ;
        // 	}else{
        // 		fpcellx = entity.x - 2 + Math.floor(Math.random() * 4);
        // 		fpcelly = entity.z - 2 + Math.floor(Math.random() * 4);
        // 	}
        // 	let tpoint:number[] = [fpcellx,fpcelly];
        // 	entity.prepareToMove(tpoint[0],tpoint[1],0.1);	
        // 	entity.changeFSMState(EntityMoveFsm.Instance);
        // }
        // AIManager.Instance.setAIInterval(entity.uid,3000 + Math.random() * 500);
        // entity.showBloodEffect(1234,0,0,0,0);
        return 3;
    };
    PlayerAI.prototype.doSkill = function (entity, target, skillid, level) {
        if (level === void 0) { level = 1; }
        // let target = EntityManager.Instance._enemyDic[2];
        var skillConfig = ConfigManager_1.ConfigManager.Instance.skill[skillid];
        var skillCondition = ConfigManager_1.ConfigManager.Instance.skillCondition[skillid][level];
        var skillhurt = new SkillBase_1.SkillHurt();
        skillhurt.id = target.id;
        // let crit:boolean = CommonLogic.randomCrit(critical,level,monCritratio);
        skillhurt.plus = 0;
        skillhurt.effectValue = skillhurt.hurt = -skillCondition.hurt;
        var curhp = target.a_truehp = target.a_truehp + skillhurt.hurt;
        if (curhp <= 0) //死亡处理
         {
            target.a_truehp = 0;
            target.a_isDead = true;
            target.a_killer = entity.uid;
            entity._entityTargetId = null;
        }
        var hurtlist = [];
        hurtlist.push(skillhurt);
        // if(bufferid>0)
        // {
        // 	if(!buffList)
        // 	{	
        // 		buffList = [];
        // 	}
        // 	buff = new SKillBuffAdd();
        // 	buff.bufferid = bufferid;
        // 	buff.time = GameTime.Instance.totalGameTime + 30000;
        // 	buff.id = eachEnemy.realUid;
        // 	buffList.push(buff);
        // }
        entity.prepareSkillData(skillid, target.id, target.x, target.y, GameUtils_1.DirectionUtil.getForwardByGridXY(entity.x, entity.y, target.x, target.y), GameTime_1.GameTime.Instance.totalGameTime, true, hurtlist, null, 0);
        if (entity.curFsm.getState() == 2 /* FSM_STATE_RELEASE */) {
            entity.curFsm.enter(entity, 0);
        }
        else {
            entity.changeFSMState(EntitySkillFsm_1.EntitySkillFsm.Instance);
        }
        return true;
    };
    PlayerAI.prototype.die = function (entity) {
        // entity.die();
        GameData_1.GameData.instance.sendNotif(7 /* LOG */, "玩家死亡-失败");
        GameData_1.GameData.instance.gameOver();
    };
    return PlayerAI;
}(AIBase_1.AIBase));
exports.PlayerAI = PlayerAI;
},{"../../../../config/ConfigManager":43,"../../../../data/GameData":44,"../../../../data/GameTime":45,"../../fsm/EntitySkillFsm":35,"../../skill/SkillBase":38,"../../util/GameUtils":41,"./AIBase":26}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityManager_1 = require("../entity/EntityManager");
var EntityDeadFsm = /** @class */ (function () {
    function EntityDeadFsm() {
    }
    EntityDeadFsm.prototype.getState = function () {
        return 3 /* FSM_STATE_DEAD */;
    };
    EntityDeadFsm.prototype.enter = function (entity, stateLast) {
        entity._entityAI.die(entity);
        //entity.onEnterIdle();
    };
    EntityDeadFsm.prototype.stateChange = function (entity, state) {
        if (entity == EntityManager_1.EntityManager.Instance.firstPlayer) {
            // if ((entity as AnimalEntity).fighterObject.isDead) {
            // 	return true;
            // }
        }
        return false;
    };
    EntityDeadFsm.prototype.execute = function (entity, gameTime) {
        if (entity.canRelive) {
            if (entity.freeTime < gameTime.totalGameTime) {
                entity._entityAI.relive(entity);
                return;
            }
        }
        // if ((entity as AnimalEntity).deadTime > 0 && (entity as AnimalEntity).deadTime < gameTime.totalGameTime) {
        // 	entity._entityAI.dieEnd(entity);
        // }
        // let animalEntity:AnimalEntity = entity as AnimalEntity;
        // // if(animalEntity.deadWaitTime < gameTime.totalGameTime){
        // 	if(animalEntity._entityAI)
        // 	{
        // 		animalEntity._entityAI.check(animalEntity);
        // 	}
        // entity.onEnterDead();
        // }
    };
    EntityDeadFsm.prototype.exit = function (entity) {
    };
    return EntityDeadFsm;
}());
exports.EntityDeadFsm = EntityDeadFsm;
},{"../entity/EntityManager":23}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityForceMoveFsm = /** @class */ (function () {
    function EntityForceMoveFsm() {
    }
    EntityForceMoveFsm.prototype.getState = function () {
        return 4 /* FSM_STATE_FORCEMOVE */;
    };
    EntityForceMoveFsm.prototype.enter = function (entity, stateLast) {
        entity.onEnterForceMove();
    };
    EntityForceMoveFsm.prototype.stateChange = function (entity, state) {
        return false;
    };
    EntityForceMoveFsm.prototype.execute = function (entity, gameTime) {
        entity.onExecuteMove(gameTime);
    };
    EntityForceMoveFsm.prototype.exit = function (entity) {
    };
    return EntityForceMoveFsm;
}());
exports.EntityForceMoveFsm = EntityForceMoveFsm;
},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EntityFreeFsm = /** @class */ (function () {
    function EntityFreeFsm() {
    }
    EntityFreeFsm.prototype.getState = function () {
        return 0 /* FSM_STATE_FREE */;
    };
    EntityFreeFsm.prototype.enter = function (entity, stateLast) {
        entity.onEnterFree();
    };
    EntityFreeFsm.prototype.stateChange = function (entity, state) {
        return false;
    };
    EntityFreeFsm.prototype.execute = function (entity, gameTime) {
        if (entity._entityAI) {
            if (entity.freeTime < gameTime.totalGameTime) {
                entity._entityAI.check(entity);
            }
        }
    };
    EntityFreeFsm.prototype.exit = function (entity) {
    };
    return EntityFreeFsm;
}());
exports.EntityFreeFsm = EntityFreeFsm;
},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AnimalEntity_1 = require("../entity/AnimalEntity");
var EntityMoveFsm = /** @class */ (function () {
    function EntityMoveFsm() {
    }
    EntityMoveFsm.prototype.getState = function () {
        return 1 /* FSM_STATE_RUN */;
    };
    EntityMoveFsm.prototype.enter = function (entity, stateLast) {
        if (entity instanceof AnimalEntity_1.AnimalEntity) {
            entity.bianshen(null);
            // if(entity.realUid.equals(EntityManager.Instance.controlPlayerID))//走动又不打断了
            // {
            // 	DataManager.Instance.arpgInstanceData.perpareLj.length = 0;
            // }
        }
        entity.onEnterMove();
    };
    EntityMoveFsm.prototype.stateChange = function (entity, state) {
        return false;
    };
    EntityMoveFsm.prototype.execute = function (entity, gameTime) {
        entity.onExecuteMove(gameTime);
    };
    EntityMoveFsm.prototype.exit = function (entity) {
        entity.stopTween();
    };
    return EntityMoveFsm;
}());
exports.EntityMoveFsm = EntityMoveFsm;
},{"../entity/AnimalEntity":19}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameTime_1 = require("../../../data/GameTime");
var EntityFreeFsm_1 = require("./EntityFreeFsm");
var EntityPickupFsm = /** @class */ (function () {
    function EntityPickupFsm() {
    }
    EntityPickupFsm.prototype.getState = function () {
        return 7 /* FSM_STATE_PICKUP */;
    };
    EntityPickupFsm.prototype.enter = function (entity, stateLast) {
        var animalEntity = entity;
        animalEntity.onPickup();
        entity.strategyTick = GameTime_1.GameTime.Instance.totalGameTime + stateLast;
    };
    EntityPickupFsm.prototype.stateChange = function (entity, state) {
        return false;
    };
    EntityPickupFsm.prototype.execute = function (entity, gameTime) {
        if (entity.strategyTick > gameTime.totalGameTime) {
            return;
        }
        var animalEntity = entity;
        if (!entity.isBusy) {
            if (entity._entityAI) {
                if (entity._entityAI.check(animalEntity) != 0) {
                    return;
                }
            }
            entity.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
        }
    };
    EntityPickupFsm.prototype.exit = function (entity) {
    };
    return EntityPickupFsm;
}());
exports.EntityPickupFsm = EntityPickupFsm;
},{"../../../data/GameTime":45,"./EntityFreeFsm":32}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameTime_1 = require("../../../data/GameTime");
var EntityFreeFsm_1 = require("./EntityFreeFsm");
var EntitySkillFsm = /** @class */ (function () {
    function EntitySkillFsm() {
    }
    EntitySkillFsm.prototype.getState = function () {
        return 2 /* FSM_STATE_RELEASE */;
    };
    EntitySkillFsm.prototype.enter = function (entity, stateLast) {
        var animalEntity = entity;
        animalEntity.onReleaseSkill();
        entity.strategyTick = GameTime_1.GameTime.Instance.totalGameTime + stateLast;
    };
    EntitySkillFsm.prototype.stateChange = function (entity, state) {
        return false;
    };
    EntitySkillFsm.prototype.execute = function (entity, gameTime) {
        if (entity.strategyTick > gameTime.totalGameTime) {
            return;
        }
        var animalEntity = entity;
        if (animalEntity.action == 1 /* Idle */ && !entity.isBusy) {
            if (entity._entityAI) {
                if (entity._entityAI.check(animalEntity) != 0) {
                    return;
                }
            }
            entity.changeFSMState(EntityFreeFsm_1.EntityFreeFsm.Instance);
        }
    };
    EntitySkillFsm.prototype.exit = function (entity) {
    };
    return EntitySkillFsm;
}());
exports.EntitySkillFsm = EntitySkillFsm;
},{"../../../data/GameTime":45,"./EntityFreeFsm":32}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* name;
*/
var CustomMaterial = /** @class */ (function (_super) {
    __extends(CustomMaterial, _super);
    function CustomMaterial() {
        return _super.call(this) || this;
    }
    CustomMaterial.init = function () {
        this.shaderDefines2 = new laya.d3.shader.ShaderDefines(this.shaderDefines);
        this.INNER_GLOW = this.shaderDefines2.registerDefine("INNER_GLOW");
    };
    Object.defineProperty(CustomMaterial.prototype, "marginalColor", {
        get: function () {
            return this._shaderValues.getVector(CustomMaterial.MARGINALCOLOR);
        },
        /**
         * 获取纹理平铺和偏移。
         * @param value 纹理平铺和偏移。
         */
        set: function (value) {
            if (value) {
                this._defineDatas.add(CustomMaterial.INNER_GLOW);
            }
            else {
                this._defineDatas.remove(CustomMaterial.INNER_GLOW);
            }
            this._shaderValues.setVector(CustomMaterial.MARGINALCOLOR, value);
        },
        enumerable: true,
        configurable: true
    });
    CustomMaterial.prototype.setShaderName = function (name) {
        _super.prototype.setShaderName.call(this, "customShader");
    };
    CustomMaterial.MARGINALCOLOR = 24;
    return CustomMaterial;
}(Laya.BlinnPhongMaterial));
exports.CustomMaterial = CustomMaterial;
},{}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CustomMaterial_1 = require("../marterial/CustomMaterial");
/*
* name;
*/
var CustomShader = /** @class */ (function () {
    function CustomShader() {
    }
    CustomShader.initShader = function () {
        var attributeMap = {
            'a_Position': Laya.VertexMesh.MESH_POSITION0,
            'a_Color': Laya.VertexMesh.MESH_COLOR0,
            'a_Normal': Laya.VertexMesh.MESH_NORMAL0,
            'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
            'a_Texcoord1': Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
            'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
            'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0,
            'a_Tangent0': Laya.VertexMesh.MESH_TANGENT0
        };
        var uniformMap = {
            'u_Bones': [/*laya.d3.core.SkinnedMeshSprite3D.BONES*/ 0, /*laya.d3.shader.Shader3D.PERIOD_CUSTOM*/ 0],
            'u_DiffuseTexture': [/*laya.d3.core.material.BlinnPhongMaterial.ALBEDOTEXTURE*/ 1, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_SpecularTexture': [/*laya.d3.core.material.BlinnPhongMaterial.SPECULARTEXTURE*/ 3, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_NormalTexture': [/*laya.d3.core.material.BlinnPhongMaterial.NORMALTEXTURE*/ 2, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_AlphaTestValue': [/*laya.d3.core.material.BaseMaterial.ALPHATESTVALUE*/ 0, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_DiffuseColor': [/*laya.d3.core.material.BlinnPhongMaterial.ALBEDOCOLOR*/ 5, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_MaterialSpecular': [/*laya.d3.core.material.BlinnPhongMaterial.MATERIALSPECULAR*/ 6, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_Shininess': [/*laya.d3.core.material.BlinnPhongMaterial.SHININESS*/ 7, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_TilingOffset': [/*laya.d3.core.material.BlinnPhongMaterial.TILINGOFFSET*/ 8, /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1],
            'u_WorldMat': [Laya.Sprite3D.WORLDMATRIX, /*laya.d3.shader.Shader3D.PERIOD_SPRITE*/ 2],
            'u_MvpMatrix': [Laya.Sprite3D.MVPMATRIX, /*laya.d3.shader.Shader3D.PERIOD_SPRITE*/ 2],
            'u_LightmapScaleOffset': [Laya.RenderableSprite3D.LIGHTMAPSCALEOFFSET, /*laya.d3.shader.Shader3D.PERIOD_SPRITE*/ 2],
            'u_LightMap': [Laya.RenderableSprite3D.LIGHTMAP, /*laya.d3.shader.Shader3D.PERIOD_SPRITE*/ 2],
            'u_CameraPos': [/*laya.d3.core.BaseCamera.CAMERAPOS*/ 0, /*laya.d3.shader.Shader3D.PERIOD_CAMERA*/ 3],
            'u_ReflectTexture': [/*laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE*/ 22, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_ReflectIntensity': [/*laya.d3.core.scene.Scene3D.REFLETIONINTENSITY*/ 23, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_FogStart': [/*laya.d3.core.scene.Scene3D.FOGSTART*/ 1, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_FogRange': [/*laya.d3.core.scene.Scene3D.FOGRANGE*/ 2, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_FogColor': [/*laya.d3.core.scene.Scene3D.FOGCOLOR*/ 0, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_DirectionLight.Color': [/*laya.d3.core.scene.Scene3D.LIGHTDIRCOLOR*/ 4, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_DirectionLight.Direction': [/*laya.d3.core.scene.Scene3D.LIGHTDIRECTION*/ 3, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_PointLight.Position': [/*laya.d3.core.scene.Scene3D.POINTLIGHTPOS*/ 5, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_PointLight.Range': [/*laya.d3.core.scene.Scene3D.POINTLIGHTRANGE*/ 6, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_PointLight.Color': [/*laya.d3.core.scene.Scene3D.POINTLIGHTCOLOR*/ 8, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_SpotLight.Position': [/*laya.d3.core.scene.Scene3D.SPOTLIGHTPOS*/ 9, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_SpotLight.Direction': [/*laya.d3.core.scene.Scene3D.SPOTLIGHTDIRECTION*/ 10, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_SpotLight.Range': [/*laya.d3.core.scene.Scene3D.SPOTLIGHTRANGE*/ 12, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_SpotLight.Spot': [/*laya.d3.core.scene.Scene3D.SPOTLIGHTSPOTANGLE*/ 11, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_SpotLight.Color': [/*laya.d3.core.scene.Scene3D.SPOTLIGHTCOLOR*/ 14, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_AmbientColor': [/*laya.d3.core.scene.Scene3D.AMBIENTCOLOR*/ 21, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_shadowMap1': [/*laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE1*/ 18, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_shadowMap2': [/*laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE2*/ 19, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_shadowMap3': [/*laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE3*/ 20, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_shadowPSSMDistance': [/*laya.d3.core.scene.Scene3D.SHADOWDISTANCE*/ 15, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_lightShadowVP': [/*laya.d3.core.scene.Scene3D.SHADOWLIGHTVIEWPROJECT*/ 16, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_shadowPCFoffset': [/*laya.d3.core.scene.Scene3D.SHADOWMAPPCFOFFSET*/ 17, /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4],
            'u_marginalColor': [CustomMaterial_1.CustomMaterial.MARGINALCOLOR, Laya.Shader3D.PERIOD_MATERIAL]
        };
        var vs = "#include \"Lighting.glsl\";\n" +
            "\n" +
            "attribute vec4 a_Position;\n" +
            "uniform mat4 u_MvpMatrix;\n" +
            "\n" +
            "#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\n" +
            "	attribute vec2 a_Texcoord0;\n" +
            "	varying vec2 v_Texcoord0;\n" +
            "#endif\n" +
            "\n" +
            "#if defined(LIGHTMAP)&&defined(UV1)\n" +
            "	attribute vec2 a_Texcoord1;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef LIGHTMAP\n" +
            "	uniform vec4 u_LightmapScaleOffset;\n" +
            "	varying vec2 v_LightMapUV;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef COLOR\n" +
            "	attribute vec4 a_Color;\n" +
            "	varying vec4 v_Color;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef BONE\n" +
            "	const int c_MaxBoneCount = 24;\n" +
            "	attribute vec4 a_BoneIndices;\n" +
            "	attribute vec4 a_BoneWeights;\n" +
            "	uniform mat4 u_Bones[c_MaxBoneCount];\n" +
            "#endif\n" +
            "\n" +
            "#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(INNER_GLOW)\n" +
            "	attribute vec3 a_Normal;\n" +
            "	varying vec3 v_Normal; \n" +
            "	uniform vec3 u_CameraPos;\n" +
            "	varying vec3 v_ViewDir; \n" +
            "#endif\n" +
            "\n" +
            "#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n" +
            "	attribute vec4 a_Tangent0;\n" +
            "	varying vec3 v_Tangent;\n" +
            "	varying vec3 v_Binormal;\n" +
            "#endif\n" +
            "\n" +
            "#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(RECEIVESHADOW)\n" +
            "	uniform mat4 u_WorldMat;\n" +
            "	varying vec3 v_PositionWorld;\n" +
            "#endif\n" +
            "\n" +
            "varying float v_posViewZ;\n" +
            "#ifdef RECEIVESHADOW\n" +
            "  #ifdef SHADOWMAP_PSSM1 \n" +
            "  varying vec4 v_lightMVPPos;\n" +
            "  uniform mat4 u_lightShadowVP[4];\n" +
            "  #endif\n" +
            "#endif\n" +
            "\n" +
            "#ifdef TILINGOFFSET\n" +
            "	uniform vec4 u_TilingOffset;\n" +
            "#endif\n" +
            "\n" +
            "void main_castShadow()\n" +
            "{\n" +
            "	#ifdef BONE\n" +
            "		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n" +
            "		vec4 position=skinTransform*a_Position;\n" +
            "		gl_Position = u_MvpMatrix * position;\n" +
            "	#else\n" +
            "		gl_Position = u_MvpMatrix * a_Position;\n" +
            "	#endif\n" +
            "	 \n" +
            "	//TODO没考虑UV动画呢\n" +
            "	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n" +
            "		v_Texcoord0=a_Texcoord0;\n" +
            "	#endif\n" +
            "		v_posViewZ = gl_Position.z;\n" +
            "}\n" +
            "\n" +
            "mat3 inverse(mat3 m) {\n" +
            "  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n" +
            "  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n" +
            "  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n" +
            "\n" +
            "  float b01 = a22 * a11 - a12 * a21;\n" +
            "  float b11 = -a22 * a10 + a12 * a20;\n" +
            "  float b21 = a21 * a10 - a11 * a20;\n" +
            "\n" +
            "  float det = a00 * b01 + a01 * b11 + a02 * b21;\n" +
            "\n" +
            "  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n" +
            "              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n" +
            "              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n" +
            "}\n" +
            "\n" +
            "void main_normal()\n" +
            "{\n" +
            "	#ifdef BONE\n" +
            "		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n" +
            "		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n" +
            "		vec4 position=skinTransform*a_Position;\n" +
            "		gl_Position = u_MvpMatrix * position;\n" +
            "	#else\n" +
            "		gl_Position = u_MvpMatrix * a_Position;\n" +
            "	#endif\n" +
            "\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\n" +
            "		mat3 worldInvMat;\n" +
            "		#ifdef BONE\n" +
            "			worldInvMat=inverse(mat3(u_WorldMat*skinTransform));\n" +
            "		#else\n" +
            "			worldInvMat=inverse(mat3(u_WorldMat));\n" +
            "		#endif  \n" +
            "		v_Normal=a_Normal*worldInvMat;\n" +
            "		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n" +
            "			v_Tangent=a_Tangent0.xyz*worldInvMat;\n" +
            "			v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n" +
            "		#endif\n" +
            "	#endif\n" +
            "\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(RECEIVESHADOW)\n" +
            "		#ifdef BONE\n" +
            "			v_PositionWorld=(u_WorldMat*position).xyz;\n" +
            "		#else\n" +
            "			v_PositionWorld=(u_WorldMat*a_Position).xyz;\n" +
            "		#endif\n" +
            "	#endif\n" +
            "	\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\n" +
            "		v_ViewDir=u_CameraPos-v_PositionWorld;\n" +
            "	#endif\n" +
            "\n" +
            "	#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n" +
            "		v_Texcoord0=a_Texcoord0;\n" +
            "		#ifdef TILINGOFFSET\n" +
            "			v_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n" +
            "		#endif\n" +
            "	#endif\n" +
            "\n" +
            "	#ifdef LIGHTMAP\n" +
            "		#ifdef SCALEOFFSETLIGHTINGMAPUV\n" +
            "			#ifdef UV1\n" +
            "				v_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n" +
            "			#else\n" +
            "				v_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n" +
            "			#endif \n" +
            "			v_LightMapUV.y=1.0-v_LightMapUV.y;\n" +
            "		#else\n" +
            "			#ifdef UV1\n" +
            "				v_LightMapUV=a_Texcoord1;\n" +
            "			#else\n" +
            "				v_LightMapUV=a_Texcoord0;\n" +
            "			#endif \n" +
            "		#endif \n" +
            "	#endif\n" +
            "\n" +
            "	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n" +
            "		v_Color=a_Color;\n" +
            "	#endif\n" +
            "\n" +
            "	#ifdef RECEIVESHADOW\n" +
            "		v_posViewZ = gl_Position.w;\n" +
            "		#ifdef SHADOWMAP_PSSM1 \n" +
            "			v_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n" +
            "		#endif\n" +
            "	#endif\n" +
            "}\n" +
            "\n" +
            "void main()\n" +
            "{\n" +
            "	#ifdef CASTSHADOW\n" +
            "		main_castShadow();\n" +
            "	#else\n" +
            "		main_normal();\n" +
            "	#endif\n" +
            "}";
        var ps = "#ifdef HIGHPRECISION\n" +
            "	precision highp float;\n" +
            "#else\n" +
            "	precision mediump float;\n" +
            "#endif\n" +
            "\n" +
            "#include \"Lighting.glsl\";\n" +
            "\n" +
            "uniform vec4 u_DiffuseColor;\n" +
            "\n" +
            "#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n" +
            "	varying vec4 v_Color;\n" +
            "#endif\n" +
            "#if defined(INNER_GLOW)\n" +
            "uniform vec3 u_marginalColor;\n" +
            "#endif\n" +
            "\n" +
            "#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT) || defined(INNER_GLOW)\n" +
            "	varying vec3 v_ViewDir; \n" +
            "#endif\n" +
            "\n" +
            "#ifdef ALPHATEST\n" +
            "	uniform float u_AlphaTestValue;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef DIFFUSEMAP\n" +
            "	uniform sampler2D u_DiffuseTexture;\n" +
            "#endif\n" +
            "\n" +
            "\n" +
            "\n" +
            "#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n" +
            "	varying vec2 v_Texcoord0;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef LIGHTMAP\n" +
            "	varying vec2 v_LightMapUV;\n" +
            "	uniform sampler2D u_LightMap;\n" +
            "#endif\n" +
            "\n" +
            "#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n" +
            "	uniform vec3 u_MaterialSpecular;\n" +
            "	uniform float u_Shininess;\n" +
            "	#ifdef SPECULARMAP \n" +
            "		uniform sampler2D u_SpecularTexture;\n" +
            "	#endif\n" +
            "#endif\n" +
            "\n" +
            "#ifdef FOG\n" +
            "	uniform float u_FogStart;\n" +
            "	uniform float u_FogRange;\n" +
            "	uniform vec3 u_FogColor;\n" +
            "#endif\n" +
            "\n" +
            "\n" +
            "#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n" +
            "	varying vec3 v_Normal;\n" +
            "#endif\n" +
            "\n" +
            "#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n" +
            "	uniform sampler2D u_NormalTexture;\n" +
            "	varying vec3 v_Tangent;\n" +
            "	varying vec3 v_Binormal;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef DIRECTIONLIGHT\n" +
            "	uniform DirectionLight u_DirectionLight;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef POINTLIGHT\n" +
            "	uniform PointLight u_PointLight;\n" +
            "#endif\n" +
            "\n" +
            "#ifdef SPOTLIGHT\n" +
            "	uniform SpotLight u_SpotLight;\n" +
            "#endif\n" +
            "\n" +
            "uniform vec3 u_AmbientColor;\n" +
            "\n" +
            "\n" +
            "#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n" +
            "	varying vec3 v_PositionWorld;\n" +
            "#endif\n" +
            "\n" +
            "#include \"ShadowHelper.glsl\"\n" +
            "varying float v_posViewZ;\n" +
            "#ifdef RECEIVESHADOW\n" +
            "	#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n" +
            "		uniform mat4 u_lightShadowVP[4];\n" +
            "	#endif\n" +
            "	#ifdef SHADOWMAP_PSSM1 \n" +
            "		varying vec4 v_lightMVPPos;\n" +
            "	#endif\n" +
            "#endif\n" +
            "\n" +
            "void main_castShadow()\n" +
            "{\n" +
            "	//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);\n" +
            "	gl_FragColor=packDepth(v_posViewZ);\n" +
            "	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n" +
            "		float alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\n" +
            "		if( alpha < u_AlphaTestValue )\n" +
            "		{\n" +
            "			discard;\n" +
            "		}\n" +
            "	#endif\n" +
            "}\n" +
            "void main_normal()\n" +
            "{\n" +
            "	vec3 globalDiffuse=u_AmbientColor;\n" +
            "	#ifdef LIGHTMAP	\n" +
            "		globalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n" +
            "	#endif\n" +
            "	\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(INNER_GLOW)\n" +
            "		vec3 normal;\n" +
            "		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n" +
            "			vec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\n" +
            "			normal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\n" +
            "		#else\n" +
            "			normal = normalize(v_Normal);\n" +
            "		#endif\n" +
            "		vec3 viewDir= normalize(v_ViewDir);\n" +
            "	#endif\n" +
            "	\n" +
            "	vec4 mainColor=u_DiffuseColor;\n" +
            "	#ifdef DIFFUSEMAP\n" +
            "		vec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\n" +
            "		mainColor=mainColor*difTexColor;\n" +
            "	#endif \n" +
            "	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n" +
            "		mainColor=mainColor*v_Color;\n" +
            "	#endif \n" +
            "    \n" +
            "	#ifdef ALPHATEST\n" +
            "		if(mainColor.a<u_AlphaTestValue)\n" +
            "			discard;\n" +
            "	#endif\n" +
            "  \n" +
            "	\n" +
            "	vec3 diffuse = vec3(0.0);\n" +
            "	vec3 specular= vec3(0.0);\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n" +
            "		vec3 dif,spe;\n" +
            "		#ifdef SPECULARMAP\n" +
            "			vec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\n" +
            "		#else\n" +
            "			#ifdef DIFFUSEMAP\n" +
            "				vec3 gloss=vec3(difTexColor.a);\n" +
            "			#else\n" +
            "				vec3 gloss=vec3(1.0);\n" +
            "			#endif\n" +
            "		#endif\n" +
            "	#endif\n" +
            "\n" +
            "	\n" +
            "	#ifdef DIRECTIONLIGHT\n" +
            "		LayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\n" +
            "		diffuse+=dif;\n" +
            "		specular+=spe;\n" +
            "	#endif\n" +
            " \n" +
            "	#ifdef POINTLIGHT\n" +
            "		LayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\n" +
            "		diffuse+=dif;\n" +
            "		specular+=spe;\n" +
            "	#endif\n" +
            "\n" +
            "	#ifdef SPOTLIGHT\n" +
            "		LayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\n" +
            "		diffuse+=dif;\n" +
            "		specular+=spe;\n" +
            "	#endif\n" +
            "\n" +
            "	#ifdef RECEIVESHADOW\n" +
            "		float shadowValue = 1.0;\n" +
            "		#ifdef SHADOWMAP_PSSM3\n" +
            "			shadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n" +
            "		#endif\n" +
            "		#ifdef SHADOWMAP_PSSM2\n" +
            "			shadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n" +
            "		#endif \n" +
            "		#ifdef SHADOWMAP_PSSM1\n" +
            "			shadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n" +
            "		#endif\n" +
            "		gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse)*shadowValue,mainColor.a);\n" +
            "	#else\n" +
            "		gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\n" +
            "	#endif\n" +
            "\n" +
            "	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n" +
            "		#ifdef RECEIVESHADOW\n" +
            "			gl_FragColor.rgb+=specular*shadowValue;\n" +
            "		#else\n" +
            "			gl_FragColor.rgb+=specular;\n" +
            "		#endif\n" +
            "	#endif\n" +
            "	  \n" +
            "#if defined(INNER_GLOW)\n" +
            // "   vec3 normal=normalize(v_Normal);\n"+
            "   float Rim = 1.0 - max(0.0,dot(viewDir, normal));\n" +
            "   vec3 Emissive = 2.0 * u_DirectionLight.Color * u_marginalColor * pow(Rim,3.0);\n" +
            "   gl_FragColor = gl_FragColor + vec4(Emissive,1.0);\n" +
            "#endif\n" +
            "	#ifdef FOG\n" +
            "		float lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\n" +
            "		gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n" +
            "	#endif\n" +
            "}\n" +
            "\n" +
            "void main()\n" +
            "{\n" +
            "	#ifdef CASTSHADOW		\n" +
            "		main_castShadow();\n" +
            "	#else\n" +
            "		main_normal();\n" +
            "	#endif  \n" +
            "}\n";
        CustomMaterial_1.CustomMaterial.init();
        var shader = Laya.Shader3D.add("customShader", attributeMap, uniformMap, Laya.SkinnedMeshSprite3D.shaderDefines, CustomMaterial_1.CustomMaterial.shaderDefines2);
        shader.addShaderPass(vs, ps);
        window["CustomMaterial"] = CustomMaterial_1.CustomMaterial;
        // var shaderComp: Laya.ShaderCompile3D = Laya.ShaderCompile3D.add(customShader, vs, ps, attributeMap, uniformMap);
        // Laya.BlinnPhongMaterial.init(shaderComp);
    };
    return CustomShader;
}());
exports.CustomShader = CustomShader;
},{"../marterial/CustomMaterial":36}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../../../utils/Utils");
var ConfigManager_1 = require("../../../config/ConfigManager");
var GameTime_1 = require("../../../data/GameTime");
var SkillManager_1 = require("../SkillManager");
var EntityManager_1 = require("../entity/EntityManager");
var BuffManager_1 = require("../BuffManager");
var EntityDeadFsm_1 = require("../fsm/EntityDeadFsm");
var SkillBase = /** @class */ (function () {
    function SkillBase() {
        this.enabled = false;
        this.end = false;
        this.moving = false;
        this._showHurt = false;
        this.isLj = false;
        this._attantion = true;
    }
    SkillBase.prototype.release = function ($skillid, $from, $target, x, y, direction, time, showHurt, hurtList, bufferList) {
        var thisObj = this;
        thisObj.from = $from;
        thisObj.target = $target;
        // thisObj._attantion = false;
        if (thisObj.target) {
            thisObj.targetX = $target.x;
            thisObj.targetY = $target.y;
            // if($target && ($target as AnimalEntity).group == GroupType.SELF){
            // 	thisObj._attantion = true;
            // }
        }
        else {
            thisObj.targetX = x;
            thisObj.targetY = y;
        }
        thisObj.enabled = true;
        thisObj._showHurt = showHurt;
        thisObj.hurtList = hurtList;
        thisObj.bufferList = bufferList;
        thisObj.skillid = $skillid;
        thisObj.config = ConfigManager_1.ConfigManager.Instance.skill[$skillid];
        if (thisObj.config.cls == 20 /* LIAN_JI */) {
            thisObj.isLj = true;
        }
        thisObj.end = false;
        thisObj.releaseTime = time;
        //0攻击动作 1施法动作 2无动作
        if ($from) {
            if (thisObj.config.action == 0) {
                $from.setAction(4 /* Attack */, direction, true);
            }
            thisObj.from.bianshen(null);
        }
        thisObj.initEffects();
        if (thisObj.bufferList) { //为了把毒的伤害分隔代码放到伤害判断前，不知道会不会出先大问题 ---又改回来了
            thisObj.addBufferList(thisObj.bufferList);
        }
    };
    SkillBase.prototype.initEffects = function () {
        var thisObj = this;
        var from = thisObj.from;
        if (from && from.group == 1 /* SELF */) {
            thisObj._needSound = true;
        }
        else {
            thisObj._needSound = false;
        }
        var cfgBulletEffect;
        var cfgTargetEffets;
        var configs = ConfigManager_1.ConfigManager.Instance.skillEffects[thisObj.skillid];
        if (configs) {
            for (var _i = 0, configs_1 = configs; _i < configs_1.length; _i++) {
                var effect = configs_1[_i];
                if (effect.type == 0) { //施法者
                    //cfgFirstEffets.push(effect);
                    if (from) {
                        // EffectManager.Instance.addEffect(effect.effect,from.x ,from.y,
                        // effect.pos == 1?MapLayerType.Effect_Above:MapLayerType.Effect_Below,1,effect.delaytime,
                        // thisObj.from.dir,thisObj._needSound?effect.sound:null,null,effect.scale,effect.x,effect.y,null,
                        // thisObj._attantion);
                    }
                }
                else if (effect.type == 1) { //受术者
                    if (!cfgTargetEffets) {
                        cfgTargetEffets = [];
                    }
                    cfgTargetEffets.push(effect);
                }
                else if (effect.type == 2) { //运动轨迹
                    cfgBulletEffect = effect;
                }
            }
            thisObj.targetEffect = cfgTargetEffets;
            if (cfgBulletEffect && from) { //有弹道的技能，打到人后开始计算受术者的特效延时和伤害延时
                thisObj.moving = true;
                // 	thisObj.bindex = Math.ceil(Math.random()*1000000);
                // let bulletEffect:SkillBullet = EffectManager.Instance.addSkillBullet(thisObj.id,cfgBulletEffect.effect,from.x,from.y - GameDefine.SKILL_HitTestY,thisObj.target,thisObj.targetX,thisObj.targetY,cfgBulletEffect.pos == 1?MapLayerType.Effect_Above:MapLayerType.Effect_Below,-1,cfgBulletEffect.delaytime,undefined,thisObj._needSound?cfgBulletEffect.sound:null,null,cfgBulletEffect.scale,cfgBulletEffect.x,cfgBulletEffect.y);
                // bulletEffect.bindex = thisObj.bindex;
                // if(!bulletEffect){
                thisObj.flyComplete();
                // }
            }
            else {
                thisObj.moving = false;
                thisObj.playTargetEffects();
            }
        }
        else {
            thisObj.targetEffect = undefined;
        }
    };
    SkillBase.prototype.flyComplete = function () {
        this.releaseTime = GameTime_1.GameTime.Instance.totalGameTime;
        this.moving = false;
        this.playTargetEffects(60);
    };
    SkillBase.prototype.playTargetEffects = function (yPlus) {
        if (yPlus === void 0) { yPlus = 0; }
        var thisObj = this;
        if (thisObj.targetEffect) {
            for (var _i = 0, _a = thisObj.targetEffect; _i < _a.length; _i++) {
                var effect = _a[_i];
                // EffectManager.Instance.addEffect(effect.effect,thisObj.target,thisObj.targetX,thisObj.targetY - yPlus,
                // effect.pos == 1?MapLayerType.Effect_Above:MapLayerType.Effect_Below,1,effect.delaytime,undefined,
                // thisObj._needSound?effect.sound:null,null,effect.scale,effect.x,effect.y,effect.rotation,
                // thisObj._attantion);
            }
        }
    };
    SkillBase.prototype.update = function (gameTime) {
        var thisObj = this;
        if (thisObj.end) {
            SkillManager_1.SkillManager.Instance.readyToDie(this);
            thisObj.enabled = false;
        }
        else {
            if (!thisObj.moving && gameTime.totalGameTime > thisObj.config.hurtDelay + thisObj.releaseTime) {
                thisObj.playHurtList(thisObj.hurtList, gameTime);
                thisObj.end = true;
            }
        }
    };
    SkillBase.prototype.addBufferList = function (bufferList) {
        var allentity = EntityManager_1.EntityManager.Instance.getAllEntity();
        for (var _i = 0, bufferList_1 = bufferList; _i < bufferList_1.length; _i++) {
            var eachBuff = bufferList_1[_i];
            var ae = allentity[eachBuff.targetId.toString()];
            // console.log("arpgbuff");
            BuffManager_1.BuffManager.Instance.addBuff(ae, eachBuff);
        }
    };
    SkillBase.prototype.playHurtList = function (hurtlist, gameTime) {
        // console.log(this.skillid + "结算");
        if (!hurtlist) {
            return;
        }
        var thisObj = this;
        var allentity = EntityManager_1.EntityManager.Instance.getAllEntity();
        var hurtindex = 0; //连击伤害按位置拍下去
        for (var _i = 0, hurtlist_1 = hurtlist; _i < hurtlist_1.length; _i++) {
            var eachhurt = hurtlist_1[_i];
            hurtindex++;
            var ae = allentity[eachhurt.id.toString()];
            if (eachhurt.hurt == 0 && eachhurt.effectValue == 0) {
                continue;
            }
            if (!ae || !ae.enabled) {
                continue;
            }
            if (thisObj._showHurt && eachhurt.effectValue != 0 && thisObj.from) {
                var dir = 0;
                if (thisObj.from && thisObj.from.enabled) {
                    if (thisObj.from.x > ae.x) {
                        dir = 1;
                    }
                    else if (thisObj.from.x < ae.x) {
                        dir = 2;
                    }
                }
                var btype = 0;
                // if(!thisObj.from || ae.group == GroupType.SELF){
                // 	btype = 0;
                // }else{
                // 	// if(thisObj.from.group == GroupType.SELF)
                // 	// {
                // 	// 	ae.beHurt();
                // 	// }
                // 	if(thisObj.from.type == EntityType.MINION){
                // 		btype = 3;
                // 	}else if(thisObj.from.fighterObject.career == constants.E_Career.WARRIOR){
                // 		btype = 1;
                // 	}else if(thisObj.from.fighterObject.career == constants.E_Career.MAGE){
                // 		btype = 2;
                // 	}else if(thisObj.from.fighterObject.career == constants.E_Career.TAOIST){
                // 		btype = 3;
                // 	}
                // }
                if ((thisObj._attantion || ae.group == 1 /* SELF */) && ((eachhurt.plus == 3 && hurtindex <= 3) || eachhurt.plus != 3)) //连击只显示3个搞笑把
                 {
                    ae.showBloodEffect(eachhurt.effectValue, dir, btype, eachhurt.plus, hurtindex);
                }
            }
            ae.a_delayhp += eachhurt.hurt; //这个还是要再算一次的把，延迟不一样呀
            ae.a_delayhp = ae.a_delayhp < 0 ? 0 : ae.a_delayhp;
            if (eachhurt.hurt != 0) {
                ae.setBlood(ae.a_delayhp, ae.a_maxHp, true);
                // if(ae.type == EntityType.MONSTER)
                // {
                // 	GameData.instance.sendNotif(constants.E_DATA_NOTIFY_UIVIEW.UPDATE_HEAD,ae.gameObject);
                // }
            }
            if (ae.a_delayhp == 0 && ae.a_isDead) //fighterObject.delayhp <= 0 || 
             {
                // if(!gd.map.arpg){
                // 	if(ae.gameObject.type == EntityType.PLAYER && ae.gameObject.group == GroupType.SELF)
                // 	{
                // 		if(ae.animal)
                // 		{
                // 			ae.animal.visible = false;//是不是会出现模型池问题
                // 		}
                // 		ae._entityInfo.visible = false;
                // 		return;
                // 	}
                // }
                ae.changeFSMState(EntityDeadFsm_1.EntityDeadFsm.Instance);
            }
        }
    };
    SkillBase.prototype.dispose = function () {
        var thisObj = this;
        thisObj.enabled = false;
        thisObj.targetEffect = undefined;
        thisObj.from = undefined;
        thisObj.target = undefined;
        thisObj.isLj = false;
        thisObj.targetX = undefined;
        thisObj.targetY = undefined;
        thisObj.skillid = undefined;
        if (thisObj.hurtList) {
            for (var _i = 0, _a = thisObj.hurtList; _i < _a.length; _i++) {
                var hurt = _a[_i];
                hurt.dispose();
            }
            thisObj.hurtList = null;
        }
        SkillManager_1.SkillManager.Instance.returnSkill(this);
    };
    return SkillBase;
}());
exports.SkillBase = SkillBase;
var NormalHurtSkill = /** @class */ (function (_super) {
    __extends(NormalHurtSkill, _super);
    function NormalHurtSkill() {
        var _this = _super.call(this) || this;
        _this.type = 1 /* NORMAL */;
        return _this;
    }
    return NormalHurtSkill;
}(SkillBase));
exports.NormalHurtSkill = NormalHurtSkill;
var SkillResult = /** @class */ (function () {
    function SkillResult() {
    }
    return SkillResult;
}());
exports.SkillResult = SkillResult;
var SkillHurt = /** @class */ (function () {
    function SkillHurt() {
    }
    SkillHurt.create = function (id, hurt, effectValue, plus, inner) {
        if (inner === void 0) { inner = 0; }
        var skillHurt = this.pool.pop();
        skillHurt.id = id;
        skillHurt.hurt = hurt;
        skillHurt.effectValue = effectValue;
        skillHurt.plus = plus;
        skillHurt.inner = inner;
        return skillHurt;
    };
    SkillHurt.prototype.dispose = function () {
        if (this.id) {
            SkillHurt.pool.push(this);
            this.id = null;
        }
    };
    SkillHurt.prototype.disposePermanent = function () {
    };
    SkillHurt.prototype.returnToPool = function () {
    };
    SkillHurt.pool = new Utils_1.LimitedPool(SkillHurt, 100);
    return SkillHurt;
}());
exports.SkillHurt = SkillHurt;
var SKillBuffAdd = /** @class */ (function () {
    function SKillBuffAdd() {
    }
    return SKillBuffAdd;
}());
exports.SKillBuffAdd = SKillBuffAdd;
},{"../../../config/ConfigManager":43,"../../../data/GameTime":45,"../../../utils/Utils":58,"../BuffManager":12,"../SkillManager":17,"../entity/EntityManager":23,"../fsm/EntityDeadFsm":30}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameUtils_1 = require("../util/GameUtils");
var Tween = /** @class */ (function () {
    function Tween(tweenAble, speed) {
        if (tweenAble === void 0) { tweenAble = null; }
        if (speed === void 0) { speed = 5; }
        this._lasttime = 0;
        this.enabled = true;
        this._tweenAble = tweenAble;
        this.speed = speed;
        this._moveIncrement = [];
    }
    Object.defineProperty(Tween.prototype, "end", {
        get: function () {
            return this._end;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tween.prototype, "tweenAble", {
        get: function () {
            return this._tweenAble;
        },
        set: function (value) {
            this._tweenAble = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 动态修改平移速度
     * @param speed 速度值
     *
     */
    Tween.prototype.setSpeed = function (speed) {
        if (this.enabled) {
            this.speed = speed;
            GameUtils_1.Vector2Extension.moveIncrementByPoint(this._moveIncrement, this._start, this._end, this.speed);
        }
    };
    Tween.prototype.initialize = function () {
        this.enabled = false;
    };
    /** 开始移动 */
    Tween.prototype.move = function (end) {
        this.resetTween();
        // 最终必须移动到的点。坐标取整后也要移动到得点
        this._movePoint = [this._tweenAble.x, this._tweenAble.z];
        // 获取下一格的目标点
        this._start = [this._tweenAble.x, this._tweenAble.z];
        this._end = end;
        this._direction = GameUtils_1.Vector2Extension.directionByTan(this._start[0], this._start[1], this._end[0], this._end[1]); // 方向
        GameUtils_1.Vector2Extension.moveIncrementByPoint(this._moveIncrement, this._start, this._end, this.speed);
        this._betweenDistance = GameUtils_1.Vector2Extension.distanceOfPoint(this._start, this._end); // 两点距离
        this.enabled = true;
        // 开始移动
        if (this.moveBegin != null) {
            this.moveBegin(this._direction);
        }
    };
    /** 平滑移动动画逻辑更新 */
    Tween.prototype.updateTime = function (gameTime) {
        var frame = gameTime.elapsedGameTime / (1000 / 60);
        if (frame > 6) { //这是什么情况。。。这么卡？
            frame = 6;
        }
        //计算移动组件此次移动的坐标点
        this._moveDistance += this.speed * frame;
        this._movePoint[0] += this._moveIncrement[0] * frame;
        this._movePoint[1] += this._moveIncrement[1] * frame;
        //移动完成
        if (this.enabled && (this._moveDistance >= this._betweenDistance || this._tweenAble.endNow)) {
            if (!this._tweenAble.moveNext) {
                this._movePoint[0] = this._end[0];
                this._movePoint[1] = this._end[1];
            }
            this._tweenAble.setHorizontalPosition(this._movePoint[0], this._movePoint[1]);
            this.enabled = false;
            this.resetTween();
            if (this.moveComplete != null) {
                this.moveComplete(this._tweenAble, gameTime.totalGameTime);
            }
        }
        else {
            this._tweenAble.setHorizontalPosition(this._movePoint[0], this._movePoint[1]);
            if (this.moveStep != null) {
                this.moveStep();
            }
        }
    };
    Tween.prototype.resetTween = function () {
        this.enabled = false;
        this._moveDistance = 0;
        this._betweenDistance = 0;
        this._moveIncrement = [];
        this._movePoint = null;
        this._start = null;
        this._end = null;
    };
    Tween.prototype.stop = function () {
        this.resetTween();
    };
    Tween.prototype.dispose = function () {
        this.moveBegin = null;
        this.moveStep = null;
        this.moveComplete = null;
        this._moveIncrement = null;
        this._movePoint = null;
        this._start = null;
        this._end = null;
        this._tweenAble = null;
        this.speed = NaN; // 移动速度	
        this._betweenDistance = NaN; // 两点之间的距离
        this._moveDistance = NaN; // 已移动了的距离
    };
    return Tween;
}());
exports.Tween = Tween;
// class test implements ITweenAble{
// 	get moveNext():boolean{return false;}
// 		get uniform():boolean{return false;}
// 		get endNow():boolean{return false;}
// 		get x() : number{return 1;}
// 		set x(value : number) {}
// 		get y() : number{return 1;}
// 		set y(value : number){}
// }
},{"../util/GameUtils":41}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BitmapPool = /** @class */ (function () {
    function BitmapPool() {
    }
    BitmapPool.createBp = function (res) {
        var obj = this.bpPool.length > 0 ? this.bpPool.pop() : new Laya.Sprite();
        if (res) {
            obj.texture = res;
        }
        obj.width = obj.height = NaN;
        obj.x = obj.y = 0;
        obj.scaleX = obj.scaleY = 1;
        return obj;
    };
    BitmapPool.pushBp = function (obj) {
        if (this.bpPool.length < 100) {
            this.bpPool.push(obj);
        }
    };
    BitmapPool.bpPool = [];
    return BitmapPool;
}());
exports.default = BitmapPool;
},{}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameDefine_1 = require("../GameDefine");
var IDProvider = /** @class */ (function () {
    function IDProvider() {
    }
    IDProvider.getEntityInsID = function () {
        return ++this.__entityId;
    };
    IDProvider.getEffectInsID = function () {
        this.__effectId++;
        return this.__effectId;
    };
    IDProvider.getSkillInsID = function () {
        this.__skillId++;
        return this.__skillId;
    };
    IDProvider.getCardInsID = function () {
        this.__cardId++;
        return this.__cardId;
    };
    IDProvider.__entityId = 0;
    IDProvider.__effectId = 0;
    IDProvider.__skillId = 0;
    IDProvider.__cardId = 0;
    return IDProvider;
}());
exports.IDProvider = IDProvider;
/*
* name;
*/
var GameUtils = /** @class */ (function () {
    function GameUtils() {
    }
    GameUtils.setQuaternion = function (sp, q2) {
        var q1 = sp.transform.localRotation;
        q1.elements[0] = q2.elements[0];
        q1.elements[1] = q2.elements[1];
        q1.elements[2] = q2.elements[2];
        q1.elements[3] = q2.elements[3];
        sp.transform.localRotation = q1;
    };
    //工具函数GSToGC.Dir转Vector3
    GameUtils.ConvertDirToVector3 = function (angle) {
        angle = angle / 180 * Math.PI;
        return new Laya.Vector3(Math.cos(angle), 0, Math.sin(angle));
    };
    GameUtils.Vector3Temp = new Laya.Vector3(0, 0, 0);
    GameUtils.Vector3Temp2 = new Laya.Vector3(0, 0, 0);
    GameUtils.Vector3Temp3 = new Laya.Vector3(0, 0, 0);
    GameUtils.Vector3UpTemp = new Laya.Vector3(0, 1, 0);
    GameUtils.tempQuaternion = new Laya.Quaternion(0, 0, 0, 0);
    return GameUtils;
}());
exports.GameUtils = GameUtils;
var Vector2Extension = /** @class */ (function () {
    function Vector2Extension() {
    }
    /**
     * 转向物体 方向
     * @param start 目标点
     * @param end   旋转对象
     *
     */
    Vector2Extension.orientation = function (start, end) {
        var dx = end[0] - start[0];
        var dy = end[1] - start[1];
        var r = Math.atan2(dy, dx) * 180 / Math.PI;
        return r;
    };
    /**
     * 击飞效果（绝对坐标点）
     *
     */
    Vector2Extension.blowFlyEffects = function (x1, y1, x2, y2, distance) {
        var radians = Math.atan((y2 - y1) / (x2 - x1));
        var degrees = radians * 180 / Math.PI;
        var xFlag = x1 > x2 ? -1 : 1;
        var yFlag = y1 > y2 ? -1 : 1;
        var x3 = Math.abs(Math.cos(degrees * Math.PI / 180)) * distance * xFlag + x2;
        var y3 = Math.abs(Math.sin(degrees * Math.PI / 180)) * distance * yFlag + y2;
        if (x1 == x2) {
            x3 = x2;
            y3 = distance * yFlag + y2;
        }
        if (y1 == y2) {
            x3 = distance * xFlag + x2;
            y3 = y2;
        }
        return [x3, y3];
    };
    /**
     * 移动增量计算（以步长折分）
     * @param startPoint 起点
     * @param endPoint   终点
     * @param stepLength 每步步长
     */
    Vector2Extension.moveIncrement = function (startPoint, endPoint, step) {
        var seDistance = Vector2Extension.distanceOfPoint(startPoint, endPoint); // startPoint 到 endPoint 的距离
        var scaleStepLength = step / seDistance;
        var x = (endPoint[0] - startPoint[0]) * scaleStepLength;
        var y = (endPoint[1] - startPoint[1]) * scaleStepLength;
        return [x, y];
    };
    /**
     * 移动增量计算（以步长折分）
     * @param startPoint 起点
     * @param endPoint   终点
     * @param stepLength 每步步长
     */
    Vector2Extension.moveIncrementByPoint = function (movePoint, startPoint, endPoint, step) {
        var seDistance = Vector2Extension.distanceOfPoint(startPoint, endPoint); // startPoint 到 endPoint 的距离
        var scaleStepLength = step / seDistance;
        var x = (endPoint[0] - startPoint[0]) * scaleStepLength;
        var y = (endPoint[1] - startPoint[1]) * scaleStepLength;
        movePoint[0] = x;
        movePoint[1] = y;
    };
    /**
     * 移动A*格距离计算
     * @param startPoint 起点
     * @param endPoint   终点
     * @param stepLength 移动长度
     */
    Vector2Extension.moveDistance = function (startPoint, endPoint, stepLength) {
        var seDistance = Vector2Extension.distanceOfPoint(startPoint, endPoint); // startPoint 到 endPoint 的距离
        var scaleStepLength = stepLength / seDistance;
        var x = Math.floor(startPoint[0] + (endPoint[0] - startPoint[0]) * scaleStepLength);
        var y = Math.floor(startPoint[1] + (endPoint[1] - startPoint[1]) * scaleStepLength);
        return [x, y];
    };
    /**
     * 通过正切值获取向量朝向代号（方向代码和小键盘的数字布局一样-8：上、４：左、６：右、２：下等）
     * @param currentPoint  当前点
     * @param targetPoint   目标点
     */
    Vector2Extension.directionPointByTan = function (currentPoint, targetPoint) {
        return Vector2Extension.directionByTan(currentPoint[0], currentPoint[1], targetPoint[0], targetPoint[1]);
    };
    Vector2Extension.distanceOfPoint = function (p, p2) {
        var xx = p[0] - p2[0];
        var yy = p[1] - p2[1];
        return Math.sqrt(xx * xx + yy * yy);
    };
    /**
     * 通过正切值获取向量朝向代号（方向代码和小键盘的数字布局一样-８：上、４：左、６：右、２：下等）
     * @param targetX  目标点的X值
     * @param targetY  目标点的Y值
     * @param currentX 当前点的X值
     * @param currentY 当前点的Y值
     */
    Vector2Extension.directionByTan = function (currentX, currentY, targetX, targetY) {
        var tan = (targetY - currentY) / (targetX - currentX);
        if (Math.abs(tan) >= Math.tan(Math.PI * 3 / 8) && targetY <= currentY) {
            return 8;
        }
        else if (Math.abs(tan) > Math.tan(Math.PI / 8) && Math.abs(tan) < Math.tan(Math.PI * 3 / 8) && targetX > currentX && targetY < currentY) {
            return 9;
        }
        else if (Math.abs(tan) <= Math.tan(Math.PI / 8) && targetX >= currentX) {
            return 6;
        }
        else if (Math.abs(tan) > Math.tan(Math.PI / 8) && Math.abs(tan) < Math.tan(Math.PI * 3 / 8) && targetX > currentX && targetY > currentY) {
            return 3;
        }
        else if (Math.abs(tan) >= Math.tan(Math.PI * 3 / 8) && targetY >= currentY) {
            return 2;
        }
        else if (Math.abs(tan) > Math.tan(Math.PI / 8) && Math.abs(tan) < Math.tan(Math.PI * 3 / 8) && targetX < currentX && targetY > currentY) {
            return 1;
        }
        else if (Math.abs(tan) <= Math.tan(Math.PI / 8) && targetX <= currentX) {
            return 4;
        }
        else if (Math.abs(tan) > Math.tan(Math.PI / 8) && Math.abs(tan) < Math.tan(Math.PI * 3 / 8) && targetX < currentX && targetY < currentY) {
            return 7;
        }
        else {
            return Vector2Extension.RandomExtract([1, 2, 3, 4, 6, 7, 8, 9]); // 两点为同一点时，随机返回一个方向
        }
    };
    /**
     * 从参数ary（数组）中随机返回一个 数组项
     * 例如 var array:Array = new Array(4,5,6)
     * 返回 5或者6或者4
     */
    Vector2Extension.RandomExtract = function (ary) {
        return (ary[Math.floor(Math.random() * ary.length)]);
    };
    return Vector2Extension;
}());
exports.Vector2Extension = Vector2Extension;
var DirectionUtil = /** @class */ (function () {
    function DirectionUtil() {
    }
    /**
     * 根据起始点跟目标点获取方向
     */
    DirectionUtil.getForwardByPoints = function (fx, fy, tox, toy) {
        var nx = tox - fx;
        var ny = toy - fy;
        var todir = 0;
        var r = Math.sqrt(nx * nx + ny * ny);
        var cos = nx / r;
        var angle = Math.floor(Math.acos(cos) * 180 / Math.PI);
        if (ny < 0) {
            angle = 360 - angle;
        }
        if (angle > 337 || angle < 23) {
            todir = GameDefine_1.DirectionType.RIGHT;
        }
        else if (angle > 292) {
            todir = GameDefine_1.DirectionType.RIGHT_UP;
        }
        else if (angle > 247) {
            todir = GameDefine_1.DirectionType.UP;
        }
        else if (angle > 202) {
            todir = GameDefine_1.DirectionType.LEFT_UP;
        }
        else if (angle > 157) {
            todir = GameDefine_1.DirectionType.LEFT;
        }
        else if (angle > 112) {
            todir = GameDefine_1.DirectionType.LEFT_DOWN;
        }
        else if (angle > 67) {
            todir = GameDefine_1.DirectionType.DOWN;
        }
        else {
            todir = GameDefine_1.DirectionType.RIGHT_DOWN;
        }
        return todir;
    };
    DirectionUtil.getRotateByDir = function (dir) {
        var rotate;
        switch (dir) {
            case GameDefine_1.DirectionType.UP:
                rotate = 0;
                break;
            case GameDefine_1.DirectionType.RIGHT_UP:
                rotate = 56 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.RIGHT:
                rotate = 90 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.RIGHT_DOWN:
                rotate = 124 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.DOWN:
                rotate = 180 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.LEFT_DOWN:
                rotate = 236 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.LEFT:
                rotate = 270 / 180 * Math.PI;
                break;
            case GameDefine_1.DirectionType.LEFT_UP:
                rotate = 304 / 180 * Math.PI;
                break;
        }
        return rotate;
    };
    DirectionUtil.getRotateByDir2 = function (dir) {
        var rotate;
        switch (dir) {
            case GameDefine_1.DirectionType.UP:
                rotate = 180;
                break;
            case GameDefine_1.DirectionType.RIGHT_UP:
                rotate = -124;
                break;
            case GameDefine_1.DirectionType.RIGHT:
                rotate = -90;
                break;
            case GameDefine_1.DirectionType.RIGHT_DOWN:
                rotate = -56;
                break;
            case GameDefine_1.DirectionType.DOWN:
                rotate = 0;
                break;
            case GameDefine_1.DirectionType.LEFT_DOWN:
                rotate = 56;
                break;
            case GameDefine_1.DirectionType.LEFT:
                rotate = 90;
                break;
            case GameDefine_1.DirectionType.LEFT_UP:
                rotate = 124;
                break;
        }
        return rotate;
    };
    /**
     * 根据起始点跟目标点获取方向
     */
    DirectionUtil.getForwardByGridXY = function (fx, fy, tox, toy) {
        var todir = 0;
        var hor = tox - fx;
        var ver = toy - fy;
        todir = DirectionUtil.getDir(hor, ver);
        return todir;
    };
    /**
     * 根据速度确定方向
     */
    DirectionUtil.getDir = function (hor, ver) {
        var dir = 0;
        if (hor > 0) { //右
            if (ver < 0) //上
                dir = GameDefine_1.DirectionType.RIGHT_UP;
            else if (ver > 0)
                dir = GameDefine_1.DirectionType.RIGHT_DOWN;
            else
                dir = GameDefine_1.DirectionType.RIGHT;
        }
        else if (hor < 0) { //左
            if (ver < 0) //上
                dir = GameDefine_1.DirectionType.LEFT_UP;
            else if (ver > 0)
                dir = GameDefine_1.DirectionType.LEFT_DOWN;
            else
                dir = GameDefine_1.DirectionType.LEFT;
        }
        else {
            if (ver < 0)
                dir = GameDefine_1.DirectionType.UP;
            else
                dir = GameDefine_1.DirectionType.DOWN;
        }
        return dir;
    };
    /**
     * 根据给出的方向获得从近到远的方向集合
     */
    DirectionUtil.getNearDirs = function (curDir) {
        var i = 0;
        var dirs = GameDefine_1.DirectionType.EIGHT_DIRS;
        var result = [];
        for (var j = 0; j < 8; j++) {
            if (dirs[j] == curDir) {
                i = j;
                break;
            }
        }
        for (var k = 1; k <= 4; k++) {
            if (dirs[i + k] != null) {
                result.push(dirs[i + k]);
            }
            else {
                result.push(dirs[i + k - 8]);
            }
            if (k == 4) {
                break;
            }
            if (dirs[i - k] != null) {
                result.push(dirs[i - k]);
            }
            else {
                result.push(dirs[i - k + 8]);
            }
        }
        return result;
    };
    DirectionUtil.addNode = function (x, y, dir, count) {
        if (count === void 0) { count = 1; }
        var p = [x, y];
        switch (dir) {
            case GameDefine_1.DirectionType.UP:
                p[0] = p[1] - count;
                break;
            case GameDefine_1.DirectionType.RIGHT_UP:
                p[1] = p[1] - count;
                p[0] = p[0] + count;
                break;
            case GameDefine_1.DirectionType.RIGHT:
                p[0] = p[0] + count;
                break;
            case GameDefine_1.DirectionType.RIGHT_DOWN:
                p[1] = p[1] + count;
                p[0] = p[0] + count;
                break;
            case GameDefine_1.DirectionType.DOWN:
                p[1] = p[1] + count;
                break;
            case GameDefine_1.DirectionType.LEFT_DOWN:
                p[1] = p[1] + count;
                p[0] = p[0] - count;
                break;
            case GameDefine_1.DirectionType.LEFT:
                p[0] = p[0] - count;
                break;
            case GameDefine_1.DirectionType.LEFT_UP:
                p[1] = p[1] - count;
                p[0] = p[0] - count;
                break;
        }
        return p;
    };
    DirectionUtil.addDir = function (dir, add) {
        add = add % 8;
        if (add < 0) {
            add = 8 + add;
        }
        var tdir = dir + add;
        if (tdir > 7)
            tdir = tdir - 8;
        return tdir;
    };
    /**
     * 只获取垂直方向的方向
     */
    DirectionUtil.getVecDir = function (dir) {
        switch (dir) {
            case GameDefine_1.DirectionType.UP:
            case GameDefine_1.DirectionType.RIGHT_UP:
            case GameDefine_1.DirectionType.LEFT_UP:
                return GameDefine_1.DirectionType.UP;
            case GameDefine_1.DirectionType.RIGHT_DOWN:
            case GameDefine_1.DirectionType.DOWN:
            case GameDefine_1.DirectionType.LEFT_DOWN:
                return GameDefine_1.DirectionType.DOWN;
        }
        return -1;
    };
    /**
     * 只获取水平方向的方向
     */
    DirectionUtil.getHorDir = function (dir) {
        switch (dir) {
            case GameDefine_1.DirectionType.RIGHT_UP:
            case GameDefine_1.DirectionType.RIGHT:
            case GameDefine_1.DirectionType.RIGHT_DOWN:
                return GameDefine_1.DirectionType.RIGHT;
            case GameDefine_1.DirectionType.LEFT_DOWN:
            case GameDefine_1.DirectionType.LEFT:
            case GameDefine_1.DirectionType.LEFT_UP:
                return GameDefine_1.DirectionType.LEFT;
        }
        return -1;
    };
    DirectionUtil.orientation = function (fx, fy, ex, ey) {
        var dx = ex - fx;
        var dy = ey - fy;
        var r = Math.atan2(dy, dx) * 180 / Math.PI;
        return r;
    };
    return DirectionUtil;
}());
exports.DirectionUtil = DirectionUtil;
},{"../GameDefine":14}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConfigManager_1 = require("../../../config/ConfigManager");
var ResDisposer = /** @class */ (function () {
    function ResDisposer() {
        this._references = {};
    }
    /**
     * addRef
     */
    ResDisposer.prototype.addRefByObjId = function (id) {
        var obj = ConfigManager_1.ConfigManager.Instance.obj["model_" + id];
        if (obj) {
            for (var _i = 0, _a = obj.allRes; _i < _a.length; _i++) {
                var url = _a[_i];
                //根据资源路径获取资源
                this.addRef(url);
            }
            this.addRef(obj.url);
        }
    };
    ResDisposer.prototype.removeRefByObjId = function (id) {
        var obj = ConfigManager_1.ConfigManager.Instance.obj["model_" + id];
        if (obj) {
            this.removeRef(obj.url);
            for (var _i = 0, _a = obj.allRes; _i < _a.length; _i++) {
                var url = _a[_i];
                //根据资源路径获取资源
                this.removeRef(url);
            }
        }
    };
    ResDisposer.prototype.checkRef = function (id) {
        var obj = ConfigManager_1.ConfigManager.Instance.obj["model_" + id];
        if (obj) {
            for (var _i = 0, _a = obj.allRes; _i < _a.length; _i++) {
                var url = _a[_i];
                //根据资源路径获取资源
                if (this._references[url] <= 0) {
                    this.disposeRes(url);
                }
            }
            this.disposeRes(obj.url);
        }
    };
    ResDisposer.prototype.disposeRes = function (url) {
        //根据资源路径获取资源
        var resource = Laya.loader.getRes(url);
        //非空
        if (resource) {
            resource.destroy();
            if (resource.releaseResource)
                resource.releaseResource(true);
            Laya.loader.clearRes(url);
        }
        else {
            Laya.loader.cancelLoadByUrl(url);
        }
    };
    ResDisposer.prototype.addRef = function (url) {
        if (this._references[url] == null) {
            this._references[url] = 1;
        }
        else {
            this._references[url]++;
        }
    };
    ResDisposer.prototype.removeRef = function (url) {
        if (this._references[url]) {
            this._references[url]--;
            if (this._references[url] <= 0) {
                this.disposeRes(url);
            }
        }
    };
    ResDisposer.Instance = new ResDisposer();
    return ResDisposer;
}());
exports.ResDisposer = ResDisposer;
},{"../../../config/ConfigManager":43}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConfigManager = /** @class */ (function () {
    function ConfigManager() {
        this.skill = {};
        this.skillCondition = {};
        this.card = {};
        this.skillEffects = {};
        this.bufferEffects = {};
        this.buff = {};
        this.monsterSkill = {};
        this.monster = {};
        this.level = {};
    }
    ConfigManager.prototype.loadConfig = function (callback) {
        this.tables = [
            { url: "config/cfg_card.csv", item: this.card, cls: CardConfig, reader: this.setConf },
            { url: "config/cfg_buff.csv", item: this.buff, cls: BuffConfig, reader: this.setConf },
            { url: "config/cfg_skill_effects.csv", item: this.skillEffects, cls: SkillEffectConfig, reader: this.addSkillEffect },
            { url: "config/cfg_skills.csv", item: this.skill, cls: SkillConfig, reader: this.setConf },
            { url: "config/cfg_skills_condition.csv", item: this.skillCondition, cls: SkillConditionConfig, reader: this.addSkillCondition },
            { url: "config/cfg_monsters.csv", item: this.monster, cls: MonsterConfig, reader: this.setConf },
            { url: "config/cfg_monster_skill.csv", item: this.monsterSkill, cls: MonsterSkillConfig, reader: this.addMonsterSkill },
            { url: "config/map.json", type: "json", item: "map" },
            { url: "config/obj.json", type: "json", item: "obj" }
        ];
        var tablesUrl = [];
        this.tables.forEach(function (element) {
            var type = element.type == "json" ? Laya.Loader.JSON : Laya.Loader.TEXT;
            tablesUrl.push({ url: element.url, type: type });
        });
        Laya.loader.create(tablesUrl, Laya.Handler.create(this, this.configLoaded, [callback]), null);
    };
    ConfigManager.prototype.configLoaded = function (callback) {
        var _this = this;
        this.tables.forEach(function (element) {
            var str = Laya.loader.getRes(element.url);
            if (element.type == "json") {
                _this[element.item] = str;
            }
            else
                element.reader.call(_this, str, element.cls, element.item);
        });
        if (callback) {
            callback();
        }
    };
    ConfigManager.prototype.addMonsterSkill = function (content, configs, con) {
        var contents = [];
        var columns;
        var types;
        var lines = content.split("\r\n");
        var noUseLine = 1;
        while (noUseLine > 0) {
            noUseLine--;
            lines.shift();
        }
        var line0 = lines[0];
        var line1 = lines[1];
        columns = line1.trim().split(",");
        line1;
        types = line0.trim().split(",");
        var columnsCount = columns.length;
        var row = null;
        for (var i = 2; i < lines.length; i++) {
            var line = lines[i];
            if (line) {
                row = line.trim().split(',');
                contents.push(row);
            }
        }
        for (var i = 0; i < contents.length; i++) {
            var line = contents[i];
            var config = new configs();
            for (var j = 0; j < columns.length; j++) {
                var key = columns[j];
                var type = types[j];
                if (type == "str") {
                    config[key] = line[j];
                }
                else if (type != "")
                    config[key] = Number(line[j]);
            }
            con[config["monsterId"]] = config;
            config.skillId = this.splitNumber(config.skillId, "#");
            config.skillLevel = this.splitNumber(config.skillLevel, "#");
            config.hpPercentMax = this.splitNumber(config.hpPercentMax, "#");
            config.hpPercentMin = this.splitNumber(config.hpPercentMin, "#");
            config.priority = this.splitNumber(config.priority, "#");
        }
    };
    ConfigManager.prototype.setConf = function (content, configs, con) {
        var contents = [];
        var columns;
        var types;
        var lines = content.split("\r\n");
        var noUseLine = 1;
        while (noUseLine > 0) {
            noUseLine--;
            lines.shift();
        }
        var line0 = lines[0];
        var line1 = lines[1];
        columns = line1.trim().split(",");
        line1;
        types = line0.trim().split(",");
        var columnsCount = columns.length;
        var row = null;
        for (var i = 2; i < lines.length; i++) {
            var line = lines[i];
            if (line) {
                row = line.trim().split(',');
                contents.push(row);
            }
        }
        for (var i = 0; i < contents.length; i++) {
            var line = contents[i];
            var config = new configs();
            for (var j = 0; j < columns.length; j++) {
                var key = columns[j];
                var type = types[j];
                if (type == "str") {
                    config[key] = line[j];
                }
                else if (type != "")
                    config[key] = Number(line[j]);
            }
            con[config["id"]] = config;
        }
    };
    ConfigManager.prototype.addSkillCondition = function (content, configs, con) {
        var contents = [];
        var columns;
        var types;
        var lines = content.split("\r\n");
        var noUseLine = 1;
        while (noUseLine > 0) {
            noUseLine--;
            lines.shift();
        }
        var line0 = lines[0];
        var line1 = lines[1];
        columns = line1.trim().split(",");
        line1;
        types = line0.trim().split(",");
        var columnsCount = columns.length;
        var row = null;
        for (var i = 2; i < lines.length; i++) {
            var line = lines[i];
            if (line) {
                row = line.trim().split(',');
                contents.push(row);
            }
        }
        for (var i = 0; i < contents.length; i++) {
            var line = contents[i];
            var config = new configs();
            for (var j = 0; j < columns.length; j++) {
                var key = columns[j];
                var type = types[j];
                if (type == "str") {
                    config[key] = line[j];
                }
                else
                    config[key] = Number(line[j]);
            }
            // con[config["id"]] = config;
            var sc = this.skillCondition;
            if (!(config.skillid in sc)) {
                sc[config.skillid] = {};
            }
            sc[config.skillid][config.level] = config;
        }
    };
    ConfigManager.prototype.splitNumber = function (value, separator, limit) {
        var arr = value.split(separator, limit);
        var arr2 = [];
        for (var i = 0, len = arr.length; i < len; i++) {
            arr2[i] = parseFloat(arr[i]);
        }
        return arr2;
    };
    ConfigManager.prototype.addSkillEffect = function (content, configs, con) {
        var contents = [];
        var columns;
        var types;
        var lines = content.split("\r\n");
        var noUseLine = 1;
        while (noUseLine > 0) {
            noUseLine--;
            lines.shift();
        }
        var line0 = lines[0];
        var line1 = lines[1];
        columns = line1.trim().split(",");
        line1;
        types = line0.trim().split(",");
        var columnsCount = columns.length;
        var row = null;
        for (var i = 2; i < lines.length; i++) {
            var line = lines[i];
            if (line) {
                row = line.trim().split(',');
                contents.push(row);
            }
        }
        for (var i = 0; i < contents.length; i++) {
            var line = contents[i];
            var config = new configs();
            for (var j = 0; j < columns.length; j++) {
                var key = columns[j];
                var type = types[j];
                if (type == "str") {
                    config[key] = line[j];
                }
                else
                    config[key] = Number(line[j]);
            }
            // con[config["id"]] = config;
            var skillEffects = this.skillEffects;
            var bufferEffects = this.bufferEffects;
            if (config.efftype == 0) {
                if (!(config.skillid in skillEffects)) {
                    skillEffects[config.skillid] = [];
                }
                skillEffects[config.skillid].push(config);
            }
            else if (config.efftype == 1) {
                if (!(config.skillid in bufferEffects)) {
                    bufferEffects[config.skillid] = [];
                }
                bufferEffects[config.skillid].push(config);
            }
        }
    };
    ConfigManager.Instance = new ConfigManager();
    return ConfigManager;
}());
exports.ConfigManager = ConfigManager;
var SkillEffectConfig = /** @class */ (function () {
    function SkillEffectConfig() {
    }
    return SkillEffectConfig;
}());
exports.SkillEffectConfig = SkillEffectConfig;
var CardConfig = /** @class */ (function () {
    function CardConfig() {
    }
    return CardConfig;
}());
exports.CardConfig = CardConfig;
var RoleConfig = /** @class */ (function () {
    function RoleConfig() {
    }
    return RoleConfig;
}());
exports.RoleConfig = RoleConfig;
var SkillConfig = /** @class */ (function () {
    function SkillConfig() {
    }
    return SkillConfig;
}());
exports.SkillConfig = SkillConfig;
var SkillConditionConfig = /** @class */ (function () {
    function SkillConditionConfig() {
    }
    return SkillConditionConfig;
}());
exports.SkillConditionConfig = SkillConditionConfig;
//id,name,trigger,bufferType,probability,parameter,show,type,overLying,replace,extraParam,duration,cd,cdTime,icon,buffName,txt,buffeffect
var BuffConfig = /** @class */ (function () {
    function BuffConfig() {
    }
    return BuffConfig;
}());
exports.BuffConfig = BuffConfig;
// id,type,name,level,hpshow,head,model,hp,fixHurt,att,phyDef,magicDef,bloodY,scale,canRepel,aitype,heart
var MonsterConfig = /** @class */ (function () {
    function MonsterConfig() {
    }
    return MonsterConfig;
}());
exports.MonsterConfig = MonsterConfig;
var MonsterSkillConfig = /** @class */ (function () {
    function MonsterSkillConfig() {
    }
    return MonsterSkillConfig;
}());
exports.MonsterSkillConfig = MonsterSkillConfig;
},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConfigManager_1 = require("../config/ConfigManager");
var Pool_1 = require("../utils/Pool");
var GameUtils_1 = require("../battle/core/util/GameUtils");
var Utils_1 = require("../utils/Utils");
var GameData = /** @class */ (function () {
    function GameData() {
        this._observers = [];
        this.result = 1;
        this.myTurn = true;
        /**玩家卡池（当前所拥有的所有卡id） */
        this.playerCardPool = [10001, 10002, 10001, 10002, 10001, 10002, 10001, 10002, 10001, 10001];
        this.mapid = 1;
        this._gameOver = false;
        this._hp = 100; //生命: number
        this._mp = 3; //内力: number
        this._gold = 0;
        /**
         * 0:开始
         * 1：执行中
         * 2：执行结束
         */
        this.oppState = 0;
    }
    GameData.prototype.addObserver = function (observer) {
        if (this._observers.indexOf(observer) == -1) {
            this._observers.push(observer);
        }
    };
    GameData.prototype.removeObserver = function (observer) {
        var index = this._observers.indexOf(observer);
        if (index > -1) {
            this._observers.splice(index, 1);
        }
    };
    GameData.prototype.sendNotif = function (cmd, data) {
        for (var _i = 0, _a = this._observers; _i < _a.length; _i++) {
            var ob = _a[_i];
            ob.updateData(cmd, data);
        }
    };
    GameData.prototype.gameOver = function () {
        this._gameOver = true;
        this.sendNotif(8 /* GAME_OVER */);
    };
    GameData.prototype.win = function () {
        this.rewards = { cards: [10001, 10002, 10003], gold: 100 };
        this.sendNotif(9 /* LEVEL_COMPLETE */, this.rewards);
    };
    GameData.prototype.clearCardArray = function (arr) {
        while (arr.length > 0) {
            var card = arr.pop();
            card.returnToPool();
        }
    };
    /**
     * 准备卡组
     */
    GameData.prototype.prepareCardPile = function () {
        //打乱我的牌并放入发牌堆
        if (!this.cardPile) {
            this.cardPile = [];
        }
        if (!this.handCards) {
            this.handCards = [];
        }
        if (!this.discardCards) {
            this.discardCards = [];
        }
        if (!this.destroyCards) {
            this.destroyCards = [];
        }
        var mycards = Utils_1.utils.shuffleClone(this.playerCardPool);
        for (var index = 0; index < mycards.length; index++) {
            var element = mycards[index];
            var card = CardIns.create();
            card.config = ConfigManager_1.ConfigManager.Instance.card[element];
            this.cardPile.push(card);
        }
    };
    /**
     * 发牌，从发牌堆里抽5张牌，如果发牌堆里的牌不足，则把弃牌堆（discardCards）里的牌重新洗入发牌堆
     */
    GameData.prototype.drawCards = function () {
        var handCardMax = 5;
        var hand = this.handCards;
        var pile = this.cardPile;
        var discard = this.discardCards;
        while (hand.length < handCardMax) {
            if (pile.length == 0 && discard.length > 0) {
                Utils_1.utils.shuffleClone(discard, pile);
            }
            if (pile.length > 0) {
                hand.push(pile.pop());
            }
            else {
                break;
            }
        }
    };
    /**
     * 回合结束弃掉所有手牌进入弃牌堆discardCards
     */
    GameData.prototype.dropCards = function () {
        while (this.handCards.length > 0) {
            this.discardCards.push(this.handCards.pop());
        }
        this.sendNotif(6 /* HAND_CARD_UPDATE */);
    };
    Object.defineProperty(GameData.prototype, "mp", {
        get: function () {
            return this._mp;
        },
        set: function (value) {
            this._mp = value;
            this.sendNotif(1 /* MP_UPDATE */, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameData.prototype, "hp", {
        get: function () {
            return this._hp;
        },
        set: function (value) {
            this._hp = value;
            this.sendNotif(2 /* HP_UPDATE */, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameData.prototype, "gold", {
        get: function () {
            return this._gold;
        },
        set: function (value) {
            this._gold = value;
            this.sendNotif(3 /* GOLD_UPDATE */, value);
        },
        enumerable: true,
        configurable: true
    });
    GameData.prototype.addHandCard = function (card) {
        this.handCards.push(card);
    };
    GameData.prototype.useHandCard = function (id) {
        for (var index = 0; index < this.handCards.length; index++) {
            var element = this.handCards[index];
            if (element.id == id) {
                this.handCards.splice(index, 1);
                this.discardCards.push(element);
                break;
            }
        }
        if (id == this.selectedCard.id) {
            this.selectedCard = null;
        }
        this.sendNotif(4 /* HAND_CARD_REMOVED */, id);
    };
    GameData.prototype.clearLevel = function () {
        if (this.cardPile) {
            this.clearCardArray(this.cardPile);
        }
        if (this.handCards) {
            this.clearCardArray(this.handCards);
        }
        if (this.discardCards) {
            this.clearCardArray(this.discardCards);
        }
        if (this.destroyCards) {
            this.clearCardArray(this.destroyCards);
        }
        this.sendNotif(6 /* HAND_CARD_UPDATE */);
    };
    //跳转游戏页面时记录游戏成绩
    GameData.instance = new GameData();
    return GameData;
}());
exports.GameData = GameData;
var CardIns = /** @class */ (function () {
    function CardIns() {
        this.level = 1;
    }
    CardIns.create = function () {
        var card = this.pool.pop();
        card.id = GameUtils_1.IDProvider.getCardInsID();
        card.level = 1;
        return card;
    };
    CardIns.prototype.returnToPool = function () {
        CardIns.pool.push(this);
    };
    CardIns.pool = new Pool_1.Pool(CardIns);
    return CardIns;
}());
exports.CardIns = CardIns;
},{"../battle/core/util/GameUtils":41,"../config/ConfigManager":43,"../utils/Pool":57,"../utils/Utils":58}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameTime = /** @class */ (function () {
    function GameTime() {
        /** 上次Update被调用以后的时间 */
        this.elapsedGameTime = 0;
        /** 自游戏开始时到现在的游戏总时间量 */
        this.totalGameTime = 0;
    }
    GameTime.createInstance = function () {
        this.Instance = new GameTime();
    };
    GameTime.prototype.getNow = function () {
        return Date.now() - this.startTime;
    };
    GameTime.prototype.update = function () {
        var now = Date.now() - this.startTime;
        var time = this.totalGameTime;
        this.elapsedGameTime = now - time;
        this.totalGameTime = now;
    };
    return GameTime;
}());
exports.GameTime = GameTime;
},{}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SelectHeroUI_1 = require("./../script/SelectHeroUI");
var GameUI_1 = require("./../script/GameUI");
var BattleScene_1 = require("./../script/BattleScene");
var GameStateManager = /** @class */ (function () {
    function GameStateManager() {
        this.gameState = 0;
    }
    GameStateManager.prototype.changeGameState = function (type) {
        this.gameState = type;
        switch (type) {
            case 1 /* GameLoading */:
                (new GameUI_1.default()).open(true);
                break;
            case 2 /* GameStart */:
                (new SelectHeroUI_1.default()).open(true);
                break;
            case 3 /* GameEnter */:
                (new BattleScene_1.default()).open(true);
                break;
            case 4 /* GameEnd */:
                break;
            case 5 /* GameHple */:
                break;
        }
    };
    return GameStateManager;
}());
exports.GameStateManager = GameStateManager;
},{"./../script/BattleScene":47,"./../script/GameUI":50,"./../script/SelectHeroUI":52}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var BattleUI_1 = require("./BattleUI");
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var BattleManager_1 = require("./../battle/BattleManager");
var GameData_1 = require("../data/GameData");
var WinDialog_1 = require("./WinDialog");
var GameOverDialog_1 = require("./GameOverDialog");
var BattleScene = /** @class */ (function (_super) {
    __extends(BattleScene, _super);
    function BattleScene() {
        return _super.call(this) || this;
    }
    BattleScene.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
        this.battleScene = this.addChild(new Laya.Sprite());
        this.mouseEnabled = true;
        // this.battleScene.mouseEnabled = true;
        this.ui = this.addChild(new BattleUI_1.default);
        BattleManager_1.BattleManager.Instance.init(this.battleScene);
    };
    BattleScene.prototype.updateData = function (cmd, data) {
        switch (cmd) {
            case 8 /* GAME_OVER */:
                {
                    if (!this.gameOverDialog) {
                        this.gameOverDialog = new GameOverDialog_1.GameOverDialog();
                    }
                    this.gameOverDialog.show(false);
                }
                break;
            case 9 /* LEVEL_COMPLETE */:
                {
                    if (!this.winDialog) {
                        this.winDialog = new WinDialog_1.WinDialog();
                    }
                    this.winDialog.show(false);
                }
                break;
        }
    };
    BattleScene.prototype.onAwake = function () {
        GameData_1.GameData.instance.addObserver(this);
    };
    BattleScene.prototype.clickHandler = function (e) {
    };
    BattleScene.prototype.onDestroy = function () {
        GameData_1.GameData.instance.removeObserver(this);
    };
    return BattleScene;
}(layaMaxUI_1.ui.test.BattleSceneUI));
exports.default = BattleScene;
},{"../data/GameData":44,"./../battle/BattleManager":3,"./../ui/layaMaxUI":54,"./BattleUI":48,"./GameOverDialog":49,"./WinDialog":53}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var BattleManager_1 = require("./../battle/BattleManager");
var GameData_1 = require("../data/GameData");
var FilterUtil_1 = require("../utils/FilterUtil");
var BattleUI = /** @class */ (function (_super) {
    __extends(BattleUI, _super);
    function BattleUI() {
        return _super.call(this) || this;
    }
    BattleUI.prototype.updateData = function (cmd, data) {
        switch (cmd) {
            case 0 /* BATTLE_STATE_CHANGE */:
                {
                    switch (data) {
                        case 1 /* READY */:
                            {
                                this.log("准备开始");
                                this.txt_battleState.text = "准备开始";
                            }
                            break;
                        case 2 /* MY_TURN */:
                            {
                                this.log("我的回合");
                                this.txt_battleState.text = "我的回合";
                                this.txt_pile.text = "" + GameData_1.GameData.instance.cardPile.length;
                                this.txt_discard.text = "" + GameData_1.GameData.instance.discardCards.length;
                                this.txt_destroy.text = "" + GameData_1.GameData.instance.destroyCards.length;
                                this.list_my.array = GameData_1.GameData.instance.handCards;
                            }
                            break;
                        case 3 /* OPPOSITE_TURN */:
                            {
                                this.log("对方回合");
                                this.txt_battleState.text = "对方回合";
                            }
                            break;
                        case 5 /* TURN_END */:
                            {
                                this.log("回合结束");
                                this.txt_battleState.text = "回合结束";
                            }
                            break;
                        case 4 /* TURN_START */:
                            {
                                this.log("回合开始");
                                this.txt_battleState.text = "回合开始";
                            }
                            break;
                    }
                }
                break;
            case 4 /* HAND_CARD_REMOVED */:
                {
                    // this.list_my.refresh();
                    this.list_my.selectedIndex = -1;
                    this.txt_discard.text = "" + GameData_1.GameData.instance.discardCards.length;
                    this.txt_destroy.text = "" + GameData_1.GameData.instance.destroyCards.length;
                }
                break;
            case 6 /* HAND_CARD_UPDATE */:
                {
                    this.list_my.refresh();
                    this.txt_pile.text = "" + GameData_1.GameData.instance.cardPile.length;
                }
                break;
            case 1 /* MP_UPDATE */:
                {
                    this.txt_mp.text = GameData_1.GameData.instance.mp + "";
                }
                break;
            case 7 /* LOG */:
                {
                    this.log(data);
                }
                break;
            case 8 /* GAME_OVER */:
                {
                }
                break;
        }
    };
    BattleUI.prototype.log = function (content) {
        this.txt_console.text += "\n" + content;
        this.txt_console.vScrollBar.value = this.txt_console.vScrollBar.max;
    };
    BattleUI.prototype.onAwake = function () {
        var list = this.list_my;
        list.itemRender = layaMaxUI_1.ui.ui.CardRenderSkinUI;
        // 使用但隐藏滚动条
        list.hScrollBarSkin = "";
        list.selectEnable = true;
        list.selectHandler = new Laya.Handler(this, this.onSelect);
        list.renderHandler = new Laya.Handler(this, this.updateItem);
        this.btn_send.on(Laya.Event.CLICK, this, this.clickHandler);
        this.btn_end.on(Laya.Event.CLICK, this, this.clickHandler);
        GameData_1.GameData.instance.addObserver(this);
    };
    BattleUI.prototype.updateItem = function (cell, index) {
        var card = GameData_1.GameData.instance.handCards[index];
        if (card) {
            cell.txt_desc.text = card.config.desc;
            cell.txt_name.text = card.config.name;
            cell.txt_mp.text = card.config.mp;
            if (GameData_1.GameData.instance.selectedCard == card) {
                cell.filters = [FilterUtil_1.FilterUtil.FILTER_GREEN()];
            }
            else {
                cell.filters = null;
            }
            cell.visible = true;
        }
        else {
            cell.visible = false;
        }
    };
    BattleUI.prototype.onSelect = function (index) {
        console.log("当前选择的索引：" + index);
        if (index >= 0) {
            GameData_1.GameData.instance.selectedCard = GameData_1.GameData.instance.handCards[index];
        }
        this.list_my.refresh();
    };
    BattleUI.prototype.clickHandler = function (e) {
        if (e.currentTarget == this.btn_end) {
            BattleManager_1.BattleManager.Instance.endMyTurn();
        }
        else if (e.currentTarget == this.btn_send) {
            BattleManager_1.BattleManager.Instance.destroyScene();
            BattleManager_1.BattleManager.Instance.init(null);
        }
    };
    BattleUI.prototype.onDestroy = function () {
        GameData_1.GameData.instance.removeObserver(this);
    };
    return BattleUI;
}(layaMaxUI_1.ui.ui.BattleUISkinUI));
exports.default = BattleUI;
},{"../data/GameData":44,"../utils/FilterUtil":55,"./../battle/BattleManager":3,"./../ui/layaMaxUI":54}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameOverDialog = /** @class */ (function (_super) {
    __extends(GameOverDialog, _super);
    function GameOverDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GameOverDialog;
}(layaMaxUI_1.ui.ui.GameOverDialogSkinUI));
exports.GameOverDialog = GameOverDialog;
},{"../ui/layaMaxUI":54}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameStateManager_1 = require("../manager/GameStateManager");
var ConfigManager_1 = require("../config/ConfigManager");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        ConfigManager_1.ConfigManager.Instance.loadConfig(_this.configLoaded);
        return _this;
        //添加3D场景
        // var scene: Laya.Scene3D = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;
        // //添加照相机
        // var camera: Laya.Camera = (scene.addChild(new Laya.Camera(0, 0.1, 100))) as Laya.Camera;
        // camera.transform.translate(new Laya.Vector3(0, 3, 3));
        // camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        // //添加方向光
        // var directionLight: Laya.DirectionLight = scene.addChild(new Laya.DirectionLight()) as Laya.DirectionLight;
        // directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        // directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        // //添加自定义模型
        // var box: Laya.MeshSprite3D = scene.addChild(new Laya.MeshSprite3D(new Laya.BoxMesh(1, 1, 1))) as Laya.MeshSprite3D;
        // box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        // var material: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();
        // Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function(tex:Laya.Texture2D) {
        // 		material.albedoTexture = tex;
        // }));
        // box.meshRenderer.material = material;
        // this.btn_1.on(Laya.Event.CLICK, this, this.clickHandler);
    }
    GameUI.prototype.configLoaded = function () {
        GameStateManager_1.GameStateManager.Instance.changeGameState(2 /* GameStart */);
    };
    GameUI.prototype.clickHandler = function (e) {
        // GameStateManager.Instance.changeGameState(GameStateType.GameStart);
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"../config/ConfigManager":43,"../manager/GameStateManager":46,"./../ui/layaMaxUI":54}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ImageTest = /** @class */ (function (_super) {
    __extends(ImageTest, _super);
    function ImageTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageTest.prototype.onAwake = function () {
        this.scaleTime = 100;
        this.owner.on(Laya.Event.MOUSE_DOWN, this, this.scaleSmal);
        //添加鼠标抬起事件侦听。抬起时还原按钮。
        this.owner.on(Laya.Event.MOUSE_UP, this, this.scaleBig);
        //添加鼠标离开事件侦听。离开时还原按钮。
        this.owner.on(Laya.Event.MOUSE_OUT, this, this.scaleBig);
    };
    ImageTest.prototype.scaleBig = function () {
        //变大还原的缓动效果
        Laya.Tween.to(this.owner, { scaleX: 1, scaleY: 1 }, this.scaleTime);
    };
    ImageTest.prototype.scaleSmal = function () {
        //缩小至0.8的缓动效果
        Laya.Tween.to(this.owner, { scaleX: 0.8, scaleY: 0.8 }, this.scaleTime);
    };
    ImageTest.prototype.onDestroy = function () {
        //添加鼠标按下事件侦听。按时时缩小按钮。
        this.owner.off(Laya.Event.MOUSE_DOWN, this, this.scaleSmal);
        //添加鼠标抬起事件侦听。抬起时还原按钮。
        this.owner.off(Laya.Event.MOUSE_UP, this, this.scaleBig);
        //添加鼠标离开事件侦听。离开时还原按钮。
        this.owner.off(Laya.Event.MOUSE_OUT, this, this.scaleBig);
    };
    return ImageTest;
}(Laya.Script));
exports.default = ImageTest;
},{}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameStateManager_1 = require("../manager/GameStateManager");
var GameData_1 = require("../data/GameData");
var SelectHeroUI = /** @class */ (function (_super) {
    __extends(SelectHeroUI, _super);
    function SelectHeroUI() {
        return _super.call(this) || this;
        //加载场景文件
        //this.loadScene("ui/SelectHeroSkin.scene");
    }
    SelectHeroUI.prototype.onAwake = function () {
        this.hero1.on(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero2.on(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero3.on(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero4.on(Laya.UIEvent.CLICK, this, this.clickHandler);
    };
    SelectHeroUI.prototype.clickHandler = function (e) {
        switch (e.currentTarget) {
            case this.hero1:
                GameData_1.GameData.instance.career = 1;
                break;
            case this.hero2:
                GameData_1.GameData.instance.career = 2;
                break;
            case this.hero3:
                GameData_1.GameData.instance.career = 3;
                break;
            case this.hero4:
                GameData_1.GameData.instance.career = 4;
                break;
        }
        GameStateManager_1.GameStateManager.Instance.changeGameState(3 /* GameEnter */);
    };
    SelectHeroUI.prototype.onDestroy = function () {
        this.hero1.off(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero2.off(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero3.off(Laya.UIEvent.CLICK, this, this.clickHandler);
        this.hero4.off(Laya.UIEvent.CLICK, this, this.clickHandler);
    };
    return SelectHeroUI;
}(layaMaxUI_1.ui.ui.SelectHeroSceneUI));
exports.default = SelectHeroUI;
},{"../data/GameData":44,"../manager/GameStateManager":46,"./../ui/layaMaxUI":54}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var WinDialog = /** @class */ (function (_super) {
    __extends(WinDialog, _super);
    function WinDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WinDialog.prototype.setRewards = function (rew) {
        console.log(rew);
    };
    return WinDialog;
}(layaMaxUI_1.ui.ui.WinDialogSkinUI));
exports.WinDialog = WinDialog;
},{"../ui/layaMaxUI":54}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var View = Laya.View;
var Dialog = Laya.Dialog;
var Scene = Laya.Scene;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var BattleSceneUI = /** @class */ (function (_super) {
            __extends(BattleSceneUI, _super);
            function BattleSceneUI() {
                return _super.call(this) || this;
            }
            BattleSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(BattleSceneUI.uiView);
            };
            BattleSceneUI.uiView = { "type": "Scene", "props": { "width": 1136, "runtime": "script/BattleScene.ts", "height": 640 }, "compId": 1, "loadList": [], "loadList3D": [] };
            return BattleSceneUI;
        }(Scene));
        test.BattleSceneUI = BattleSceneUI;
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(TestSceneUI.uiView);
            };
            TestSceneUI.uiView = { "type": "Scene", "props": { "width": 1136, "runtime": "script/GameUI.ts", "positionVariance_0": 100, "maxPartices": 100, "height": 640 }, "compId": 1, "child": [{ "type": "Button", "props": { "width": 200, "var": "btn_1", "top": 200, "skin": "comp/button.png", "labelSize": 20, "label": "按钮", "height": 60, "centerX": 0 }, "compId": 20 }], "loadList": ["comp/button.png"], "loadList3D": [], "components": [] };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui_1) {
    var ui;
    (function (ui) {
        var BattleUISkinUI = /** @class */ (function (_super) {
            __extends(BattleUISkinUI, _super);
            function BattleUISkinUI() {
                return _super.call(this) || this;
            }
            BattleUISkinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(BattleUISkinUI.uiView);
            };
            BattleUISkinUI.uiView = { "type": "View", "props": { "width": 1136, "runtime": "script/BattleUI.ts", "height": 640 }, "compId": 1, "child": [{ "type": "Label", "props": { "y": 524, "x": 76, "var": "txt_mp", "text": "label", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 6 }, { "type": "Label", "props": { "y": 524, "x": 20.6279296875, "text": "水晶", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 7 }, { "type": "Sprite", "props": { "y": 14, "x": 18.8837890625, "var": "group_othertime" }, "compId": 10, "child": [{ "type": "Sprite", "props": { "x": -0.8837890625, "width": 255, "texture": "common/recovery_fontBg0.png", "height": 46 }, "compId": 8 }, { "type": "Label", "props": { "y": 13, "x": 85.1162109375, "var": "txt_level", "text": "出牌阶段", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 9 }], "components": [] }, { "type": "Sprite", "props": { "y": 544, "x": 722, "var": "group_button" }, "compId": 16, "child": [{ "type": "Sprite", "props": { "y": 30, "x": 79, "var": "btn_send", "texture": "common/commonbutton13_1.png", "pivotY": 30, "pivotX": 79 }, "compId": 12, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 20 }], "components": [] }, { "type": "Label", "props": { "y": 17, "x": 56, "text": "测试", "styleSkin": "comp/label.png", "mouseEnabled": false, "fontSize": 20, "color": "#ffffff" }, "compId": 13 }, { "type": "Sprite", "props": { "y": 30, "x": 283, "var": "btn_end", "texture": "common/commonbutton13_1.png", "pivotY": 30, "pivotX": 79 }, "compId": 14, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 21 }], "components": [] }, { "type": "Label", "props": { "y": 17, "x": 243, "text": "结束回合", "styleSkin": "comp/label.png", "mouseEnabled": false, "fontSize": 20, "color": "#ffffff" }, "compId": 15 }], "components": [] }, { "type": "Sprite", "props": { "y": 472, "x": 858, "var": "group_mytime" }, "compId": 17, "child": [{ "type": "Sprite", "props": { "x": -0.8837890625, "width": 255, "texture": "common/recovery_fontBg0.png", "height": 46 }, "compId": 18 }, { "type": "Label", "props": { "y": 13, "x": 85.1162109375, "var": "txt_battleState", "text": "出牌阶段", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 19 }], "components": [] }, { "type": "List", "props": { "y": 471, "x": 169, "width": 531, "var": "list_my", "repeatY": 1, "height": 153 }, "compId": 22 }, { "type": "TextArea", "props": { "y": 60, "x": 20.6279296875, "width": 181, "var": "txt_console", "vScrollBarSkin": "comp/vscroll.png", "text": "console", "skin": "comp/textarea.png", "height": 115, "fontSize": 16, "editable": false }, "compId": 23 }, { "type": "Label", "props": { "y": 564, "x": 86, "var": "txt_pile", "text": "label", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 24 }, { "type": "Label", "props": { "y": 565, "x": 20, "text": "发牌堆", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 25 }, { "type": "Label", "props": { "y": 586, "x": 86, "var": "txt_discard", "text": "label", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 26 }, { "type": "Label", "props": { "y": 586, "x": 20, "text": "出牌堆", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 27 }, { "type": "Label", "props": { "y": 607, "x": 86, "var": "txt_destroy", "text": "label", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 28 }, { "type": "Label", "props": { "y": 607, "x": 19, "text": "垃圾堆", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 29 }], "loadList": ["comp/label.png", "common/recovery_fontBg0.png", "common/commonbutton13_1.png", "comp/vscroll.png", "comp/textarea.png"], "loadList3D": [], "components": [] };
            return BattleUISkinUI;
        }(View));
        ui.BattleUISkinUI = BattleUISkinUI;
        var CardRenderSkinUI = /** @class */ (function (_super) {
            __extends(CardRenderSkinUI, _super);
            function CardRenderSkinUI() {
                return _super.call(this) || this;
            }
            CardRenderSkinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(CardRenderSkinUI.uiView);
            };
            CardRenderSkinUI.uiView = { "type": "View", "props": { "width": 104, "height": 143 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 16, "x": 0, "width": 104, "skin": "common/bg_render.png", "sizeGrid": "7,7,7,7", "height": 143 }, "compId": 3 }, { "type": "Label", "props": { "y": 24, "x": 1, "width": 98, "var": "txt_name", "text": "卡牌名", "strokeColor": "#000000", "stroke": 1, "height": 17, "color": "#ffffff", "bold": true, "align": "center" }, "compId": 4 }, { "type": "Label", "props": { "y": 93, "x": 2, "wordWrap": true, "width": 98, "var": "txt_desc", "valign": "middle", "text": "卡牌描述卡牌描述卡牌描述卡牌描述卡牌描述卡牌描述卡牌描述卡牌描述", "strokeColor": "#000000", "stroke": 1, "leading": 2, "height": 64, "color": "#ffffff", "align": "left" }, "compId": 5 }, { "type": "Label", "props": { "y": 71.5, "x": 3, "width": 98, "var": "txt_mp", "text": "卡牌名", "strokeColor": "#000000", "stroke": 1, "height": 17, "color": "#ffffff", "bold": true, "align": "center" }, "compId": 7 }], "loadList": ["common/bg_render.png"], "loadList3D": [], "components": [] };
            return CardRenderSkinUI;
        }(View));
        ui.CardRenderSkinUI = CardRenderSkinUI;
        var GameOverDialogSkinUI = /** @class */ (function (_super) {
            __extends(GameOverDialogSkinUI, _super);
            function GameOverDialogSkinUI() {
                return _super.call(this) || this;
            }
            GameOverDialogSkinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(GameOverDialogSkinUI.uiView);
            };
            GameOverDialogSkinUI.uiView = { "type": "Dialog", "props": { "width": 500, "height": 300 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 0, "x": 10, "width": 480, "skin": "common/tuozhanjiemian2.png", "sizeGrid": "60,30,40,30", "height": 301 }, "compId": 8 }, { "type": "Label", "props": { "y": 130, "x": 140, "text": "gg了，从头再来吧！菜鸡！", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 10 }], "loadList": ["common/tuozhanjiemian2.png", "comp/label.png"], "loadList3D": [], "components": [] };
            return GameOverDialogSkinUI;
        }(Dialog));
        ui.GameOverDialogSkinUI = GameOverDialogSkinUI;
        var HelpViewSkinUI = /** @class */ (function (_super) {
            __extends(HelpViewSkinUI, _super);
            function HelpViewSkinUI() {
                return _super.call(this) || this;
            }
            HelpViewSkinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(HelpViewSkinUI.uiView);
            };
            HelpViewSkinUI.uiView = { "type": "View", "props": { "width": 500, "height": 500 }, "compId": 1, "child": [{ "type": "Label", "props": { "y": 174, "x": 208, "text": "帮助", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 2 }], "loadList": ["comp/label.png"], "loadList3D": [], "components": [] };
            return HelpViewSkinUI;
        }(View));
        ui.HelpViewSkinUI = HelpViewSkinUI;
        var SelectHeroSceneUI = /** @class */ (function (_super) {
            __extends(SelectHeroSceneUI, _super);
            function SelectHeroSceneUI() {
                return _super.call(this) || this;
            }
            SelectHeroSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(SelectHeroSceneUI.uiView);
            };
            SelectHeroSceneUI.uiView = { "type": "Scene", "props": { "width": 1136, "runtime": "script/SelectHeroUI.ts", "height": 640 }, "compId": 1, "child": [{ "type": "Sprite", "props": { "y": 449, "x": 549, "width": 292, "var": "hero3", "texture": "img/choose1.png", "pivotY": 121, "pivotX": 145, "height": 246 }, "compId": 2, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 12 }], "components": [] }, { "type": "Sprite", "props": { "y": 176, "x": 545, "width": 296, "var": "hero2", "texture": "img/choose2.png", "pivotY": 155, "pivotX": 147, "height": 307 }, "compId": 3, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 9 }], "components": [] }, { "type": "Sprite", "props": { "y": 294.5, "x": 173, "width": 289, "var": "hero1", "texture": "img/choose4.png", "pivotY": 189, "pivotX": 144, "height": 377 }, "compId": 4, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 10 }], "components": [] }, { "type": "Sprite", "props": { "y": 293, "x": 926, "width": 314, "var": "hero4", "texture": "img/choose3.png", "pivotY": 200, "pivotX": 157, "height": 402 }, "compId": 5, "child": [{ "type": "Script", "props": { "runtime": "script/ImageBtn.ts" }, "compId": 11 }], "components": [] }], "loadList": ["img/choose1.png", "img/choose2.png", "img/choose4.png", "img/choose3.png"], "loadList3D": [], "components": [] };
            return SelectHeroSceneUI;
        }(Scene));
        ui.SelectHeroSceneUI = SelectHeroSceneUI;
        var WinDialogSkinUI = /** @class */ (function (_super) {
            __extends(WinDialogSkinUI, _super);
            function WinDialogSkinUI() {
                return _super.call(this) || this;
            }
            WinDialogSkinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(WinDialogSkinUI.uiView);
            };
            WinDialogSkinUI.uiView = { "type": "Dialog", "props": { "width": 500, "height": 300 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "width": 480, "skin": "common/tuozhanjiemian2.png", "sizeGrid": "60,30,40,30", "height": 301 }, "compId": 2 }, { "type": "Label", "props": { "y": 31, "x": 234.9951171875, "text": "win", "styleSkin": "comp/label.png", "fontSize": 20, "color": "#ffffff" }, "compId": 3 }], "loadList": ["common/tuozhanjiemian2.png", "comp/label.png"], "loadList3D": [], "components": [] };
            return WinDialogSkinUI;
        }(Dialog));
        ui.WinDialogSkinUI = WinDialogSkinUI;
    })(ui = ui_1.ui || (ui_1.ui = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterUtil = {
    /**
         * 变灰滤镜
         */
    FILTER_GRAY: function () {
        return new Laya.ColorFilter([0.3, 0.59, 0.11, 0, 0, 0.3, 0.59, 0.11, 0, 0, 0.3, 0.59, 0.11, 0, 0, 0, 0, 0, 1, 0]);
    },
    /**
     * 高亮滤镜
     */
    FILTER_HighLight: function () {
        return new Laya.ColorFilter([
            1, 0, 0, 0, 50,
            0, 1, 0, 0, 50,
            0, 0, 1, 0, 50,
            0, 0, 0, 1, 0
        ]);
    },
    /**
     * 变暗滤镜
     */
    FILTER_AN: function () {
        return new Laya.ColorFilter([
            0.9, 0, 0, 0, 0,
            0, 0.9, 0, 0, 0,
            0, 0, 0.9, 0, 0,
            0, 0, 0, 0.9, 0
        ]);
    },
    /**
     * 反相滤镜
     */
    FILTER_RP: function () {
        return new Laya.ColorFilter([-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0]);
    },
    /**
     * 绿色中毒滤镜
     */
    FILTER_GREEN: function () {
        return new Laya.ColorFilter([
            0, 0, 0, 0, 0,
            0, 1, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 1, 0
        ]);
    },
    /**
     * 绿色中毒滤镜
     */
    FILTER_RED: function () {
        return new Laya.ColorFilter([
            1, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 1, 0
        ]);
    },
    FILTER_MABI: function () {
        return new Laya.ColorFilter([
            0.3086, 0.6094, 0.0820, 0, 0,
            0.3086, 0.6094, 0.0820, 0, 0,
            0.3086, 0.6094, 0.0820, 0, 0,
            0, 0, 0, 1, 0
        ]);
    }
};
},{}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LimitedPool = /** @class */ (function () {
    function LimitedPool(c, maxCount) {
        this.max = 0;
        this.pool = [];
        this.creater = c;
        this.max = maxCount;
    }
    LimitedPool.prototype.pop = function () {
        var obj = this.pool.length > 0 ? this.pool.pop() : new (this.creater)();
        return obj;
    };
    LimitedPool.prototype.push = function (obj) {
        // if(this.pool.indexOf(obj) > -1){
        // 	console.log("ssss");
        // }
        if (this.max == 0 || this.pool.length < this.max) {
            obj.returnToPool();
            this.pool.push(obj);
        }
        else {
            //超出限制永久销毁
            obj.disposePermanent();
        }
    };
    LimitedPool.prototype.has = function (obj) {
        for (var _i = 0, _a = this.pool; _i < _a.length; _i++) {
            var o = _a[_i];
            if (o == obj) {
                return true;
            }
        }
        return false;
    };
    return LimitedPool;
}());
exports.LimitedPool = LimitedPool;
},{}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Pool = /** @class */ (function () {
    /**
     * @nums 初始化数目
     */
    function Pool(c, nums) {
        if (nums === void 0) { nums = 10; }
        this.max = 0;
        this.pool = [];
        this.creater = c;
        for (var i = 0; i < nums; i++) {
            this.pool.push(new (this.creater)());
        }
    }
    Pool.prototype.pop = function () {
        var obj = this.pool.length > 0 ? this.pool.pop() : new (this.creater)();
        return obj;
    };
    Pool.prototype.push = function (obj) {
        this.pool.push(obj);
    };
    Pool.prototype.has = function (obj) {
        for (var _i = 0, _a = this.pool; _i < _a.length; _i++) {
            var o = _a[_i];
            if (o == obj) {
                return true;
            }
        }
        return false;
    };
    Pool.prototype.clear = function () {
        this.pool = [];
    };
    return Pool;
}());
exports.Pool = Pool;
},{}],58:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./Pool"));
__export(require("./LimitedPool"));
var utils;
(function (utils) {
    function shuffle(a) {
        var len = a.length;
        for (var i = 0; i < len; i++) {
            var index = Math.floor(Math.random() * (len - i));
            var temp = a[index];
            a[index] = a[len - i - 1];
            a[len - i - 1] = temp;
        }
    }
    utils.shuffle = shuffle;
    function shuffleClone(array, target) {
        var len = array.length;
        var b = target ? target : [];
        for (var i = 0; i < len; i++) {
            b[i] = array[i];
        }
        for (var i = 0; i < len - 1; i++) {
            var index = Math.floor(Math.random() * (len - i));
            var temp = b[index];
            b[index] = b[len - i - 1];
            b[len - i - 1] = temp;
        }
        return b;
    }
    utils.shuffleClone = shuffleClone;
})(utils = exports.utils || (exports.utils = {}));
},{"./LimitedPool":56,"./Pool":57}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
